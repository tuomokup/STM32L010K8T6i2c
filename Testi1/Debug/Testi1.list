
Testi1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08008868  08008868  00018868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cfc  08008cfc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008cfc  08008cfc  00018cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d04  08008d04  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d04  08008d04  00018d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d08  08008d08  00018d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  200001dc  08008ee8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08008ee8  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099c6  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0b  00000000  00000000  00029bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002bad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  0002c470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b88  00000000  00000000  0002cd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c70a  00000000  00000000  0003e888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065d6b  00000000  00000000  0004af92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b0cfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003320  00000000  00000000  000b0d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800884c 	.word	0x0800884c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	0800884c 	.word	0x0800884c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f827 	bl	8001490 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff77 	bl	8001340 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f819 	bl	8001490 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f80f 	bl	8001490 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff9f 	bl	80013c4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff95 	bl	80013c4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f001 ff8e 	bl	8002484 <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f001 ff89 	bl	8002484 <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	469b      	mov	fp, r3
 800057a:	d433      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057c:	465a      	mov	r2, fp
 800057e:	4653      	mov	r3, sl
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83a      	bhi.n	8000606 <__udivmoddi4+0xc2>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e078      	b.n	8000688 <__udivmoddi4+0x144>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e075      	b.n	800068e <__udivmoddi4+0x14a>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e028      	b.n	800060e <__udivmoddi4+0xca>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	4652      	mov	r2, sl
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	4641      	mov	r1, r8
 80005f0:	0013      	movs	r3, r2
 80005f2:	464a      	mov	r2, r9
 80005f4:	408a      	lsls	r2, r1
 80005f6:	0017      	movs	r7, r2
 80005f8:	4642      	mov	r2, r8
 80005fa:	431f      	orrs	r7, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	001e      	movs	r6, r3
 8000602:	42af      	cmp	r7, r5
 8000604:	d9c4      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000606:	2200      	movs	r2, #0
 8000608:	2300      	movs	r3, #0
 800060a:	9200      	str	r2, [sp, #0]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	4643      	mov	r3, r8
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0d9      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000614:	07fb      	lsls	r3, r7, #31
 8000616:	0872      	lsrs	r2, r6, #1
 8000618:	431a      	orrs	r2, r3
 800061a:	4646      	mov	r6, r8
 800061c:	087b      	lsrs	r3, r7, #1
 800061e:	e00e      	b.n	800063e <__udivmoddi4+0xfa>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d101      	bne.n	8000628 <__udivmoddi4+0xe4>
 8000624:	42a2      	cmp	r2, r4
 8000626:	d80c      	bhi.n	8000642 <__udivmoddi4+0xfe>
 8000628:	1aa4      	subs	r4, r4, r2
 800062a:	419d      	sbcs	r5, r3
 800062c:	2001      	movs	r0, #1
 800062e:	1924      	adds	r4, r4, r4
 8000630:	416d      	adcs	r5, r5
 8000632:	2100      	movs	r1, #0
 8000634:	3e01      	subs	r6, #1
 8000636:	1824      	adds	r4, r4, r0
 8000638:	414d      	adcs	r5, r1
 800063a:	2e00      	cmp	r6, #0
 800063c:	d006      	beq.n	800064c <__udivmoddi4+0x108>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d9ee      	bls.n	8000620 <__udivmoddi4+0xdc>
 8000642:	3e01      	subs	r6, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2e00      	cmp	r6, #0
 800064a:	d1f8      	bne.n	800063e <__udivmoddi4+0xfa>
 800064c:	9800      	ldr	r0, [sp, #0]
 800064e:	9901      	ldr	r1, [sp, #4]
 8000650:	465b      	mov	r3, fp
 8000652:	1900      	adds	r0, r0, r4
 8000654:	4169      	adcs	r1, r5
 8000656:	2b00      	cmp	r3, #0
 8000658:	db24      	blt.n	80006a4 <__udivmoddi4+0x160>
 800065a:	002b      	movs	r3, r5
 800065c:	465a      	mov	r2, fp
 800065e:	4644      	mov	r4, r8
 8000660:	40d3      	lsrs	r3, r2
 8000662:	002a      	movs	r2, r5
 8000664:	40e2      	lsrs	r2, r4
 8000666:	001c      	movs	r4, r3
 8000668:	465b      	mov	r3, fp
 800066a:	0015      	movs	r5, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	db2a      	blt.n	80006c6 <__udivmoddi4+0x182>
 8000670:	0026      	movs	r6, r4
 8000672:	409e      	lsls	r6, r3
 8000674:	0033      	movs	r3, r6
 8000676:	0026      	movs	r6, r4
 8000678:	4647      	mov	r7, r8
 800067a:	40be      	lsls	r6, r7
 800067c:	0032      	movs	r2, r6
 800067e:	1a80      	subs	r0, r0, r2
 8000680:	4199      	sbcs	r1, r3
 8000682:	9000      	str	r0, [sp, #0]
 8000684:	9101      	str	r1, [sp, #4]
 8000686:	e79f      	b.n	80005c8 <__udivmoddi4+0x84>
 8000688:	42a3      	cmp	r3, r4
 800068a:	d8bc      	bhi.n	8000606 <__udivmoddi4+0xc2>
 800068c:	e783      	b.n	8000596 <__udivmoddi4+0x52>
 800068e:	4642      	mov	r2, r8
 8000690:	2320      	movs	r3, #32
 8000692:	2100      	movs	r1, #0
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	2200      	movs	r2, #0
 8000698:	9100      	str	r1, [sp, #0]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	2201      	movs	r2, #1
 800069e:	40da      	lsrs	r2, r3
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	e786      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	4646      	mov	r6, r8
 80006ae:	409a      	lsls	r2, r3
 80006b0:	0023      	movs	r3, r4
 80006b2:	40f3      	lsrs	r3, r6
 80006b4:	4644      	mov	r4, r8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	002a      	movs	r2, r5
 80006ba:	40e2      	lsrs	r2, r4
 80006bc:	001c      	movs	r4, r3
 80006be:	465b      	mov	r3, fp
 80006c0:	0015      	movs	r5, r2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dad4      	bge.n	8000670 <__udivmoddi4+0x12c>
 80006c6:	4642      	mov	r2, r8
 80006c8:	002f      	movs	r7, r5
 80006ca:	2320      	movs	r3, #32
 80006cc:	0026      	movs	r6, r4
 80006ce:	4097      	lsls	r7, r2
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	40de      	lsrs	r6, r3
 80006d4:	003b      	movs	r3, r7
 80006d6:	4333      	orrs	r3, r6
 80006d8:	e7cd      	b.n	8000676 <__udivmoddi4+0x132>
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <__aeabi_dadd>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	464f      	mov	r7, r9
 80006e0:	4646      	mov	r6, r8
 80006e2:	46d6      	mov	lr, sl
 80006e4:	000d      	movs	r5, r1
 80006e6:	0004      	movs	r4, r0
 80006e8:	b5c0      	push	{r6, r7, lr}
 80006ea:	001f      	movs	r7, r3
 80006ec:	0011      	movs	r1, r2
 80006ee:	0328      	lsls	r0, r5, #12
 80006f0:	0f62      	lsrs	r2, r4, #29
 80006f2:	0a40      	lsrs	r0, r0, #9
 80006f4:	4310      	orrs	r0, r2
 80006f6:	007a      	lsls	r2, r7, #1
 80006f8:	0d52      	lsrs	r2, r2, #21
 80006fa:	00e3      	lsls	r3, r4, #3
 80006fc:	033c      	lsls	r4, r7, #12
 80006fe:	4691      	mov	r9, r2
 8000700:	0a64      	lsrs	r4, r4, #9
 8000702:	0ffa      	lsrs	r2, r7, #31
 8000704:	0f4f      	lsrs	r7, r1, #29
 8000706:	006e      	lsls	r6, r5, #1
 8000708:	4327      	orrs	r7, r4
 800070a:	4692      	mov	sl, r2
 800070c:	46b8      	mov	r8, r7
 800070e:	0d76      	lsrs	r6, r6, #21
 8000710:	0fed      	lsrs	r5, r5, #31
 8000712:	00c9      	lsls	r1, r1, #3
 8000714:	4295      	cmp	r5, r2
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x3e>
 8000718:	e099      	b.n	800084e <__aeabi_dadd+0x172>
 800071a:	464c      	mov	r4, r9
 800071c:	1b34      	subs	r4, r6, r4
 800071e:	46a4      	mov	ip, r4
 8000720:	2c00      	cmp	r4, #0
 8000722:	dc00      	bgt.n	8000726 <__aeabi_dadd+0x4a>
 8000724:	e07c      	b.n	8000820 <__aeabi_dadd+0x144>
 8000726:	464a      	mov	r2, r9
 8000728:	2a00      	cmp	r2, #0
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0x52>
 800072c:	e0b8      	b.n	80008a0 <__aeabi_dadd+0x1c4>
 800072e:	4ac5      	ldr	r2, [pc, #788]	; (8000a44 <__aeabi_dadd+0x368>)
 8000730:	4296      	cmp	r6, r2
 8000732:	d100      	bne.n	8000736 <__aeabi_dadd+0x5a>
 8000734:	e11c      	b.n	8000970 <__aeabi_dadd+0x294>
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	003c      	movs	r4, r7
 800073a:	0412      	lsls	r2, r2, #16
 800073c:	4314      	orrs	r4, r2
 800073e:	46a0      	mov	r8, r4
 8000740:	4662      	mov	r2, ip
 8000742:	2a38      	cmp	r2, #56	; 0x38
 8000744:	dd00      	ble.n	8000748 <__aeabi_dadd+0x6c>
 8000746:	e161      	b.n	8000a0c <__aeabi_dadd+0x330>
 8000748:	2a1f      	cmp	r2, #31
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0x72>
 800074c:	e1cc      	b.n	8000ae8 <__aeabi_dadd+0x40c>
 800074e:	4664      	mov	r4, ip
 8000750:	2220      	movs	r2, #32
 8000752:	1b12      	subs	r2, r2, r4
 8000754:	4644      	mov	r4, r8
 8000756:	4094      	lsls	r4, r2
 8000758:	000f      	movs	r7, r1
 800075a:	46a1      	mov	r9, r4
 800075c:	4664      	mov	r4, ip
 800075e:	4091      	lsls	r1, r2
 8000760:	40e7      	lsrs	r7, r4
 8000762:	464c      	mov	r4, r9
 8000764:	1e4a      	subs	r2, r1, #1
 8000766:	4191      	sbcs	r1, r2
 8000768:	433c      	orrs	r4, r7
 800076a:	4642      	mov	r2, r8
 800076c:	4321      	orrs	r1, r4
 800076e:	4664      	mov	r4, ip
 8000770:	40e2      	lsrs	r2, r4
 8000772:	1a80      	subs	r0, r0, r2
 8000774:	1a5c      	subs	r4, r3, r1
 8000776:	42a3      	cmp	r3, r4
 8000778:	419b      	sbcs	r3, r3
 800077a:	425f      	negs	r7, r3
 800077c:	1bc7      	subs	r7, r0, r7
 800077e:	023b      	lsls	r3, r7, #8
 8000780:	d400      	bmi.n	8000784 <__aeabi_dadd+0xa8>
 8000782:	e0d0      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000784:	027f      	lsls	r7, r7, #9
 8000786:	0a7f      	lsrs	r7, r7, #9
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0xb2>
 800078c:	e0ff      	b.n	800098e <__aeabi_dadd+0x2b2>
 800078e:	0038      	movs	r0, r7
 8000790:	f001 fe5a 	bl	8002448 <__clzsi2>
 8000794:	0001      	movs	r1, r0
 8000796:	3908      	subs	r1, #8
 8000798:	2320      	movs	r3, #32
 800079a:	0022      	movs	r2, r4
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	408f      	lsls	r7, r1
 80007a0:	40da      	lsrs	r2, r3
 80007a2:	408c      	lsls	r4, r1
 80007a4:	4317      	orrs	r7, r2
 80007a6:	42b1      	cmp	r1, r6
 80007a8:	da00      	bge.n	80007ac <__aeabi_dadd+0xd0>
 80007aa:	e0ff      	b.n	80009ac <__aeabi_dadd+0x2d0>
 80007ac:	1b89      	subs	r1, r1, r6
 80007ae:	1c4b      	adds	r3, r1, #1
 80007b0:	2b1f      	cmp	r3, #31
 80007b2:	dd00      	ble.n	80007b6 <__aeabi_dadd+0xda>
 80007b4:	e0a8      	b.n	8000908 <__aeabi_dadd+0x22c>
 80007b6:	2220      	movs	r2, #32
 80007b8:	0039      	movs	r1, r7
 80007ba:	1ad2      	subs	r2, r2, r3
 80007bc:	0020      	movs	r0, r4
 80007be:	4094      	lsls	r4, r2
 80007c0:	4091      	lsls	r1, r2
 80007c2:	40d8      	lsrs	r0, r3
 80007c4:	1e62      	subs	r2, r4, #1
 80007c6:	4194      	sbcs	r4, r2
 80007c8:	40df      	lsrs	r7, r3
 80007ca:	2600      	movs	r6, #0
 80007cc:	4301      	orrs	r1, r0
 80007ce:	430c      	orrs	r4, r1
 80007d0:	0763      	lsls	r3, r4, #29
 80007d2:	d009      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007d4:	230f      	movs	r3, #15
 80007d6:	4023      	ands	r3, r4
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d005      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007dc:	1d23      	adds	r3, r4, #4
 80007de:	42a3      	cmp	r3, r4
 80007e0:	41a4      	sbcs	r4, r4
 80007e2:	4264      	negs	r4, r4
 80007e4:	193f      	adds	r7, r7, r4
 80007e6:	001c      	movs	r4, r3
 80007e8:	023b      	lsls	r3, r7, #8
 80007ea:	d400      	bmi.n	80007ee <__aeabi_dadd+0x112>
 80007ec:	e09e      	b.n	800092c <__aeabi_dadd+0x250>
 80007ee:	4b95      	ldr	r3, [pc, #596]	; (8000a44 <__aeabi_dadd+0x368>)
 80007f0:	3601      	adds	r6, #1
 80007f2:	429e      	cmp	r6, r3
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dadd+0x11c>
 80007f6:	e0b7      	b.n	8000968 <__aeabi_dadd+0x28c>
 80007f8:	4a93      	ldr	r2, [pc, #588]	; (8000a48 <__aeabi_dadd+0x36c>)
 80007fa:	08e4      	lsrs	r4, r4, #3
 80007fc:	4017      	ands	r7, r2
 80007fe:	077b      	lsls	r3, r7, #29
 8000800:	0571      	lsls	r1, r6, #21
 8000802:	027f      	lsls	r7, r7, #9
 8000804:	4323      	orrs	r3, r4
 8000806:	0b3f      	lsrs	r7, r7, #12
 8000808:	0d4a      	lsrs	r2, r1, #21
 800080a:	0512      	lsls	r2, r2, #20
 800080c:	433a      	orrs	r2, r7
 800080e:	07ed      	lsls	r5, r5, #31
 8000810:	432a      	orrs	r2, r5
 8000812:	0018      	movs	r0, r3
 8000814:	0011      	movs	r1, r2
 8000816:	bce0      	pop	{r5, r6, r7}
 8000818:	46ba      	mov	sl, r7
 800081a:	46b1      	mov	r9, r6
 800081c:	46a8      	mov	r8, r5
 800081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000820:	2c00      	cmp	r4, #0
 8000822:	d04b      	beq.n	80008bc <__aeabi_dadd+0x1e0>
 8000824:	464c      	mov	r4, r9
 8000826:	1ba4      	subs	r4, r4, r6
 8000828:	46a4      	mov	ip, r4
 800082a:	2e00      	cmp	r6, #0
 800082c:	d000      	beq.n	8000830 <__aeabi_dadd+0x154>
 800082e:	e123      	b.n	8000a78 <__aeabi_dadd+0x39c>
 8000830:	0004      	movs	r4, r0
 8000832:	431c      	orrs	r4, r3
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x15c>
 8000836:	e1af      	b.n	8000b98 <__aeabi_dadd+0x4bc>
 8000838:	4662      	mov	r2, ip
 800083a:	1e54      	subs	r4, r2, #1
 800083c:	2a01      	cmp	r2, #1
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x166>
 8000840:	e215      	b.n	8000c6e <__aeabi_dadd+0x592>
 8000842:	4d80      	ldr	r5, [pc, #512]	; (8000a44 <__aeabi_dadd+0x368>)
 8000844:	45ac      	cmp	ip, r5
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x16e>
 8000848:	e1c8      	b.n	8000bdc <__aeabi_dadd+0x500>
 800084a:	46a4      	mov	ip, r4
 800084c:	e11b      	b.n	8000a86 <__aeabi_dadd+0x3aa>
 800084e:	464a      	mov	r2, r9
 8000850:	1ab2      	subs	r2, r6, r2
 8000852:	4694      	mov	ip, r2
 8000854:	2a00      	cmp	r2, #0
 8000856:	dc00      	bgt.n	800085a <__aeabi_dadd+0x17e>
 8000858:	e0ac      	b.n	80009b4 <__aeabi_dadd+0x2d8>
 800085a:	464a      	mov	r2, r9
 800085c:	2a00      	cmp	r2, #0
 800085e:	d043      	beq.n	80008e8 <__aeabi_dadd+0x20c>
 8000860:	4a78      	ldr	r2, [pc, #480]	; (8000a44 <__aeabi_dadd+0x368>)
 8000862:	4296      	cmp	r6, r2
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x18c>
 8000866:	e1af      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	003c      	movs	r4, r7
 800086c:	0412      	lsls	r2, r2, #16
 800086e:	4314      	orrs	r4, r2
 8000870:	46a0      	mov	r8, r4
 8000872:	4662      	mov	r2, ip
 8000874:	2a38      	cmp	r2, #56	; 0x38
 8000876:	dc67      	bgt.n	8000948 <__aeabi_dadd+0x26c>
 8000878:	2a1f      	cmp	r2, #31
 800087a:	dc00      	bgt.n	800087e <__aeabi_dadd+0x1a2>
 800087c:	e15f      	b.n	8000b3e <__aeabi_dadd+0x462>
 800087e:	4647      	mov	r7, r8
 8000880:	3a20      	subs	r2, #32
 8000882:	40d7      	lsrs	r7, r2
 8000884:	4662      	mov	r2, ip
 8000886:	2a20      	cmp	r2, #32
 8000888:	d005      	beq.n	8000896 <__aeabi_dadd+0x1ba>
 800088a:	4664      	mov	r4, ip
 800088c:	2240      	movs	r2, #64	; 0x40
 800088e:	1b12      	subs	r2, r2, r4
 8000890:	4644      	mov	r4, r8
 8000892:	4094      	lsls	r4, r2
 8000894:	4321      	orrs	r1, r4
 8000896:	1e4a      	subs	r2, r1, #1
 8000898:	4191      	sbcs	r1, r2
 800089a:	000c      	movs	r4, r1
 800089c:	433c      	orrs	r4, r7
 800089e:	e057      	b.n	8000950 <__aeabi_dadd+0x274>
 80008a0:	003a      	movs	r2, r7
 80008a2:	430a      	orrs	r2, r1
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x1cc>
 80008a6:	e105      	b.n	8000ab4 <__aeabi_dadd+0x3d8>
 80008a8:	0022      	movs	r2, r4
 80008aa:	3a01      	subs	r2, #1
 80008ac:	2c01      	cmp	r4, #1
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dadd+0x1d6>
 80008b0:	e182      	b.n	8000bb8 <__aeabi_dadd+0x4dc>
 80008b2:	4c64      	ldr	r4, [pc, #400]	; (8000a44 <__aeabi_dadd+0x368>)
 80008b4:	45a4      	cmp	ip, r4
 80008b6:	d05b      	beq.n	8000970 <__aeabi_dadd+0x294>
 80008b8:	4694      	mov	ip, r2
 80008ba:	e741      	b.n	8000740 <__aeabi_dadd+0x64>
 80008bc:	4c63      	ldr	r4, [pc, #396]	; (8000a4c <__aeabi_dadd+0x370>)
 80008be:	1c77      	adds	r7, r6, #1
 80008c0:	4227      	tst	r7, r4
 80008c2:	d000      	beq.n	80008c6 <__aeabi_dadd+0x1ea>
 80008c4:	e0c4      	b.n	8000a50 <__aeabi_dadd+0x374>
 80008c6:	0004      	movs	r4, r0
 80008c8:	431c      	orrs	r4, r3
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dadd+0x1f4>
 80008ce:	e169      	b.n	8000ba4 <__aeabi_dadd+0x4c8>
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x1fa>
 80008d4:	e1bf      	b.n	8000c56 <__aeabi_dadd+0x57a>
 80008d6:	4644      	mov	r4, r8
 80008d8:	430c      	orrs	r4, r1
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x202>
 80008dc:	e1d0      	b.n	8000c80 <__aeabi_dadd+0x5a4>
 80008de:	0742      	lsls	r2, r0, #29
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	08c0      	lsrs	r0, r0, #3
 80008e6:	e029      	b.n	800093c <__aeabi_dadd+0x260>
 80008e8:	003a      	movs	r2, r7
 80008ea:	430a      	orrs	r2, r1
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dadd+0x214>
 80008ee:	e170      	b.n	8000bd2 <__aeabi_dadd+0x4f6>
 80008f0:	4662      	mov	r2, ip
 80008f2:	4664      	mov	r4, ip
 80008f4:	3a01      	subs	r2, #1
 80008f6:	2c01      	cmp	r4, #1
 80008f8:	d100      	bne.n	80008fc <__aeabi_dadd+0x220>
 80008fa:	e0e0      	b.n	8000abe <__aeabi_dadd+0x3e2>
 80008fc:	4c51      	ldr	r4, [pc, #324]	; (8000a44 <__aeabi_dadd+0x368>)
 80008fe:	45a4      	cmp	ip, r4
 8000900:	d100      	bne.n	8000904 <__aeabi_dadd+0x228>
 8000902:	e161      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000904:	4694      	mov	ip, r2
 8000906:	e7b4      	b.n	8000872 <__aeabi_dadd+0x196>
 8000908:	003a      	movs	r2, r7
 800090a:	391f      	subs	r1, #31
 800090c:	40ca      	lsrs	r2, r1
 800090e:	0011      	movs	r1, r2
 8000910:	2b20      	cmp	r3, #32
 8000912:	d003      	beq.n	800091c <__aeabi_dadd+0x240>
 8000914:	2240      	movs	r2, #64	; 0x40
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	409f      	lsls	r7, r3
 800091a:	433c      	orrs	r4, r7
 800091c:	1e63      	subs	r3, r4, #1
 800091e:	419c      	sbcs	r4, r3
 8000920:	2700      	movs	r7, #0
 8000922:	2600      	movs	r6, #0
 8000924:	430c      	orrs	r4, r1
 8000926:	0763      	lsls	r3, r4, #29
 8000928:	d000      	beq.n	800092c <__aeabi_dadd+0x250>
 800092a:	e753      	b.n	80007d4 <__aeabi_dadd+0xf8>
 800092c:	46b4      	mov	ip, r6
 800092e:	08e4      	lsrs	r4, r4, #3
 8000930:	077b      	lsls	r3, r7, #29
 8000932:	4323      	orrs	r3, r4
 8000934:	08f8      	lsrs	r0, r7, #3
 8000936:	4a43      	ldr	r2, [pc, #268]	; (8000a44 <__aeabi_dadd+0x368>)
 8000938:	4594      	cmp	ip, r2
 800093a:	d01d      	beq.n	8000978 <__aeabi_dadd+0x29c>
 800093c:	4662      	mov	r2, ip
 800093e:	0307      	lsls	r7, r0, #12
 8000940:	0552      	lsls	r2, r2, #21
 8000942:	0b3f      	lsrs	r7, r7, #12
 8000944:	0d52      	lsrs	r2, r2, #21
 8000946:	e760      	b.n	800080a <__aeabi_dadd+0x12e>
 8000948:	4644      	mov	r4, r8
 800094a:	430c      	orrs	r4, r1
 800094c:	1e62      	subs	r2, r4, #1
 800094e:	4194      	sbcs	r4, r2
 8000950:	18e4      	adds	r4, r4, r3
 8000952:	429c      	cmp	r4, r3
 8000954:	419b      	sbcs	r3, r3
 8000956:	425f      	negs	r7, r3
 8000958:	183f      	adds	r7, r7, r0
 800095a:	023b      	lsls	r3, r7, #8
 800095c:	d5e3      	bpl.n	8000926 <__aeabi_dadd+0x24a>
 800095e:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <__aeabi_dadd+0x368>)
 8000960:	3601      	adds	r6, #1
 8000962:	429e      	cmp	r6, r3
 8000964:	d000      	beq.n	8000968 <__aeabi_dadd+0x28c>
 8000966:	e0b5      	b.n	8000ad4 <__aeabi_dadd+0x3f8>
 8000968:	0032      	movs	r2, r6
 800096a:	2700      	movs	r7, #0
 800096c:	2300      	movs	r3, #0
 800096e:	e74c      	b.n	800080a <__aeabi_dadd+0x12e>
 8000970:	0742      	lsls	r2, r0, #29
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	4313      	orrs	r3, r2
 8000976:	08c0      	lsrs	r0, r0, #3
 8000978:	001a      	movs	r2, r3
 800097a:	4302      	orrs	r2, r0
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x2a4>
 800097e:	e1e1      	b.n	8000d44 <__aeabi_dadd+0x668>
 8000980:	2780      	movs	r7, #128	; 0x80
 8000982:	033f      	lsls	r7, r7, #12
 8000984:	4307      	orrs	r7, r0
 8000986:	033f      	lsls	r7, r7, #12
 8000988:	4a2e      	ldr	r2, [pc, #184]	; (8000a44 <__aeabi_dadd+0x368>)
 800098a:	0b3f      	lsrs	r7, r7, #12
 800098c:	e73d      	b.n	800080a <__aeabi_dadd+0x12e>
 800098e:	0020      	movs	r0, r4
 8000990:	f001 fd5a 	bl	8002448 <__clzsi2>
 8000994:	0001      	movs	r1, r0
 8000996:	3118      	adds	r1, #24
 8000998:	291f      	cmp	r1, #31
 800099a:	dc00      	bgt.n	800099e <__aeabi_dadd+0x2c2>
 800099c:	e6fc      	b.n	8000798 <__aeabi_dadd+0xbc>
 800099e:	3808      	subs	r0, #8
 80009a0:	4084      	lsls	r4, r0
 80009a2:	0027      	movs	r7, r4
 80009a4:	2400      	movs	r4, #0
 80009a6:	42b1      	cmp	r1, r6
 80009a8:	db00      	blt.n	80009ac <__aeabi_dadd+0x2d0>
 80009aa:	e6ff      	b.n	80007ac <__aeabi_dadd+0xd0>
 80009ac:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <__aeabi_dadd+0x36c>)
 80009ae:	1a76      	subs	r6, r6, r1
 80009b0:	4017      	ands	r7, r2
 80009b2:	e70d      	b.n	80007d0 <__aeabi_dadd+0xf4>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d02f      	beq.n	8000a18 <__aeabi_dadd+0x33c>
 80009b8:	464a      	mov	r2, r9
 80009ba:	1b92      	subs	r2, r2, r6
 80009bc:	4694      	mov	ip, r2
 80009be:	2e00      	cmp	r6, #0
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dadd+0x2e8>
 80009c2:	e0ad      	b.n	8000b20 <__aeabi_dadd+0x444>
 80009c4:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <__aeabi_dadd+0x368>)
 80009c6:	4591      	cmp	r9, r2
 80009c8:	d100      	bne.n	80009cc <__aeabi_dadd+0x2f0>
 80009ca:	e10f      	b.n	8000bec <__aeabi_dadd+0x510>
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	0412      	lsls	r2, r2, #16
 80009d0:	4310      	orrs	r0, r2
 80009d2:	4662      	mov	r2, ip
 80009d4:	2a38      	cmp	r2, #56	; 0x38
 80009d6:	dd00      	ble.n	80009da <__aeabi_dadd+0x2fe>
 80009d8:	e10f      	b.n	8000bfa <__aeabi_dadd+0x51e>
 80009da:	2a1f      	cmp	r2, #31
 80009dc:	dd00      	ble.n	80009e0 <__aeabi_dadd+0x304>
 80009de:	e180      	b.n	8000ce2 <__aeabi_dadd+0x606>
 80009e0:	4664      	mov	r4, ip
 80009e2:	2220      	movs	r2, #32
 80009e4:	001e      	movs	r6, r3
 80009e6:	1b12      	subs	r2, r2, r4
 80009e8:	4667      	mov	r7, ip
 80009ea:	0004      	movs	r4, r0
 80009ec:	4093      	lsls	r3, r2
 80009ee:	4094      	lsls	r4, r2
 80009f0:	40fe      	lsrs	r6, r7
 80009f2:	1e5a      	subs	r2, r3, #1
 80009f4:	4193      	sbcs	r3, r2
 80009f6:	40f8      	lsrs	r0, r7
 80009f8:	4334      	orrs	r4, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	4480      	add	r8, r0
 80009fe:	1864      	adds	r4, r4, r1
 8000a00:	428c      	cmp	r4, r1
 8000a02:	41bf      	sbcs	r7, r7
 8000a04:	427f      	negs	r7, r7
 8000a06:	464e      	mov	r6, r9
 8000a08:	4447      	add	r7, r8
 8000a0a:	e7a6      	b.n	800095a <__aeabi_dadd+0x27e>
 8000a0c:	4642      	mov	r2, r8
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	0011      	movs	r1, r2
 8000a12:	1e4a      	subs	r2, r1, #1
 8000a14:	4191      	sbcs	r1, r2
 8000a16:	e6ad      	b.n	8000774 <__aeabi_dadd+0x98>
 8000a18:	4c0c      	ldr	r4, [pc, #48]	; (8000a4c <__aeabi_dadd+0x370>)
 8000a1a:	1c72      	adds	r2, r6, #1
 8000a1c:	4222      	tst	r2, r4
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_dadd+0x346>
 8000a20:	e0a1      	b.n	8000b66 <__aeabi_dadd+0x48a>
 8000a22:	0002      	movs	r2, r0
 8000a24:	431a      	orrs	r2, r3
 8000a26:	2e00      	cmp	r6, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x350>
 8000a2a:	e0fa      	b.n	8000c22 <__aeabi_dadd+0x546>
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x356>
 8000a30:	e145      	b.n	8000cbe <__aeabi_dadd+0x5e2>
 8000a32:	003a      	movs	r2, r7
 8000a34:	430a      	orrs	r2, r1
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x35e>
 8000a38:	e146      	b.n	8000cc8 <__aeabi_dadd+0x5ec>
 8000a3a:	0742      	lsls	r2, r0, #29
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	e77b      	b.n	800093c <__aeabi_dadd+0x260>
 8000a44:	000007ff 	.word	0x000007ff
 8000a48:	ff7fffff 	.word	0xff7fffff
 8000a4c:	000007fe 	.word	0x000007fe
 8000a50:	4647      	mov	r7, r8
 8000a52:	1a5c      	subs	r4, r3, r1
 8000a54:	1bc2      	subs	r2, r0, r7
 8000a56:	42a3      	cmp	r3, r4
 8000a58:	41bf      	sbcs	r7, r7
 8000a5a:	427f      	negs	r7, r7
 8000a5c:	46b9      	mov	r9, r7
 8000a5e:	0017      	movs	r7, r2
 8000a60:	464a      	mov	r2, r9
 8000a62:	1abf      	subs	r7, r7, r2
 8000a64:	023a      	lsls	r2, r7, #8
 8000a66:	d500      	bpl.n	8000a6a <__aeabi_dadd+0x38e>
 8000a68:	e08d      	b.n	8000b86 <__aeabi_dadd+0x4aa>
 8000a6a:	0023      	movs	r3, r4
 8000a6c:	433b      	orrs	r3, r7
 8000a6e:	d000      	beq.n	8000a72 <__aeabi_dadd+0x396>
 8000a70:	e68a      	b.n	8000788 <__aeabi_dadd+0xac>
 8000a72:	2000      	movs	r0, #0
 8000a74:	2500      	movs	r5, #0
 8000a76:	e761      	b.n	800093c <__aeabi_dadd+0x260>
 8000a78:	4cb4      	ldr	r4, [pc, #720]	; (8000d4c <__aeabi_dadd+0x670>)
 8000a7a:	45a1      	cmp	r9, r4
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_dadd+0x3a4>
 8000a7e:	e0ad      	b.n	8000bdc <__aeabi_dadd+0x500>
 8000a80:	2480      	movs	r4, #128	; 0x80
 8000a82:	0424      	lsls	r4, r4, #16
 8000a84:	4320      	orrs	r0, r4
 8000a86:	4664      	mov	r4, ip
 8000a88:	2c38      	cmp	r4, #56	; 0x38
 8000a8a:	dc3d      	bgt.n	8000b08 <__aeabi_dadd+0x42c>
 8000a8c:	4662      	mov	r2, ip
 8000a8e:	2c1f      	cmp	r4, #31
 8000a90:	dd00      	ble.n	8000a94 <__aeabi_dadd+0x3b8>
 8000a92:	e0b7      	b.n	8000c04 <__aeabi_dadd+0x528>
 8000a94:	2520      	movs	r5, #32
 8000a96:	001e      	movs	r6, r3
 8000a98:	1b2d      	subs	r5, r5, r4
 8000a9a:	0004      	movs	r4, r0
 8000a9c:	40ab      	lsls	r3, r5
 8000a9e:	40ac      	lsls	r4, r5
 8000aa0:	40d6      	lsrs	r6, r2
 8000aa2:	40d0      	lsrs	r0, r2
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	1e5d      	subs	r5, r3, #1
 8000aa8:	41ab      	sbcs	r3, r5
 8000aaa:	4334      	orrs	r4, r6
 8000aac:	1a12      	subs	r2, r2, r0
 8000aae:	4690      	mov	r8, r2
 8000ab0:	4323      	orrs	r3, r4
 8000ab2:	e02c      	b.n	8000b0e <__aeabi_dadd+0x432>
 8000ab4:	0742      	lsls	r2, r0, #29
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	08c0      	lsrs	r0, r0, #3
 8000abc:	e73b      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000abe:	185c      	adds	r4, r3, r1
 8000ac0:	429c      	cmp	r4, r3
 8000ac2:	419b      	sbcs	r3, r3
 8000ac4:	4440      	add	r0, r8
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	18c7      	adds	r7, r0, r3
 8000aca:	2601      	movs	r6, #1
 8000acc:	023b      	lsls	r3, r7, #8
 8000ace:	d400      	bmi.n	8000ad2 <__aeabi_dadd+0x3f6>
 8000ad0:	e729      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ad2:	2602      	movs	r6, #2
 8000ad4:	4a9e      	ldr	r2, [pc, #632]	; (8000d50 <__aeabi_dadd+0x674>)
 8000ad6:	0863      	lsrs	r3, r4, #1
 8000ad8:	4017      	ands	r7, r2
 8000ada:	2201      	movs	r2, #1
 8000adc:	4014      	ands	r4, r2
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	07fb      	lsls	r3, r7, #31
 8000ae2:	431c      	orrs	r4, r3
 8000ae4:	087f      	lsrs	r7, r7, #1
 8000ae6:	e673      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000ae8:	4644      	mov	r4, r8
 8000aea:	3a20      	subs	r2, #32
 8000aec:	40d4      	lsrs	r4, r2
 8000aee:	4662      	mov	r2, ip
 8000af0:	2a20      	cmp	r2, #32
 8000af2:	d005      	beq.n	8000b00 <__aeabi_dadd+0x424>
 8000af4:	4667      	mov	r7, ip
 8000af6:	2240      	movs	r2, #64	; 0x40
 8000af8:	1bd2      	subs	r2, r2, r7
 8000afa:	4647      	mov	r7, r8
 8000afc:	4097      	lsls	r7, r2
 8000afe:	4339      	orrs	r1, r7
 8000b00:	1e4a      	subs	r2, r1, #1
 8000b02:	4191      	sbcs	r1, r2
 8000b04:	4321      	orrs	r1, r4
 8000b06:	e635      	b.n	8000774 <__aeabi_dadd+0x98>
 8000b08:	4303      	orrs	r3, r0
 8000b0a:	1e58      	subs	r0, r3, #1
 8000b0c:	4183      	sbcs	r3, r0
 8000b0e:	1acc      	subs	r4, r1, r3
 8000b10:	42a1      	cmp	r1, r4
 8000b12:	41bf      	sbcs	r7, r7
 8000b14:	4643      	mov	r3, r8
 8000b16:	427f      	negs	r7, r7
 8000b18:	4655      	mov	r5, sl
 8000b1a:	464e      	mov	r6, r9
 8000b1c:	1bdf      	subs	r7, r3, r7
 8000b1e:	e62e      	b.n	800077e <__aeabi_dadd+0xa2>
 8000b20:	0002      	movs	r2, r0
 8000b22:	431a      	orrs	r2, r3
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x44c>
 8000b26:	e0bd      	b.n	8000ca4 <__aeabi_dadd+0x5c8>
 8000b28:	4662      	mov	r2, ip
 8000b2a:	4664      	mov	r4, ip
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	2c01      	cmp	r4, #1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x458>
 8000b32:	e0e5      	b.n	8000d00 <__aeabi_dadd+0x624>
 8000b34:	4c85      	ldr	r4, [pc, #532]	; (8000d4c <__aeabi_dadd+0x670>)
 8000b36:	45a4      	cmp	ip, r4
 8000b38:	d058      	beq.n	8000bec <__aeabi_dadd+0x510>
 8000b3a:	4694      	mov	ip, r2
 8000b3c:	e749      	b.n	80009d2 <__aeabi_dadd+0x2f6>
 8000b3e:	4664      	mov	r4, ip
 8000b40:	2220      	movs	r2, #32
 8000b42:	1b12      	subs	r2, r2, r4
 8000b44:	4644      	mov	r4, r8
 8000b46:	4094      	lsls	r4, r2
 8000b48:	000f      	movs	r7, r1
 8000b4a:	46a1      	mov	r9, r4
 8000b4c:	4664      	mov	r4, ip
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	40e7      	lsrs	r7, r4
 8000b52:	464c      	mov	r4, r9
 8000b54:	1e4a      	subs	r2, r1, #1
 8000b56:	4191      	sbcs	r1, r2
 8000b58:	433c      	orrs	r4, r7
 8000b5a:	4642      	mov	r2, r8
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	4661      	mov	r1, ip
 8000b60:	40ca      	lsrs	r2, r1
 8000b62:	1880      	adds	r0, r0, r2
 8000b64:	e6f4      	b.n	8000950 <__aeabi_dadd+0x274>
 8000b66:	4c79      	ldr	r4, [pc, #484]	; (8000d4c <__aeabi_dadd+0x670>)
 8000b68:	42a2      	cmp	r2, r4
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dadd+0x492>
 8000b6c:	e6fd      	b.n	800096a <__aeabi_dadd+0x28e>
 8000b6e:	1859      	adds	r1, r3, r1
 8000b70:	4299      	cmp	r1, r3
 8000b72:	419b      	sbcs	r3, r3
 8000b74:	4440      	add	r0, r8
 8000b76:	425f      	negs	r7, r3
 8000b78:	19c7      	adds	r7, r0, r7
 8000b7a:	07fc      	lsls	r4, r7, #31
 8000b7c:	0849      	lsrs	r1, r1, #1
 8000b7e:	0016      	movs	r6, r2
 8000b80:	430c      	orrs	r4, r1
 8000b82:	087f      	lsrs	r7, r7, #1
 8000b84:	e6cf      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000b86:	1acc      	subs	r4, r1, r3
 8000b88:	42a1      	cmp	r1, r4
 8000b8a:	41bf      	sbcs	r7, r7
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	427f      	negs	r7, r7
 8000b90:	1a18      	subs	r0, r3, r0
 8000b92:	4655      	mov	r5, sl
 8000b94:	1bc7      	subs	r7, r0, r7
 8000b96:	e5f7      	b.n	8000788 <__aeabi_dadd+0xac>
 8000b98:	08c9      	lsrs	r1, r1, #3
 8000b9a:	077b      	lsls	r3, r7, #29
 8000b9c:	4655      	mov	r5, sl
 8000b9e:	430b      	orrs	r3, r1
 8000ba0:	08f8      	lsrs	r0, r7, #3
 8000ba2:	e6c8      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000ba4:	2c00      	cmp	r4, #0
 8000ba6:	d000      	beq.n	8000baa <__aeabi_dadd+0x4ce>
 8000ba8:	e081      	b.n	8000cae <__aeabi_dadd+0x5d2>
 8000baa:	4643      	mov	r3, r8
 8000bac:	430b      	orrs	r3, r1
 8000bae:	d115      	bne.n	8000bdc <__aeabi_dadd+0x500>
 8000bb0:	2080      	movs	r0, #128	; 0x80
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	0300      	lsls	r0, r0, #12
 8000bb6:	e6e3      	b.n	8000980 <__aeabi_dadd+0x2a4>
 8000bb8:	1a5c      	subs	r4, r3, r1
 8000bba:	42a3      	cmp	r3, r4
 8000bbc:	419b      	sbcs	r3, r3
 8000bbe:	1bc7      	subs	r7, r0, r7
 8000bc0:	425b      	negs	r3, r3
 8000bc2:	2601      	movs	r6, #1
 8000bc4:	1aff      	subs	r7, r7, r3
 8000bc6:	e5da      	b.n	800077e <__aeabi_dadd+0xa2>
 8000bc8:	0742      	lsls	r2, r0, #29
 8000bca:	08db      	lsrs	r3, r3, #3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	08c0      	lsrs	r0, r0, #3
 8000bd0:	e6d2      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bd2:	0742      	lsls	r2, r0, #29
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	08c0      	lsrs	r0, r0, #3
 8000bda:	e6ac      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000bdc:	4643      	mov	r3, r8
 8000bde:	4642      	mov	r2, r8
 8000be0:	08c9      	lsrs	r1, r1, #3
 8000be2:	075b      	lsls	r3, r3, #29
 8000be4:	4655      	mov	r5, sl
 8000be6:	430b      	orrs	r3, r1
 8000be8:	08d0      	lsrs	r0, r2, #3
 8000bea:	e6c5      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bec:	4643      	mov	r3, r8
 8000bee:	4642      	mov	r2, r8
 8000bf0:	075b      	lsls	r3, r3, #29
 8000bf2:	08c9      	lsrs	r1, r1, #3
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	08d0      	lsrs	r0, r2, #3
 8000bf8:	e6be      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bfa:	4303      	orrs	r3, r0
 8000bfc:	001c      	movs	r4, r3
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	e6fc      	b.n	80009fe <__aeabi_dadd+0x322>
 8000c04:	0002      	movs	r2, r0
 8000c06:	3c20      	subs	r4, #32
 8000c08:	40e2      	lsrs	r2, r4
 8000c0a:	0014      	movs	r4, r2
 8000c0c:	4662      	mov	r2, ip
 8000c0e:	2a20      	cmp	r2, #32
 8000c10:	d003      	beq.n	8000c1a <__aeabi_dadd+0x53e>
 8000c12:	2540      	movs	r5, #64	; 0x40
 8000c14:	1aad      	subs	r5, r5, r2
 8000c16:	40a8      	lsls	r0, r5
 8000c18:	4303      	orrs	r3, r0
 8000c1a:	1e58      	subs	r0, r3, #1
 8000c1c:	4183      	sbcs	r3, r0
 8000c1e:	4323      	orrs	r3, r4
 8000c20:	e775      	b.n	8000b0e <__aeabi_dadd+0x432>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d0e2      	beq.n	8000bec <__aeabi_dadd+0x510>
 8000c26:	003a      	movs	r2, r7
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	d0cd      	beq.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000c2c:	0742      	lsls	r2, r0, #29
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	08c0      	lsrs	r0, r0, #3
 8000c36:	0312      	lsls	r2, r2, #12
 8000c38:	4210      	tst	r0, r2
 8000c3a:	d006      	beq.n	8000c4a <__aeabi_dadd+0x56e>
 8000c3c:	08fc      	lsrs	r4, r7, #3
 8000c3e:	4214      	tst	r4, r2
 8000c40:	d103      	bne.n	8000c4a <__aeabi_dadd+0x56e>
 8000c42:	0020      	movs	r0, r4
 8000c44:	08cb      	lsrs	r3, r1, #3
 8000c46:	077a      	lsls	r2, r7, #29
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	0f5a      	lsrs	r2, r3, #29
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	0752      	lsls	r2, r2, #29
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	e690      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000c56:	4643      	mov	r3, r8
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x582>
 8000c5c:	e709      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	4642      	mov	r2, r8
 8000c62:	08c9      	lsrs	r1, r1, #3
 8000c64:	075b      	lsls	r3, r3, #29
 8000c66:	4655      	mov	r5, sl
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	08d0      	lsrs	r0, r2, #3
 8000c6c:	e666      	b.n	800093c <__aeabi_dadd+0x260>
 8000c6e:	1acc      	subs	r4, r1, r3
 8000c70:	42a1      	cmp	r1, r4
 8000c72:	4189      	sbcs	r1, r1
 8000c74:	1a3f      	subs	r7, r7, r0
 8000c76:	4249      	negs	r1, r1
 8000c78:	4655      	mov	r5, sl
 8000c7a:	2601      	movs	r6, #1
 8000c7c:	1a7f      	subs	r7, r7, r1
 8000c7e:	e57e      	b.n	800077e <__aeabi_dadd+0xa2>
 8000c80:	4642      	mov	r2, r8
 8000c82:	1a5c      	subs	r4, r3, r1
 8000c84:	1a87      	subs	r7, r0, r2
 8000c86:	42a3      	cmp	r3, r4
 8000c88:	4192      	sbcs	r2, r2
 8000c8a:	4252      	negs	r2, r2
 8000c8c:	1abf      	subs	r7, r7, r2
 8000c8e:	023a      	lsls	r2, r7, #8
 8000c90:	d53d      	bpl.n	8000d0e <__aeabi_dadd+0x632>
 8000c92:	1acc      	subs	r4, r1, r3
 8000c94:	42a1      	cmp	r1, r4
 8000c96:	4189      	sbcs	r1, r1
 8000c98:	4643      	mov	r3, r8
 8000c9a:	4249      	negs	r1, r1
 8000c9c:	1a1f      	subs	r7, r3, r0
 8000c9e:	4655      	mov	r5, sl
 8000ca0:	1a7f      	subs	r7, r7, r1
 8000ca2:	e595      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000ca4:	077b      	lsls	r3, r7, #29
 8000ca6:	08c9      	lsrs	r1, r1, #3
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	08f8      	lsrs	r0, r7, #3
 8000cac:	e643      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000cae:	4644      	mov	r4, r8
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	d130      	bne.n	8000d18 <__aeabi_dadd+0x63c>
 8000cb6:	0742      	lsls	r2, r0, #29
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	08c0      	lsrs	r0, r0, #3
 8000cbc:	e65c      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000cbe:	077b      	lsls	r3, r7, #29
 8000cc0:	08c9      	lsrs	r1, r1, #3
 8000cc2:	430b      	orrs	r3, r1
 8000cc4:	08f8      	lsrs	r0, r7, #3
 8000cc6:	e639      	b.n	800093c <__aeabi_dadd+0x260>
 8000cc8:	185c      	adds	r4, r3, r1
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	419b      	sbcs	r3, r3
 8000cce:	4440      	add	r0, r8
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	18c7      	adds	r7, r0, r3
 8000cd4:	023b      	lsls	r3, r7, #8
 8000cd6:	d400      	bmi.n	8000cda <__aeabi_dadd+0x5fe>
 8000cd8:	e625      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <__aeabi_dadd+0x674>)
 8000cdc:	2601      	movs	r6, #1
 8000cde:	401f      	ands	r7, r3
 8000ce0:	e621      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ce2:	0004      	movs	r4, r0
 8000ce4:	3a20      	subs	r2, #32
 8000ce6:	40d4      	lsrs	r4, r2
 8000ce8:	4662      	mov	r2, ip
 8000cea:	2a20      	cmp	r2, #32
 8000cec:	d004      	beq.n	8000cf8 <__aeabi_dadd+0x61c>
 8000cee:	2240      	movs	r2, #64	; 0x40
 8000cf0:	4666      	mov	r6, ip
 8000cf2:	1b92      	subs	r2, r2, r6
 8000cf4:	4090      	lsls	r0, r2
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	1e5a      	subs	r2, r3, #1
 8000cfa:	4193      	sbcs	r3, r2
 8000cfc:	431c      	orrs	r4, r3
 8000cfe:	e67e      	b.n	80009fe <__aeabi_dadd+0x322>
 8000d00:	185c      	adds	r4, r3, r1
 8000d02:	428c      	cmp	r4, r1
 8000d04:	4189      	sbcs	r1, r1
 8000d06:	4440      	add	r0, r8
 8000d08:	4249      	negs	r1, r1
 8000d0a:	1847      	adds	r7, r0, r1
 8000d0c:	e6dd      	b.n	8000aca <__aeabi_dadd+0x3ee>
 8000d0e:	0023      	movs	r3, r4
 8000d10:	433b      	orrs	r3, r7
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dadd+0x63a>
 8000d14:	e6ad      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000d16:	e606      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000d18:	0744      	lsls	r4, r0, #29
 8000d1a:	4323      	orrs	r3, r4
 8000d1c:	2480      	movs	r4, #128	; 0x80
 8000d1e:	08c0      	lsrs	r0, r0, #3
 8000d20:	0324      	lsls	r4, r4, #12
 8000d22:	4220      	tst	r0, r4
 8000d24:	d008      	beq.n	8000d38 <__aeabi_dadd+0x65c>
 8000d26:	4642      	mov	r2, r8
 8000d28:	08d6      	lsrs	r6, r2, #3
 8000d2a:	4226      	tst	r6, r4
 8000d2c:	d104      	bne.n	8000d38 <__aeabi_dadd+0x65c>
 8000d2e:	4655      	mov	r5, sl
 8000d30:	0030      	movs	r0, r6
 8000d32:	08cb      	lsrs	r3, r1, #3
 8000d34:	0751      	lsls	r1, r2, #29
 8000d36:	430b      	orrs	r3, r1
 8000d38:	0f5a      	lsrs	r2, r3, #29
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	08db      	lsrs	r3, r3, #3
 8000d3e:	0752      	lsls	r2, r2, #29
 8000d40:	4313      	orrs	r3, r2
 8000d42:	e619      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000d44:	2300      	movs	r3, #0
 8000d46:	4a01      	ldr	r2, [pc, #4]	; (8000d4c <__aeabi_dadd+0x670>)
 8000d48:	001f      	movs	r7, r3
 8000d4a:	e55e      	b.n	800080a <__aeabi_dadd+0x12e>
 8000d4c:	000007ff 	.word	0x000007ff
 8000d50:	ff7fffff 	.word	0xff7fffff

08000d54 <__aeabi_ddiv>:
 8000d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d56:	4657      	mov	r7, sl
 8000d58:	464e      	mov	r6, r9
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	46de      	mov	lr, fp
 8000d5e:	b5e0      	push	{r5, r6, r7, lr}
 8000d60:	4681      	mov	r9, r0
 8000d62:	0005      	movs	r5, r0
 8000d64:	030c      	lsls	r4, r1, #12
 8000d66:	0048      	lsls	r0, r1, #1
 8000d68:	4692      	mov	sl, r2
 8000d6a:	001f      	movs	r7, r3
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	0b24      	lsrs	r4, r4, #12
 8000d70:	0d40      	lsrs	r0, r0, #21
 8000d72:	0fce      	lsrs	r6, r1, #31
 8000d74:	2800      	cmp	r0, #0
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x26>
 8000d78:	e156      	b.n	8001028 <__aeabi_ddiv+0x2d4>
 8000d7a:	4bd4      	ldr	r3, [pc, #848]	; (80010cc <__aeabi_ddiv+0x378>)
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_ddiv+0x2e>
 8000d80:	e172      	b.n	8001068 <__aeabi_ddiv+0x314>
 8000d82:	0f6b      	lsrs	r3, r5, #29
 8000d84:	00e4      	lsls	r4, r4, #3
 8000d86:	431c      	orrs	r4, r3
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	041b      	lsls	r3, r3, #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	4698      	mov	r8, r3
 8000d90:	4bcf      	ldr	r3, [pc, #828]	; (80010d0 <__aeabi_ddiv+0x37c>)
 8000d92:	00ed      	lsls	r5, r5, #3
 8000d94:	469b      	mov	fp, r3
 8000d96:	2300      	movs	r3, #0
 8000d98:	4699      	mov	r9, r3
 8000d9a:	4483      	add	fp, r0
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	033c      	lsls	r4, r7, #12
 8000da0:	007b      	lsls	r3, r7, #1
 8000da2:	4650      	mov	r0, sl
 8000da4:	0b24      	lsrs	r4, r4, #12
 8000da6:	0d5b      	lsrs	r3, r3, #21
 8000da8:	0fff      	lsrs	r7, r7, #31
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_ddiv+0x5c>
 8000dae:	e11f      	b.n	8000ff0 <__aeabi_ddiv+0x29c>
 8000db0:	4ac6      	ldr	r2, [pc, #792]	; (80010cc <__aeabi_ddiv+0x378>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x64>
 8000db6:	e162      	b.n	800107e <__aeabi_ddiv+0x32a>
 8000db8:	49c5      	ldr	r1, [pc, #788]	; (80010d0 <__aeabi_ddiv+0x37c>)
 8000dba:	0f42      	lsrs	r2, r0, #29
 8000dbc:	468c      	mov	ip, r1
 8000dbe:	00e4      	lsls	r4, r4, #3
 8000dc0:	4659      	mov	r1, fp
 8000dc2:	4314      	orrs	r4, r2
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	4463      	add	r3, ip
 8000dc8:	0412      	lsls	r2, r2, #16
 8000dca:	1acb      	subs	r3, r1, r3
 8000dcc:	4314      	orrs	r4, r2
 8000dce:	469b      	mov	fp, r3
 8000dd0:	00c2      	lsls	r2, r0, #3
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	0033      	movs	r3, r6
 8000dd6:	407b      	eors	r3, r7
 8000dd8:	469a      	mov	sl, r3
 8000dda:	464b      	mov	r3, r9
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d827      	bhi.n	8000e30 <__aeabi_ddiv+0xdc>
 8000de0:	49bc      	ldr	r1, [pc, #752]	; (80010d4 <__aeabi_ddiv+0x380>)
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	58cb      	ldr	r3, [r1, r3]
 8000de6:	469f      	mov	pc, r3
 8000de8:	46b2      	mov	sl, r6
 8000dea:	9b00      	ldr	r3, [sp, #0]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d016      	beq.n	8000e1e <__aeabi_ddiv+0xca>
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d100      	bne.n	8000df6 <__aeabi_ddiv+0xa2>
 8000df4:	e28e      	b.n	8001314 <__aeabi_ddiv+0x5c0>
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d000      	beq.n	8000dfc <__aeabi_ddiv+0xa8>
 8000dfa:	e0d9      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	2400      	movs	r4, #0
 8000e00:	2500      	movs	r5, #0
 8000e02:	4652      	mov	r2, sl
 8000e04:	051b      	lsls	r3, r3, #20
 8000e06:	4323      	orrs	r3, r4
 8000e08:	07d2      	lsls	r2, r2, #31
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	0028      	movs	r0, r5
 8000e0e:	0019      	movs	r1, r3
 8000e10:	b005      	add	sp, #20
 8000e12:	bcf0      	pop	{r4, r5, r6, r7}
 8000e14:	46bb      	mov	fp, r7
 8000e16:	46b2      	mov	sl, r6
 8000e18:	46a9      	mov	r9, r5
 8000e1a:	46a0      	mov	r8, r4
 8000e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e1e:	2400      	movs	r4, #0
 8000e20:	2500      	movs	r5, #0
 8000e22:	4baa      	ldr	r3, [pc, #680]	; (80010cc <__aeabi_ddiv+0x378>)
 8000e24:	e7ed      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8000e26:	46ba      	mov	sl, r7
 8000e28:	46a0      	mov	r8, r4
 8000e2a:	0015      	movs	r5, r2
 8000e2c:	9000      	str	r0, [sp, #0]
 8000e2e:	e7dc      	b.n	8000dea <__aeabi_ddiv+0x96>
 8000e30:	4544      	cmp	r4, r8
 8000e32:	d200      	bcs.n	8000e36 <__aeabi_ddiv+0xe2>
 8000e34:	e1c7      	b.n	80011c6 <__aeabi_ddiv+0x472>
 8000e36:	d100      	bne.n	8000e3a <__aeabi_ddiv+0xe6>
 8000e38:	e1c2      	b.n	80011c0 <__aeabi_ddiv+0x46c>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	425b      	negs	r3, r3
 8000e3e:	469c      	mov	ip, r3
 8000e40:	002e      	movs	r6, r5
 8000e42:	4640      	mov	r0, r8
 8000e44:	2500      	movs	r5, #0
 8000e46:	44e3      	add	fp, ip
 8000e48:	0223      	lsls	r3, r4, #8
 8000e4a:	0e14      	lsrs	r4, r2, #24
 8000e4c:	431c      	orrs	r4, r3
 8000e4e:	0c1b      	lsrs	r3, r3, #16
 8000e50:	4699      	mov	r9, r3
 8000e52:	0423      	lsls	r3, r4, #16
 8000e54:	0c1f      	lsrs	r7, r3, #16
 8000e56:	0212      	lsls	r2, r2, #8
 8000e58:	4649      	mov	r1, r9
 8000e5a:	9200      	str	r2, [sp, #0]
 8000e5c:	9701      	str	r7, [sp, #4]
 8000e5e:	f7ff f9f5 	bl	800024c <__aeabi_uidivmod>
 8000e62:	0002      	movs	r2, r0
 8000e64:	437a      	muls	r2, r7
 8000e66:	040b      	lsls	r3, r1, #16
 8000e68:	0c31      	lsrs	r1, r6, #16
 8000e6a:	4680      	mov	r8, r0
 8000e6c:	4319      	orrs	r1, r3
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d907      	bls.n	8000e82 <__aeabi_ddiv+0x12e>
 8000e72:	2301      	movs	r3, #1
 8000e74:	425b      	negs	r3, r3
 8000e76:	469c      	mov	ip, r3
 8000e78:	1909      	adds	r1, r1, r4
 8000e7a:	44e0      	add	r8, ip
 8000e7c:	428c      	cmp	r4, r1
 8000e7e:	d800      	bhi.n	8000e82 <__aeabi_ddiv+0x12e>
 8000e80:	e207      	b.n	8001292 <__aeabi_ddiv+0x53e>
 8000e82:	1a88      	subs	r0, r1, r2
 8000e84:	4649      	mov	r1, r9
 8000e86:	f7ff f9e1 	bl	800024c <__aeabi_uidivmod>
 8000e8a:	0409      	lsls	r1, r1, #16
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	0431      	lsls	r1, r6, #16
 8000e90:	4666      	mov	r6, ip
 8000e92:	9a01      	ldr	r2, [sp, #4]
 8000e94:	0c09      	lsrs	r1, r1, #16
 8000e96:	4342      	muls	r2, r0
 8000e98:	0003      	movs	r3, r0
 8000e9a:	4331      	orrs	r1, r6
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d904      	bls.n	8000eaa <__aeabi_ddiv+0x156>
 8000ea0:	1909      	adds	r1, r1, r4
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	428c      	cmp	r4, r1
 8000ea6:	d800      	bhi.n	8000eaa <__aeabi_ddiv+0x156>
 8000ea8:	e1ed      	b.n	8001286 <__aeabi_ddiv+0x532>
 8000eaa:	1a88      	subs	r0, r1, r2
 8000eac:	4642      	mov	r2, r8
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4641      	mov	r1, r8
 8000eb6:	9b00      	ldr	r3, [sp, #0]
 8000eb8:	040e      	lsls	r6, r1, #16
 8000eba:	0c1b      	lsrs	r3, r3, #16
 8000ebc:	001f      	movs	r7, r3
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	9b00      	ldr	r3, [sp, #0]
 8000ec2:	0c36      	lsrs	r6, r6, #16
 8000ec4:	041b      	lsls	r3, r3, #16
 8000ec6:	0c19      	lsrs	r1, r3, #16
 8000ec8:	000b      	movs	r3, r1
 8000eca:	4373      	muls	r3, r6
 8000ecc:	0c12      	lsrs	r2, r2, #16
 8000ece:	437e      	muls	r6, r7
 8000ed0:	9103      	str	r1, [sp, #12]
 8000ed2:	4351      	muls	r1, r2
 8000ed4:	437a      	muls	r2, r7
 8000ed6:	0c1f      	lsrs	r7, r3, #16
 8000ed8:	46bc      	mov	ip, r7
 8000eda:	1876      	adds	r6, r6, r1
 8000edc:	4466      	add	r6, ip
 8000ede:	42b1      	cmp	r1, r6
 8000ee0:	d903      	bls.n	8000eea <__aeabi_ddiv+0x196>
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	0249      	lsls	r1, r1, #9
 8000ee6:	468c      	mov	ip, r1
 8000ee8:	4462      	add	r2, ip
 8000eea:	0c31      	lsrs	r1, r6, #16
 8000eec:	188a      	adds	r2, r1, r2
 8000eee:	0431      	lsls	r1, r6, #16
 8000ef0:	041e      	lsls	r6, r3, #16
 8000ef2:	0c36      	lsrs	r6, r6, #16
 8000ef4:	198e      	adds	r6, r1, r6
 8000ef6:	4290      	cmp	r0, r2
 8000ef8:	d302      	bcc.n	8000f00 <__aeabi_ddiv+0x1ac>
 8000efa:	d112      	bne.n	8000f22 <__aeabi_ddiv+0x1ce>
 8000efc:	42b5      	cmp	r5, r6
 8000efe:	d210      	bcs.n	8000f22 <__aeabi_ddiv+0x1ce>
 8000f00:	4643      	mov	r3, r8
 8000f02:	1e59      	subs	r1, r3, #1
 8000f04:	9b00      	ldr	r3, [sp, #0]
 8000f06:	469c      	mov	ip, r3
 8000f08:	4465      	add	r5, ip
 8000f0a:	001f      	movs	r7, r3
 8000f0c:	429d      	cmp	r5, r3
 8000f0e:	419b      	sbcs	r3, r3
 8000f10:	425b      	negs	r3, r3
 8000f12:	191b      	adds	r3, r3, r4
 8000f14:	18c0      	adds	r0, r0, r3
 8000f16:	4284      	cmp	r4, r0
 8000f18:	d200      	bcs.n	8000f1c <__aeabi_ddiv+0x1c8>
 8000f1a:	e1a0      	b.n	800125e <__aeabi_ddiv+0x50a>
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_ddiv+0x1cc>
 8000f1e:	e19b      	b.n	8001258 <__aeabi_ddiv+0x504>
 8000f20:	4688      	mov	r8, r1
 8000f22:	1bae      	subs	r6, r5, r6
 8000f24:	42b5      	cmp	r5, r6
 8000f26:	41ad      	sbcs	r5, r5
 8000f28:	1a80      	subs	r0, r0, r2
 8000f2a:	426d      	negs	r5, r5
 8000f2c:	1b40      	subs	r0, r0, r5
 8000f2e:	4284      	cmp	r4, r0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_ddiv+0x1e0>
 8000f32:	e1d5      	b.n	80012e0 <__aeabi_ddiv+0x58c>
 8000f34:	4649      	mov	r1, r9
 8000f36:	f7ff f989 	bl	800024c <__aeabi_uidivmod>
 8000f3a:	9a01      	ldr	r2, [sp, #4]
 8000f3c:	040b      	lsls	r3, r1, #16
 8000f3e:	4342      	muls	r2, r0
 8000f40:	0c31      	lsrs	r1, r6, #16
 8000f42:	0005      	movs	r5, r0
 8000f44:	4319      	orrs	r1, r3
 8000f46:	428a      	cmp	r2, r1
 8000f48:	d900      	bls.n	8000f4c <__aeabi_ddiv+0x1f8>
 8000f4a:	e16c      	b.n	8001226 <__aeabi_ddiv+0x4d2>
 8000f4c:	1a88      	subs	r0, r1, r2
 8000f4e:	4649      	mov	r1, r9
 8000f50:	f7ff f97c 	bl	800024c <__aeabi_uidivmod>
 8000f54:	9a01      	ldr	r2, [sp, #4]
 8000f56:	0436      	lsls	r6, r6, #16
 8000f58:	4342      	muls	r2, r0
 8000f5a:	0409      	lsls	r1, r1, #16
 8000f5c:	0c36      	lsrs	r6, r6, #16
 8000f5e:	0003      	movs	r3, r0
 8000f60:	430e      	orrs	r6, r1
 8000f62:	42b2      	cmp	r2, r6
 8000f64:	d900      	bls.n	8000f68 <__aeabi_ddiv+0x214>
 8000f66:	e153      	b.n	8001210 <__aeabi_ddiv+0x4bc>
 8000f68:	9803      	ldr	r0, [sp, #12]
 8000f6a:	1ab6      	subs	r6, r6, r2
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	042d      	lsls	r5, r5, #16
 8000f70:	431d      	orrs	r5, r3
 8000f72:	9f02      	ldr	r7, [sp, #8]
 8000f74:	042b      	lsls	r3, r5, #16
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	435a      	muls	r2, r3
 8000f7a:	437b      	muls	r3, r7
 8000f7c:	469c      	mov	ip, r3
 8000f7e:	0c29      	lsrs	r1, r5, #16
 8000f80:	4348      	muls	r0, r1
 8000f82:	0c13      	lsrs	r3, r2, #16
 8000f84:	4484      	add	ip, r0
 8000f86:	4463      	add	r3, ip
 8000f88:	4379      	muls	r1, r7
 8000f8a:	4298      	cmp	r0, r3
 8000f8c:	d903      	bls.n	8000f96 <__aeabi_ddiv+0x242>
 8000f8e:	2080      	movs	r0, #128	; 0x80
 8000f90:	0240      	lsls	r0, r0, #9
 8000f92:	4684      	mov	ip, r0
 8000f94:	4461      	add	r1, ip
 8000f96:	0c18      	lsrs	r0, r3, #16
 8000f98:	0412      	lsls	r2, r2, #16
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	0c12      	lsrs	r2, r2, #16
 8000f9e:	1841      	adds	r1, r0, r1
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	428e      	cmp	r6, r1
 8000fa4:	d200      	bcs.n	8000fa8 <__aeabi_ddiv+0x254>
 8000fa6:	e0ff      	b.n	80011a8 <__aeabi_ddiv+0x454>
 8000fa8:	d100      	bne.n	8000fac <__aeabi_ddiv+0x258>
 8000faa:	e0fa      	b.n	80011a2 <__aeabi_ddiv+0x44e>
 8000fac:	2301      	movs	r3, #1
 8000fae:	431d      	orrs	r5, r3
 8000fb0:	4a49      	ldr	r2, [pc, #292]	; (80010d8 <__aeabi_ddiv+0x384>)
 8000fb2:	445a      	add	r2, fp
 8000fb4:	2a00      	cmp	r2, #0
 8000fb6:	dc00      	bgt.n	8000fba <__aeabi_ddiv+0x266>
 8000fb8:	e0aa      	b.n	8001110 <__aeabi_ddiv+0x3bc>
 8000fba:	076b      	lsls	r3, r5, #29
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_ddiv+0x26c>
 8000fbe:	e13d      	b.n	800123c <__aeabi_ddiv+0x4e8>
 8000fc0:	08ed      	lsrs	r5, r5, #3
 8000fc2:	4643      	mov	r3, r8
 8000fc4:	01db      	lsls	r3, r3, #7
 8000fc6:	d506      	bpl.n	8000fd6 <__aeabi_ddiv+0x282>
 8000fc8:	4642      	mov	r2, r8
 8000fca:	4b44      	ldr	r3, [pc, #272]	; (80010dc <__aeabi_ddiv+0x388>)
 8000fcc:	401a      	ands	r2, r3
 8000fce:	4690      	mov	r8, r2
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	00d2      	lsls	r2, r2, #3
 8000fd4:	445a      	add	r2, fp
 8000fd6:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <__aeabi_ddiv+0x38c>)
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dd00      	ble.n	8000fde <__aeabi_ddiv+0x28a>
 8000fdc:	e71f      	b.n	8000e1e <__aeabi_ddiv+0xca>
 8000fde:	4643      	mov	r3, r8
 8000fe0:	075b      	lsls	r3, r3, #29
 8000fe2:	431d      	orrs	r5, r3
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	0552      	lsls	r2, r2, #21
 8000fe8:	025c      	lsls	r4, r3, #9
 8000fea:	0b24      	lsrs	r4, r4, #12
 8000fec:	0d53      	lsrs	r3, r2, #21
 8000fee:	e708      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8000ff0:	4652      	mov	r2, sl
 8000ff2:	4322      	orrs	r2, r4
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_ddiv+0x2a4>
 8000ff6:	e07b      	b.n	80010f0 <__aeabi_ddiv+0x39c>
 8000ff8:	2c00      	cmp	r4, #0
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x2aa>
 8000ffc:	e0fa      	b.n	80011f4 <__aeabi_ddiv+0x4a0>
 8000ffe:	0020      	movs	r0, r4
 8001000:	f001 fa22 	bl	8002448 <__clzsi2>
 8001004:	0002      	movs	r2, r0
 8001006:	3a0b      	subs	r2, #11
 8001008:	231d      	movs	r3, #29
 800100a:	0001      	movs	r1, r0
 800100c:	1a9b      	subs	r3, r3, r2
 800100e:	4652      	mov	r2, sl
 8001010:	3908      	subs	r1, #8
 8001012:	40da      	lsrs	r2, r3
 8001014:	408c      	lsls	r4, r1
 8001016:	4314      	orrs	r4, r2
 8001018:	4652      	mov	r2, sl
 800101a:	408a      	lsls	r2, r1
 800101c:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <__aeabi_ddiv+0x390>)
 800101e:	4458      	add	r0, fp
 8001020:	469b      	mov	fp, r3
 8001022:	4483      	add	fp, r0
 8001024:	2000      	movs	r0, #0
 8001026:	e6d5      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 8001028:	464b      	mov	r3, r9
 800102a:	4323      	orrs	r3, r4
 800102c:	4698      	mov	r8, r3
 800102e:	d044      	beq.n	80010ba <__aeabi_ddiv+0x366>
 8001030:	2c00      	cmp	r4, #0
 8001032:	d100      	bne.n	8001036 <__aeabi_ddiv+0x2e2>
 8001034:	e0ce      	b.n	80011d4 <__aeabi_ddiv+0x480>
 8001036:	0020      	movs	r0, r4
 8001038:	f001 fa06 	bl	8002448 <__clzsi2>
 800103c:	0001      	movs	r1, r0
 800103e:	0002      	movs	r2, r0
 8001040:	390b      	subs	r1, #11
 8001042:	231d      	movs	r3, #29
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	4649      	mov	r1, r9
 8001048:	0010      	movs	r0, r2
 800104a:	40d9      	lsrs	r1, r3
 800104c:	3808      	subs	r0, #8
 800104e:	4084      	lsls	r4, r0
 8001050:	000b      	movs	r3, r1
 8001052:	464d      	mov	r5, r9
 8001054:	4323      	orrs	r3, r4
 8001056:	4698      	mov	r8, r3
 8001058:	4085      	lsls	r5, r0
 800105a:	4823      	ldr	r0, [pc, #140]	; (80010e8 <__aeabi_ddiv+0x394>)
 800105c:	1a83      	subs	r3, r0, r2
 800105e:	469b      	mov	fp, r3
 8001060:	2300      	movs	r3, #0
 8001062:	4699      	mov	r9, r3
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	e69a      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 8001068:	464b      	mov	r3, r9
 800106a:	4323      	orrs	r3, r4
 800106c:	4698      	mov	r8, r3
 800106e:	d11d      	bne.n	80010ac <__aeabi_ddiv+0x358>
 8001070:	2308      	movs	r3, #8
 8001072:	4699      	mov	r9, r3
 8001074:	3b06      	subs	r3, #6
 8001076:	2500      	movs	r5, #0
 8001078:	4683      	mov	fp, r0
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	e68f      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 800107e:	4652      	mov	r2, sl
 8001080:	4322      	orrs	r2, r4
 8001082:	d109      	bne.n	8001098 <__aeabi_ddiv+0x344>
 8001084:	2302      	movs	r3, #2
 8001086:	4649      	mov	r1, r9
 8001088:	4319      	orrs	r1, r3
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <__aeabi_ddiv+0x398>)
 800108c:	4689      	mov	r9, r1
 800108e:	469c      	mov	ip, r3
 8001090:	2400      	movs	r4, #0
 8001092:	2002      	movs	r0, #2
 8001094:	44e3      	add	fp, ip
 8001096:	e69d      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 8001098:	2303      	movs	r3, #3
 800109a:	464a      	mov	r2, r9
 800109c:	431a      	orrs	r2, r3
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <__aeabi_ddiv+0x398>)
 80010a0:	4691      	mov	r9, r2
 80010a2:	469c      	mov	ip, r3
 80010a4:	4652      	mov	r2, sl
 80010a6:	2003      	movs	r0, #3
 80010a8:	44e3      	add	fp, ip
 80010aa:	e693      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 80010ac:	230c      	movs	r3, #12
 80010ae:	4699      	mov	r9, r3
 80010b0:	3b09      	subs	r3, #9
 80010b2:	46a0      	mov	r8, r4
 80010b4:	4683      	mov	fp, r0
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	e671      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 80010ba:	2304      	movs	r3, #4
 80010bc:	4699      	mov	r9, r3
 80010be:	2300      	movs	r3, #0
 80010c0:	469b      	mov	fp, r3
 80010c2:	3301      	adds	r3, #1
 80010c4:	2500      	movs	r5, #0
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	e669      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	000007ff 	.word	0x000007ff
 80010d0:	fffffc01 	.word	0xfffffc01
 80010d4:	08008888 	.word	0x08008888
 80010d8:	000003ff 	.word	0x000003ff
 80010dc:	feffffff 	.word	0xfeffffff
 80010e0:	000007fe 	.word	0x000007fe
 80010e4:	000003f3 	.word	0x000003f3
 80010e8:	fffffc0d 	.word	0xfffffc0d
 80010ec:	fffff801 	.word	0xfffff801
 80010f0:	4649      	mov	r1, r9
 80010f2:	2301      	movs	r3, #1
 80010f4:	4319      	orrs	r1, r3
 80010f6:	4689      	mov	r9, r1
 80010f8:	2400      	movs	r4, #0
 80010fa:	2001      	movs	r0, #1
 80010fc:	e66a      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 80010fe:	2300      	movs	r3, #0
 8001100:	2480      	movs	r4, #128	; 0x80
 8001102:	469a      	mov	sl, r3
 8001104:	2500      	movs	r5, #0
 8001106:	4b8a      	ldr	r3, [pc, #552]	; (8001330 <__aeabi_ddiv+0x5dc>)
 8001108:	0324      	lsls	r4, r4, #12
 800110a:	e67a      	b.n	8000e02 <__aeabi_ddiv+0xae>
 800110c:	2501      	movs	r5, #1
 800110e:	426d      	negs	r5, r5
 8001110:	2301      	movs	r3, #1
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	2b38      	cmp	r3, #56	; 0x38
 8001116:	dd00      	ble.n	800111a <__aeabi_ddiv+0x3c6>
 8001118:	e670      	b.n	8000dfc <__aeabi_ddiv+0xa8>
 800111a:	2b1f      	cmp	r3, #31
 800111c:	dc00      	bgt.n	8001120 <__aeabi_ddiv+0x3cc>
 800111e:	e0bf      	b.n	80012a0 <__aeabi_ddiv+0x54c>
 8001120:	211f      	movs	r1, #31
 8001122:	4249      	negs	r1, r1
 8001124:	1a8a      	subs	r2, r1, r2
 8001126:	4641      	mov	r1, r8
 8001128:	40d1      	lsrs	r1, r2
 800112a:	000a      	movs	r2, r1
 800112c:	2b20      	cmp	r3, #32
 800112e:	d004      	beq.n	800113a <__aeabi_ddiv+0x3e6>
 8001130:	4641      	mov	r1, r8
 8001132:	4b80      	ldr	r3, [pc, #512]	; (8001334 <__aeabi_ddiv+0x5e0>)
 8001134:	445b      	add	r3, fp
 8001136:	4099      	lsls	r1, r3
 8001138:	430d      	orrs	r5, r1
 800113a:	1e6b      	subs	r3, r5, #1
 800113c:	419d      	sbcs	r5, r3
 800113e:	2307      	movs	r3, #7
 8001140:	432a      	orrs	r2, r5
 8001142:	001d      	movs	r5, r3
 8001144:	2400      	movs	r4, #0
 8001146:	4015      	ands	r5, r2
 8001148:	4213      	tst	r3, r2
 800114a:	d100      	bne.n	800114e <__aeabi_ddiv+0x3fa>
 800114c:	e0d4      	b.n	80012f8 <__aeabi_ddiv+0x5a4>
 800114e:	210f      	movs	r1, #15
 8001150:	2300      	movs	r3, #0
 8001152:	4011      	ands	r1, r2
 8001154:	2904      	cmp	r1, #4
 8001156:	d100      	bne.n	800115a <__aeabi_ddiv+0x406>
 8001158:	e0cb      	b.n	80012f2 <__aeabi_ddiv+0x59e>
 800115a:	1d11      	adds	r1, r2, #4
 800115c:	4291      	cmp	r1, r2
 800115e:	4192      	sbcs	r2, r2
 8001160:	4252      	negs	r2, r2
 8001162:	189b      	adds	r3, r3, r2
 8001164:	000a      	movs	r2, r1
 8001166:	0219      	lsls	r1, r3, #8
 8001168:	d400      	bmi.n	800116c <__aeabi_ddiv+0x418>
 800116a:	e0c2      	b.n	80012f2 <__aeabi_ddiv+0x59e>
 800116c:	2301      	movs	r3, #1
 800116e:	2400      	movs	r4, #0
 8001170:	2500      	movs	r5, #0
 8001172:	e646      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	4641      	mov	r1, r8
 8001178:	031b      	lsls	r3, r3, #12
 800117a:	4219      	tst	r1, r3
 800117c:	d008      	beq.n	8001190 <__aeabi_ddiv+0x43c>
 800117e:	421c      	tst	r4, r3
 8001180:	d106      	bne.n	8001190 <__aeabi_ddiv+0x43c>
 8001182:	431c      	orrs	r4, r3
 8001184:	0324      	lsls	r4, r4, #12
 8001186:	46ba      	mov	sl, r7
 8001188:	0015      	movs	r5, r2
 800118a:	4b69      	ldr	r3, [pc, #420]	; (8001330 <__aeabi_ddiv+0x5dc>)
 800118c:	0b24      	lsrs	r4, r4, #12
 800118e:	e638      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001190:	2480      	movs	r4, #128	; 0x80
 8001192:	4643      	mov	r3, r8
 8001194:	0324      	lsls	r4, r4, #12
 8001196:	431c      	orrs	r4, r3
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	46b2      	mov	sl, r6
 800119c:	4b64      	ldr	r3, [pc, #400]	; (8001330 <__aeabi_ddiv+0x5dc>)
 800119e:	0b24      	lsrs	r4, r4, #12
 80011a0:	e62f      	b.n	8000e02 <__aeabi_ddiv+0xae>
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d100      	bne.n	80011a8 <__aeabi_ddiv+0x454>
 80011a6:	e703      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 80011a8:	19a6      	adds	r6, r4, r6
 80011aa:	1e68      	subs	r0, r5, #1
 80011ac:	42a6      	cmp	r6, r4
 80011ae:	d200      	bcs.n	80011b2 <__aeabi_ddiv+0x45e>
 80011b0:	e08d      	b.n	80012ce <__aeabi_ddiv+0x57a>
 80011b2:	428e      	cmp	r6, r1
 80011b4:	d200      	bcs.n	80011b8 <__aeabi_ddiv+0x464>
 80011b6:	e0a3      	b.n	8001300 <__aeabi_ddiv+0x5ac>
 80011b8:	d100      	bne.n	80011bc <__aeabi_ddiv+0x468>
 80011ba:	e0b3      	b.n	8001324 <__aeabi_ddiv+0x5d0>
 80011bc:	0005      	movs	r5, r0
 80011be:	e6f5      	b.n	8000fac <__aeabi_ddiv+0x258>
 80011c0:	42aa      	cmp	r2, r5
 80011c2:	d900      	bls.n	80011c6 <__aeabi_ddiv+0x472>
 80011c4:	e639      	b.n	8000e3a <__aeabi_ddiv+0xe6>
 80011c6:	4643      	mov	r3, r8
 80011c8:	07de      	lsls	r6, r3, #31
 80011ca:	0858      	lsrs	r0, r3, #1
 80011cc:	086b      	lsrs	r3, r5, #1
 80011ce:	431e      	orrs	r6, r3
 80011d0:	07ed      	lsls	r5, r5, #31
 80011d2:	e639      	b.n	8000e48 <__aeabi_ddiv+0xf4>
 80011d4:	4648      	mov	r0, r9
 80011d6:	f001 f937 	bl	8002448 <__clzsi2>
 80011da:	0001      	movs	r1, r0
 80011dc:	0002      	movs	r2, r0
 80011de:	3115      	adds	r1, #21
 80011e0:	3220      	adds	r2, #32
 80011e2:	291c      	cmp	r1, #28
 80011e4:	dc00      	bgt.n	80011e8 <__aeabi_ddiv+0x494>
 80011e6:	e72c      	b.n	8001042 <__aeabi_ddiv+0x2ee>
 80011e8:	464b      	mov	r3, r9
 80011ea:	3808      	subs	r0, #8
 80011ec:	4083      	lsls	r3, r0
 80011ee:	2500      	movs	r5, #0
 80011f0:	4698      	mov	r8, r3
 80011f2:	e732      	b.n	800105a <__aeabi_ddiv+0x306>
 80011f4:	f001 f928 	bl	8002448 <__clzsi2>
 80011f8:	0003      	movs	r3, r0
 80011fa:	001a      	movs	r2, r3
 80011fc:	3215      	adds	r2, #21
 80011fe:	3020      	adds	r0, #32
 8001200:	2a1c      	cmp	r2, #28
 8001202:	dc00      	bgt.n	8001206 <__aeabi_ddiv+0x4b2>
 8001204:	e700      	b.n	8001008 <__aeabi_ddiv+0x2b4>
 8001206:	4654      	mov	r4, sl
 8001208:	3b08      	subs	r3, #8
 800120a:	2200      	movs	r2, #0
 800120c:	409c      	lsls	r4, r3
 800120e:	e705      	b.n	800101c <__aeabi_ddiv+0x2c8>
 8001210:	1936      	adds	r6, r6, r4
 8001212:	3b01      	subs	r3, #1
 8001214:	42b4      	cmp	r4, r6
 8001216:	d900      	bls.n	800121a <__aeabi_ddiv+0x4c6>
 8001218:	e6a6      	b.n	8000f68 <__aeabi_ddiv+0x214>
 800121a:	42b2      	cmp	r2, r6
 800121c:	d800      	bhi.n	8001220 <__aeabi_ddiv+0x4cc>
 800121e:	e6a3      	b.n	8000f68 <__aeabi_ddiv+0x214>
 8001220:	1e83      	subs	r3, r0, #2
 8001222:	1936      	adds	r6, r6, r4
 8001224:	e6a0      	b.n	8000f68 <__aeabi_ddiv+0x214>
 8001226:	1909      	adds	r1, r1, r4
 8001228:	3d01      	subs	r5, #1
 800122a:	428c      	cmp	r4, r1
 800122c:	d900      	bls.n	8001230 <__aeabi_ddiv+0x4dc>
 800122e:	e68d      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 8001230:	428a      	cmp	r2, r1
 8001232:	d800      	bhi.n	8001236 <__aeabi_ddiv+0x4e2>
 8001234:	e68a      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 8001236:	1e85      	subs	r5, r0, #2
 8001238:	1909      	adds	r1, r1, r4
 800123a:	e687      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 800123c:	230f      	movs	r3, #15
 800123e:	402b      	ands	r3, r5
 8001240:	2b04      	cmp	r3, #4
 8001242:	d100      	bne.n	8001246 <__aeabi_ddiv+0x4f2>
 8001244:	e6bc      	b.n	8000fc0 <__aeabi_ddiv+0x26c>
 8001246:	2305      	movs	r3, #5
 8001248:	425b      	negs	r3, r3
 800124a:	42ab      	cmp	r3, r5
 800124c:	419b      	sbcs	r3, r3
 800124e:	3504      	adds	r5, #4
 8001250:	425b      	negs	r3, r3
 8001252:	08ed      	lsrs	r5, r5, #3
 8001254:	4498      	add	r8, r3
 8001256:	e6b4      	b.n	8000fc2 <__aeabi_ddiv+0x26e>
 8001258:	42af      	cmp	r7, r5
 800125a:	d900      	bls.n	800125e <__aeabi_ddiv+0x50a>
 800125c:	e660      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 800125e:	4282      	cmp	r2, r0
 8001260:	d804      	bhi.n	800126c <__aeabi_ddiv+0x518>
 8001262:	d000      	beq.n	8001266 <__aeabi_ddiv+0x512>
 8001264:	e65c      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 8001266:	42ae      	cmp	r6, r5
 8001268:	d800      	bhi.n	800126c <__aeabi_ddiv+0x518>
 800126a:	e659      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 800126c:	2302      	movs	r3, #2
 800126e:	425b      	negs	r3, r3
 8001270:	469c      	mov	ip, r3
 8001272:	9b00      	ldr	r3, [sp, #0]
 8001274:	44e0      	add	r8, ip
 8001276:	469c      	mov	ip, r3
 8001278:	4465      	add	r5, ip
 800127a:	429d      	cmp	r5, r3
 800127c:	419b      	sbcs	r3, r3
 800127e:	425b      	negs	r3, r3
 8001280:	191b      	adds	r3, r3, r4
 8001282:	18c0      	adds	r0, r0, r3
 8001284:	e64d      	b.n	8000f22 <__aeabi_ddiv+0x1ce>
 8001286:	428a      	cmp	r2, r1
 8001288:	d800      	bhi.n	800128c <__aeabi_ddiv+0x538>
 800128a:	e60e      	b.n	8000eaa <__aeabi_ddiv+0x156>
 800128c:	1e83      	subs	r3, r0, #2
 800128e:	1909      	adds	r1, r1, r4
 8001290:	e60b      	b.n	8000eaa <__aeabi_ddiv+0x156>
 8001292:	428a      	cmp	r2, r1
 8001294:	d800      	bhi.n	8001298 <__aeabi_ddiv+0x544>
 8001296:	e5f4      	b.n	8000e82 <__aeabi_ddiv+0x12e>
 8001298:	1e83      	subs	r3, r0, #2
 800129a:	4698      	mov	r8, r3
 800129c:	1909      	adds	r1, r1, r4
 800129e:	e5f0      	b.n	8000e82 <__aeabi_ddiv+0x12e>
 80012a0:	4925      	ldr	r1, [pc, #148]	; (8001338 <__aeabi_ddiv+0x5e4>)
 80012a2:	0028      	movs	r0, r5
 80012a4:	4459      	add	r1, fp
 80012a6:	408d      	lsls	r5, r1
 80012a8:	4642      	mov	r2, r8
 80012aa:	408a      	lsls	r2, r1
 80012ac:	1e69      	subs	r1, r5, #1
 80012ae:	418d      	sbcs	r5, r1
 80012b0:	4641      	mov	r1, r8
 80012b2:	40d8      	lsrs	r0, r3
 80012b4:	40d9      	lsrs	r1, r3
 80012b6:	4302      	orrs	r2, r0
 80012b8:	432a      	orrs	r2, r5
 80012ba:	000b      	movs	r3, r1
 80012bc:	0751      	lsls	r1, r2, #29
 80012be:	d100      	bne.n	80012c2 <__aeabi_ddiv+0x56e>
 80012c0:	e751      	b.n	8001166 <__aeabi_ddiv+0x412>
 80012c2:	210f      	movs	r1, #15
 80012c4:	4011      	ands	r1, r2
 80012c6:	2904      	cmp	r1, #4
 80012c8:	d000      	beq.n	80012cc <__aeabi_ddiv+0x578>
 80012ca:	e746      	b.n	800115a <__aeabi_ddiv+0x406>
 80012cc:	e74b      	b.n	8001166 <__aeabi_ddiv+0x412>
 80012ce:	0005      	movs	r5, r0
 80012d0:	428e      	cmp	r6, r1
 80012d2:	d000      	beq.n	80012d6 <__aeabi_ddiv+0x582>
 80012d4:	e66a      	b.n	8000fac <__aeabi_ddiv+0x258>
 80012d6:	9a00      	ldr	r2, [sp, #0]
 80012d8:	4293      	cmp	r3, r2
 80012da:	d000      	beq.n	80012de <__aeabi_ddiv+0x58a>
 80012dc:	e666      	b.n	8000fac <__aeabi_ddiv+0x258>
 80012de:	e667      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 80012e0:	4a16      	ldr	r2, [pc, #88]	; (800133c <__aeabi_ddiv+0x5e8>)
 80012e2:	445a      	add	r2, fp
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	dc00      	bgt.n	80012ea <__aeabi_ddiv+0x596>
 80012e8:	e710      	b.n	800110c <__aeabi_ddiv+0x3b8>
 80012ea:	2301      	movs	r3, #1
 80012ec:	2500      	movs	r5, #0
 80012ee:	4498      	add	r8, r3
 80012f0:	e667      	b.n	8000fc2 <__aeabi_ddiv+0x26e>
 80012f2:	075d      	lsls	r5, r3, #29
 80012f4:	025b      	lsls	r3, r3, #9
 80012f6:	0b1c      	lsrs	r4, r3, #12
 80012f8:	08d2      	lsrs	r2, r2, #3
 80012fa:	2300      	movs	r3, #0
 80012fc:	4315      	orrs	r5, r2
 80012fe:	e580      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001300:	9800      	ldr	r0, [sp, #0]
 8001302:	3d02      	subs	r5, #2
 8001304:	0042      	lsls	r2, r0, #1
 8001306:	4282      	cmp	r2, r0
 8001308:	41bf      	sbcs	r7, r7
 800130a:	427f      	negs	r7, r7
 800130c:	193c      	adds	r4, r7, r4
 800130e:	1936      	adds	r6, r6, r4
 8001310:	9200      	str	r2, [sp, #0]
 8001312:	e7dd      	b.n	80012d0 <__aeabi_ddiv+0x57c>
 8001314:	2480      	movs	r4, #128	; 0x80
 8001316:	4643      	mov	r3, r8
 8001318:	0324      	lsls	r4, r4, #12
 800131a:	431c      	orrs	r4, r3
 800131c:	0324      	lsls	r4, r4, #12
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__aeabi_ddiv+0x5dc>)
 8001320:	0b24      	lsrs	r4, r4, #12
 8001322:	e56e      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001324:	9a00      	ldr	r2, [sp, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d3ea      	bcc.n	8001300 <__aeabi_ddiv+0x5ac>
 800132a:	0005      	movs	r5, r0
 800132c:	e7d3      	b.n	80012d6 <__aeabi_ddiv+0x582>
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	000007ff 	.word	0x000007ff
 8001334:	0000043e 	.word	0x0000043e
 8001338:	0000041e 	.word	0x0000041e
 800133c:	000003ff 	.word	0x000003ff

08001340 <__eqdf2>:
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	464e      	mov	r6, r9
 8001344:	4645      	mov	r5, r8
 8001346:	46de      	mov	lr, fp
 8001348:	4657      	mov	r7, sl
 800134a:	4690      	mov	r8, r2
 800134c:	b5e0      	push	{r5, r6, r7, lr}
 800134e:	0017      	movs	r7, r2
 8001350:	031a      	lsls	r2, r3, #12
 8001352:	0b12      	lsrs	r2, r2, #12
 8001354:	0005      	movs	r5, r0
 8001356:	4684      	mov	ip, r0
 8001358:	4819      	ldr	r0, [pc, #100]	; (80013c0 <__eqdf2+0x80>)
 800135a:	030e      	lsls	r6, r1, #12
 800135c:	004c      	lsls	r4, r1, #1
 800135e:	4691      	mov	r9, r2
 8001360:	005a      	lsls	r2, r3, #1
 8001362:	0fdb      	lsrs	r3, r3, #31
 8001364:	469b      	mov	fp, r3
 8001366:	0b36      	lsrs	r6, r6, #12
 8001368:	0d64      	lsrs	r4, r4, #21
 800136a:	0fc9      	lsrs	r1, r1, #31
 800136c:	0d52      	lsrs	r2, r2, #21
 800136e:	4284      	cmp	r4, r0
 8001370:	d019      	beq.n	80013a6 <__eqdf2+0x66>
 8001372:	4282      	cmp	r2, r0
 8001374:	d010      	beq.n	8001398 <__eqdf2+0x58>
 8001376:	2001      	movs	r0, #1
 8001378:	4294      	cmp	r4, r2
 800137a:	d10e      	bne.n	800139a <__eqdf2+0x5a>
 800137c:	454e      	cmp	r6, r9
 800137e:	d10c      	bne.n	800139a <__eqdf2+0x5a>
 8001380:	2001      	movs	r0, #1
 8001382:	45c4      	cmp	ip, r8
 8001384:	d109      	bne.n	800139a <__eqdf2+0x5a>
 8001386:	4559      	cmp	r1, fp
 8001388:	d017      	beq.n	80013ba <__eqdf2+0x7a>
 800138a:	2c00      	cmp	r4, #0
 800138c:	d105      	bne.n	800139a <__eqdf2+0x5a>
 800138e:	0030      	movs	r0, r6
 8001390:	4328      	orrs	r0, r5
 8001392:	1e43      	subs	r3, r0, #1
 8001394:	4198      	sbcs	r0, r3
 8001396:	e000      	b.n	800139a <__eqdf2+0x5a>
 8001398:	2001      	movs	r0, #1
 800139a:	bcf0      	pop	{r4, r5, r6, r7}
 800139c:	46bb      	mov	fp, r7
 800139e:	46b2      	mov	sl, r6
 80013a0:	46a9      	mov	r9, r5
 80013a2:	46a0      	mov	r8, r4
 80013a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a6:	0033      	movs	r3, r6
 80013a8:	2001      	movs	r0, #1
 80013aa:	432b      	orrs	r3, r5
 80013ac:	d1f5      	bne.n	800139a <__eqdf2+0x5a>
 80013ae:	42a2      	cmp	r2, r4
 80013b0:	d1f3      	bne.n	800139a <__eqdf2+0x5a>
 80013b2:	464b      	mov	r3, r9
 80013b4:	433b      	orrs	r3, r7
 80013b6:	d1f0      	bne.n	800139a <__eqdf2+0x5a>
 80013b8:	e7e2      	b.n	8001380 <__eqdf2+0x40>
 80013ba:	2000      	movs	r0, #0
 80013bc:	e7ed      	b.n	800139a <__eqdf2+0x5a>
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	000007ff 	.word	0x000007ff

080013c4 <__gedf2>:
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	4647      	mov	r7, r8
 80013c8:	46ce      	mov	lr, r9
 80013ca:	0004      	movs	r4, r0
 80013cc:	0018      	movs	r0, r3
 80013ce:	0016      	movs	r6, r2
 80013d0:	031b      	lsls	r3, r3, #12
 80013d2:	0b1b      	lsrs	r3, r3, #12
 80013d4:	4d2d      	ldr	r5, [pc, #180]	; (800148c <__gedf2+0xc8>)
 80013d6:	004a      	lsls	r2, r1, #1
 80013d8:	4699      	mov	r9, r3
 80013da:	b580      	push	{r7, lr}
 80013dc:	0043      	lsls	r3, r0, #1
 80013de:	030f      	lsls	r7, r1, #12
 80013e0:	46a4      	mov	ip, r4
 80013e2:	46b0      	mov	r8, r6
 80013e4:	0b3f      	lsrs	r7, r7, #12
 80013e6:	0d52      	lsrs	r2, r2, #21
 80013e8:	0fc9      	lsrs	r1, r1, #31
 80013ea:	0d5b      	lsrs	r3, r3, #21
 80013ec:	0fc0      	lsrs	r0, r0, #31
 80013ee:	42aa      	cmp	r2, r5
 80013f0:	d021      	beq.n	8001436 <__gedf2+0x72>
 80013f2:	42ab      	cmp	r3, r5
 80013f4:	d013      	beq.n	800141e <__gedf2+0x5a>
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	d122      	bne.n	8001440 <__gedf2+0x7c>
 80013fa:	433c      	orrs	r4, r7
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <__gedf2+0x42>
 8001400:	464d      	mov	r5, r9
 8001402:	432e      	orrs	r6, r5
 8001404:	d022      	beq.n	800144c <__gedf2+0x88>
 8001406:	2c00      	cmp	r4, #0
 8001408:	d010      	beq.n	800142c <__gedf2+0x68>
 800140a:	4281      	cmp	r1, r0
 800140c:	d022      	beq.n	8001454 <__gedf2+0x90>
 800140e:	2002      	movs	r0, #2
 8001410:	3901      	subs	r1, #1
 8001412:	4008      	ands	r0, r1
 8001414:	3801      	subs	r0, #1
 8001416:	bcc0      	pop	{r6, r7}
 8001418:	46b9      	mov	r9, r7
 800141a:	46b0      	mov	r8, r6
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	464d      	mov	r5, r9
 8001420:	432e      	orrs	r6, r5
 8001422:	d129      	bne.n	8001478 <__gedf2+0xb4>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d1f0      	bne.n	800140a <__gedf2+0x46>
 8001428:	433c      	orrs	r4, r7
 800142a:	d1ee      	bne.n	800140a <__gedf2+0x46>
 800142c:	2800      	cmp	r0, #0
 800142e:	d1f2      	bne.n	8001416 <__gedf2+0x52>
 8001430:	2001      	movs	r0, #1
 8001432:	4240      	negs	r0, r0
 8001434:	e7ef      	b.n	8001416 <__gedf2+0x52>
 8001436:	003d      	movs	r5, r7
 8001438:	4325      	orrs	r5, r4
 800143a:	d11d      	bne.n	8001478 <__gedf2+0xb4>
 800143c:	4293      	cmp	r3, r2
 800143e:	d0ee      	beq.n	800141e <__gedf2+0x5a>
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1e2      	bne.n	800140a <__gedf2+0x46>
 8001444:	464c      	mov	r4, r9
 8001446:	4326      	orrs	r6, r4
 8001448:	d1df      	bne.n	800140a <__gedf2+0x46>
 800144a:	e7e0      	b.n	800140e <__gedf2+0x4a>
 800144c:	2000      	movs	r0, #0
 800144e:	2c00      	cmp	r4, #0
 8001450:	d0e1      	beq.n	8001416 <__gedf2+0x52>
 8001452:	e7dc      	b.n	800140e <__gedf2+0x4a>
 8001454:	429a      	cmp	r2, r3
 8001456:	dc0a      	bgt.n	800146e <__gedf2+0xaa>
 8001458:	dbe8      	blt.n	800142c <__gedf2+0x68>
 800145a:	454f      	cmp	r7, r9
 800145c:	d8d7      	bhi.n	800140e <__gedf2+0x4a>
 800145e:	d00e      	beq.n	800147e <__gedf2+0xba>
 8001460:	2000      	movs	r0, #0
 8001462:	454f      	cmp	r7, r9
 8001464:	d2d7      	bcs.n	8001416 <__gedf2+0x52>
 8001466:	2900      	cmp	r1, #0
 8001468:	d0e2      	beq.n	8001430 <__gedf2+0x6c>
 800146a:	0008      	movs	r0, r1
 800146c:	e7d3      	b.n	8001416 <__gedf2+0x52>
 800146e:	4243      	negs	r3, r0
 8001470:	4158      	adcs	r0, r3
 8001472:	0040      	lsls	r0, r0, #1
 8001474:	3801      	subs	r0, #1
 8001476:	e7ce      	b.n	8001416 <__gedf2+0x52>
 8001478:	2002      	movs	r0, #2
 800147a:	4240      	negs	r0, r0
 800147c:	e7cb      	b.n	8001416 <__gedf2+0x52>
 800147e:	45c4      	cmp	ip, r8
 8001480:	d8c5      	bhi.n	800140e <__gedf2+0x4a>
 8001482:	2000      	movs	r0, #0
 8001484:	45c4      	cmp	ip, r8
 8001486:	d2c6      	bcs.n	8001416 <__gedf2+0x52>
 8001488:	e7ed      	b.n	8001466 <__gedf2+0xa2>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	000007ff 	.word	0x000007ff

08001490 <__ledf2>:
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	4647      	mov	r7, r8
 8001494:	46ce      	mov	lr, r9
 8001496:	0004      	movs	r4, r0
 8001498:	0018      	movs	r0, r3
 800149a:	0016      	movs	r6, r2
 800149c:	031b      	lsls	r3, r3, #12
 800149e:	0b1b      	lsrs	r3, r3, #12
 80014a0:	4d2c      	ldr	r5, [pc, #176]	; (8001554 <__ledf2+0xc4>)
 80014a2:	004a      	lsls	r2, r1, #1
 80014a4:	4699      	mov	r9, r3
 80014a6:	b580      	push	{r7, lr}
 80014a8:	0043      	lsls	r3, r0, #1
 80014aa:	030f      	lsls	r7, r1, #12
 80014ac:	46a4      	mov	ip, r4
 80014ae:	46b0      	mov	r8, r6
 80014b0:	0b3f      	lsrs	r7, r7, #12
 80014b2:	0d52      	lsrs	r2, r2, #21
 80014b4:	0fc9      	lsrs	r1, r1, #31
 80014b6:	0d5b      	lsrs	r3, r3, #21
 80014b8:	0fc0      	lsrs	r0, r0, #31
 80014ba:	42aa      	cmp	r2, r5
 80014bc:	d00d      	beq.n	80014da <__ledf2+0x4a>
 80014be:	42ab      	cmp	r3, r5
 80014c0:	d010      	beq.n	80014e4 <__ledf2+0x54>
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d127      	bne.n	8001516 <__ledf2+0x86>
 80014c6:	433c      	orrs	r4, r7
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d111      	bne.n	80014f0 <__ledf2+0x60>
 80014cc:	464d      	mov	r5, r9
 80014ce:	432e      	orrs	r6, r5
 80014d0:	d10e      	bne.n	80014f0 <__ledf2+0x60>
 80014d2:	2000      	movs	r0, #0
 80014d4:	2c00      	cmp	r4, #0
 80014d6:	d015      	beq.n	8001504 <__ledf2+0x74>
 80014d8:	e00e      	b.n	80014f8 <__ledf2+0x68>
 80014da:	003d      	movs	r5, r7
 80014dc:	4325      	orrs	r5, r4
 80014de:	d110      	bne.n	8001502 <__ledf2+0x72>
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d118      	bne.n	8001516 <__ledf2+0x86>
 80014e4:	464d      	mov	r5, r9
 80014e6:	432e      	orrs	r6, r5
 80014e8:	d10b      	bne.n	8001502 <__ledf2+0x72>
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d102      	bne.n	80014f4 <__ledf2+0x64>
 80014ee:	433c      	orrs	r4, r7
 80014f0:	2c00      	cmp	r4, #0
 80014f2:	d00b      	beq.n	800150c <__ledf2+0x7c>
 80014f4:	4281      	cmp	r1, r0
 80014f6:	d014      	beq.n	8001522 <__ledf2+0x92>
 80014f8:	2002      	movs	r0, #2
 80014fa:	3901      	subs	r1, #1
 80014fc:	4008      	ands	r0, r1
 80014fe:	3801      	subs	r0, #1
 8001500:	e000      	b.n	8001504 <__ledf2+0x74>
 8001502:	2002      	movs	r0, #2
 8001504:	bcc0      	pop	{r6, r7}
 8001506:	46b9      	mov	r9, r7
 8001508:	46b0      	mov	r8, r6
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800150c:	2800      	cmp	r0, #0
 800150e:	d1f9      	bne.n	8001504 <__ledf2+0x74>
 8001510:	2001      	movs	r0, #1
 8001512:	4240      	negs	r0, r0
 8001514:	e7f6      	b.n	8001504 <__ledf2+0x74>
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ec      	bne.n	80014f4 <__ledf2+0x64>
 800151a:	464c      	mov	r4, r9
 800151c:	4326      	orrs	r6, r4
 800151e:	d1e9      	bne.n	80014f4 <__ledf2+0x64>
 8001520:	e7ea      	b.n	80014f8 <__ledf2+0x68>
 8001522:	429a      	cmp	r2, r3
 8001524:	dd04      	ble.n	8001530 <__ledf2+0xa0>
 8001526:	4243      	negs	r3, r0
 8001528:	4158      	adcs	r0, r3
 800152a:	0040      	lsls	r0, r0, #1
 800152c:	3801      	subs	r0, #1
 800152e:	e7e9      	b.n	8001504 <__ledf2+0x74>
 8001530:	429a      	cmp	r2, r3
 8001532:	dbeb      	blt.n	800150c <__ledf2+0x7c>
 8001534:	454f      	cmp	r7, r9
 8001536:	d8df      	bhi.n	80014f8 <__ledf2+0x68>
 8001538:	d006      	beq.n	8001548 <__ledf2+0xb8>
 800153a:	2000      	movs	r0, #0
 800153c:	454f      	cmp	r7, r9
 800153e:	d2e1      	bcs.n	8001504 <__ledf2+0x74>
 8001540:	2900      	cmp	r1, #0
 8001542:	d0e5      	beq.n	8001510 <__ledf2+0x80>
 8001544:	0008      	movs	r0, r1
 8001546:	e7dd      	b.n	8001504 <__ledf2+0x74>
 8001548:	45c4      	cmp	ip, r8
 800154a:	d8d5      	bhi.n	80014f8 <__ledf2+0x68>
 800154c:	2000      	movs	r0, #0
 800154e:	45c4      	cmp	ip, r8
 8001550:	d2d8      	bcs.n	8001504 <__ledf2+0x74>
 8001552:	e7f5      	b.n	8001540 <__ledf2+0xb0>
 8001554:	000007ff 	.word	0x000007ff

08001558 <__aeabi_dmul>:
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	4657      	mov	r7, sl
 800155c:	464e      	mov	r6, r9
 800155e:	4645      	mov	r5, r8
 8001560:	46de      	mov	lr, fp
 8001562:	b5e0      	push	{r5, r6, r7, lr}
 8001564:	4698      	mov	r8, r3
 8001566:	030c      	lsls	r4, r1, #12
 8001568:	004b      	lsls	r3, r1, #1
 800156a:	0006      	movs	r6, r0
 800156c:	4692      	mov	sl, r2
 800156e:	b087      	sub	sp, #28
 8001570:	0b24      	lsrs	r4, r4, #12
 8001572:	0d5b      	lsrs	r3, r3, #21
 8001574:	0fcf      	lsrs	r7, r1, #31
 8001576:	2b00      	cmp	r3, #0
 8001578:	d100      	bne.n	800157c <__aeabi_dmul+0x24>
 800157a:	e15c      	b.n	8001836 <__aeabi_dmul+0x2de>
 800157c:	4ad9      	ldr	r2, [pc, #868]	; (80018e4 <__aeabi_dmul+0x38c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d100      	bne.n	8001584 <__aeabi_dmul+0x2c>
 8001582:	e175      	b.n	8001870 <__aeabi_dmul+0x318>
 8001584:	0f42      	lsrs	r2, r0, #29
 8001586:	00e4      	lsls	r4, r4, #3
 8001588:	4314      	orrs	r4, r2
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	0412      	lsls	r2, r2, #16
 800158e:	4314      	orrs	r4, r2
 8001590:	4ad5      	ldr	r2, [pc, #852]	; (80018e8 <__aeabi_dmul+0x390>)
 8001592:	00c5      	lsls	r5, r0, #3
 8001594:	4694      	mov	ip, r2
 8001596:	4463      	add	r3, ip
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2300      	movs	r3, #0
 800159c:	4699      	mov	r9, r3
 800159e:	469b      	mov	fp, r3
 80015a0:	4643      	mov	r3, r8
 80015a2:	4642      	mov	r2, r8
 80015a4:	031e      	lsls	r6, r3, #12
 80015a6:	0fd2      	lsrs	r2, r2, #31
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4650      	mov	r0, sl
 80015ac:	4690      	mov	r8, r2
 80015ae:	0b36      	lsrs	r6, r6, #12
 80015b0:	0d5b      	lsrs	r3, r3, #21
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dmul+0x5e>
 80015b4:	e120      	b.n	80017f8 <__aeabi_dmul+0x2a0>
 80015b6:	4acb      	ldr	r2, [pc, #812]	; (80018e4 <__aeabi_dmul+0x38c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d100      	bne.n	80015be <__aeabi_dmul+0x66>
 80015bc:	e162      	b.n	8001884 <__aeabi_dmul+0x32c>
 80015be:	49ca      	ldr	r1, [pc, #808]	; (80018e8 <__aeabi_dmul+0x390>)
 80015c0:	0f42      	lsrs	r2, r0, #29
 80015c2:	468c      	mov	ip, r1
 80015c4:	9900      	ldr	r1, [sp, #0]
 80015c6:	4463      	add	r3, ip
 80015c8:	00f6      	lsls	r6, r6, #3
 80015ca:	468c      	mov	ip, r1
 80015cc:	4316      	orrs	r6, r2
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	449c      	add	ip, r3
 80015d2:	0412      	lsls	r2, r2, #16
 80015d4:	4663      	mov	r3, ip
 80015d6:	4316      	orrs	r6, r2
 80015d8:	00c2      	lsls	r2, r0, #3
 80015da:	2000      	movs	r0, #0
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	9900      	ldr	r1, [sp, #0]
 80015e0:	4643      	mov	r3, r8
 80015e2:	3101      	adds	r1, #1
 80015e4:	468c      	mov	ip, r1
 80015e6:	4649      	mov	r1, r9
 80015e8:	407b      	eors	r3, r7
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	290f      	cmp	r1, #15
 80015ee:	d826      	bhi.n	800163e <__aeabi_dmul+0xe6>
 80015f0:	4bbe      	ldr	r3, [pc, #760]	; (80018ec <__aeabi_dmul+0x394>)
 80015f2:	0089      	lsls	r1, r1, #2
 80015f4:	5859      	ldr	r1, [r3, r1]
 80015f6:	468f      	mov	pc, r1
 80015f8:	4643      	mov	r3, r8
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	0034      	movs	r4, r6
 80015fe:	0015      	movs	r5, r2
 8001600:	4683      	mov	fp, r0
 8001602:	465b      	mov	r3, fp
 8001604:	2b02      	cmp	r3, #2
 8001606:	d016      	beq.n	8001636 <__aeabi_dmul+0xde>
 8001608:	2b03      	cmp	r3, #3
 800160a:	d100      	bne.n	800160e <__aeabi_dmul+0xb6>
 800160c:	e203      	b.n	8001a16 <__aeabi_dmul+0x4be>
 800160e:	2b01      	cmp	r3, #1
 8001610:	d000      	beq.n	8001614 <__aeabi_dmul+0xbc>
 8001612:	e0cd      	b.n	80017b0 <__aeabi_dmul+0x258>
 8001614:	2200      	movs	r2, #0
 8001616:	2400      	movs	r4, #0
 8001618:	2500      	movs	r5, #0
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0512      	lsls	r2, r2, #20
 800161e:	4322      	orrs	r2, r4
 8001620:	07db      	lsls	r3, r3, #31
 8001622:	431a      	orrs	r2, r3
 8001624:	0028      	movs	r0, r5
 8001626:	0011      	movs	r1, r2
 8001628:	b007      	add	sp, #28
 800162a:	bcf0      	pop	{r4, r5, r6, r7}
 800162c:	46bb      	mov	fp, r7
 800162e:	46b2      	mov	sl, r6
 8001630:	46a9      	mov	r9, r5
 8001632:	46a0      	mov	r8, r4
 8001634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001636:	2400      	movs	r4, #0
 8001638:	2500      	movs	r5, #0
 800163a:	4aaa      	ldr	r2, [pc, #680]	; (80018e4 <__aeabi_dmul+0x38c>)
 800163c:	e7ed      	b.n	800161a <__aeabi_dmul+0xc2>
 800163e:	0c28      	lsrs	r0, r5, #16
 8001640:	042d      	lsls	r5, r5, #16
 8001642:	0c2d      	lsrs	r5, r5, #16
 8001644:	002b      	movs	r3, r5
 8001646:	0c11      	lsrs	r1, r2, #16
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	0c12      	lsrs	r2, r2, #16
 800164c:	4353      	muls	r3, r2
 800164e:	4698      	mov	r8, r3
 8001650:	0013      	movs	r3, r2
 8001652:	002f      	movs	r7, r5
 8001654:	4343      	muls	r3, r0
 8001656:	4699      	mov	r9, r3
 8001658:	434f      	muls	r7, r1
 800165a:	444f      	add	r7, r9
 800165c:	46bb      	mov	fp, r7
 800165e:	4647      	mov	r7, r8
 8001660:	000b      	movs	r3, r1
 8001662:	0c3f      	lsrs	r7, r7, #16
 8001664:	46ba      	mov	sl, r7
 8001666:	4343      	muls	r3, r0
 8001668:	44da      	add	sl, fp
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	45d1      	cmp	r9, sl
 800166e:	d904      	bls.n	800167a <__aeabi_dmul+0x122>
 8001670:	2780      	movs	r7, #128	; 0x80
 8001672:	027f      	lsls	r7, r7, #9
 8001674:	46b9      	mov	r9, r7
 8001676:	444b      	add	r3, r9
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	4653      	mov	r3, sl
 800167c:	0c1b      	lsrs	r3, r3, #16
 800167e:	469b      	mov	fp, r3
 8001680:	4653      	mov	r3, sl
 8001682:	041f      	lsls	r7, r3, #16
 8001684:	4643      	mov	r3, r8
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	0c1b      	lsrs	r3, r3, #16
 800168a:	4698      	mov	r8, r3
 800168c:	003b      	movs	r3, r7
 800168e:	4443      	add	r3, r8
 8001690:	9304      	str	r3, [sp, #16]
 8001692:	0c33      	lsrs	r3, r6, #16
 8001694:	0436      	lsls	r6, r6, #16
 8001696:	0c36      	lsrs	r6, r6, #16
 8001698:	4698      	mov	r8, r3
 800169a:	0033      	movs	r3, r6
 800169c:	4343      	muls	r3, r0
 800169e:	4699      	mov	r9, r3
 80016a0:	4643      	mov	r3, r8
 80016a2:	4343      	muls	r3, r0
 80016a4:	002f      	movs	r7, r5
 80016a6:	469a      	mov	sl, r3
 80016a8:	4643      	mov	r3, r8
 80016aa:	4377      	muls	r7, r6
 80016ac:	435d      	muls	r5, r3
 80016ae:	0c38      	lsrs	r0, r7, #16
 80016b0:	444d      	add	r5, r9
 80016b2:	1945      	adds	r5, r0, r5
 80016b4:	45a9      	cmp	r9, r5
 80016b6:	d903      	bls.n	80016c0 <__aeabi_dmul+0x168>
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	025b      	lsls	r3, r3, #9
 80016bc:	4699      	mov	r9, r3
 80016be:	44ca      	add	sl, r9
 80016c0:	043f      	lsls	r7, r7, #16
 80016c2:	0c28      	lsrs	r0, r5, #16
 80016c4:	0c3f      	lsrs	r7, r7, #16
 80016c6:	042d      	lsls	r5, r5, #16
 80016c8:	19ed      	adds	r5, r5, r7
 80016ca:	0c27      	lsrs	r7, r4, #16
 80016cc:	0424      	lsls	r4, r4, #16
 80016ce:	0c24      	lsrs	r4, r4, #16
 80016d0:	0003      	movs	r3, r0
 80016d2:	0020      	movs	r0, r4
 80016d4:	4350      	muls	r0, r2
 80016d6:	437a      	muls	r2, r7
 80016d8:	4691      	mov	r9, r2
 80016da:	003a      	movs	r2, r7
 80016dc:	4453      	add	r3, sl
 80016de:	9305      	str	r3, [sp, #20]
 80016e0:	0c03      	lsrs	r3, r0, #16
 80016e2:	469a      	mov	sl, r3
 80016e4:	434a      	muls	r2, r1
 80016e6:	4361      	muls	r1, r4
 80016e8:	4449      	add	r1, r9
 80016ea:	4451      	add	r1, sl
 80016ec:	44ab      	add	fp, r5
 80016ee:	4589      	cmp	r9, r1
 80016f0:	d903      	bls.n	80016fa <__aeabi_dmul+0x1a2>
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	4699      	mov	r9, r3
 80016f8:	444a      	add	r2, r9
 80016fa:	0400      	lsls	r0, r0, #16
 80016fc:	0c0b      	lsrs	r3, r1, #16
 80016fe:	0c00      	lsrs	r0, r0, #16
 8001700:	0409      	lsls	r1, r1, #16
 8001702:	1809      	adds	r1, r1, r0
 8001704:	0020      	movs	r0, r4
 8001706:	4699      	mov	r9, r3
 8001708:	4643      	mov	r3, r8
 800170a:	4370      	muls	r0, r6
 800170c:	435c      	muls	r4, r3
 800170e:	437e      	muls	r6, r7
 8001710:	435f      	muls	r7, r3
 8001712:	0c03      	lsrs	r3, r0, #16
 8001714:	4698      	mov	r8, r3
 8001716:	19a4      	adds	r4, r4, r6
 8001718:	4444      	add	r4, r8
 800171a:	444a      	add	r2, r9
 800171c:	9703      	str	r7, [sp, #12]
 800171e:	42a6      	cmp	r6, r4
 8001720:	d904      	bls.n	800172c <__aeabi_dmul+0x1d4>
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	025b      	lsls	r3, r3, #9
 8001726:	4698      	mov	r8, r3
 8001728:	4447      	add	r7, r8
 800172a:	9703      	str	r7, [sp, #12]
 800172c:	0423      	lsls	r3, r4, #16
 800172e:	9e02      	ldr	r6, [sp, #8]
 8001730:	469a      	mov	sl, r3
 8001732:	9b05      	ldr	r3, [sp, #20]
 8001734:	445e      	add	r6, fp
 8001736:	4698      	mov	r8, r3
 8001738:	42ae      	cmp	r6, r5
 800173a:	41ad      	sbcs	r5, r5
 800173c:	1876      	adds	r6, r6, r1
 800173e:	428e      	cmp	r6, r1
 8001740:	4189      	sbcs	r1, r1
 8001742:	0400      	lsls	r0, r0, #16
 8001744:	0c00      	lsrs	r0, r0, #16
 8001746:	4450      	add	r0, sl
 8001748:	4440      	add	r0, r8
 800174a:	426d      	negs	r5, r5
 800174c:	1947      	adds	r7, r0, r5
 800174e:	46b8      	mov	r8, r7
 8001750:	4693      	mov	fp, r2
 8001752:	4249      	negs	r1, r1
 8001754:	4689      	mov	r9, r1
 8001756:	44c3      	add	fp, r8
 8001758:	44d9      	add	r9, fp
 800175a:	4298      	cmp	r0, r3
 800175c:	4180      	sbcs	r0, r0
 800175e:	45a8      	cmp	r8, r5
 8001760:	41ad      	sbcs	r5, r5
 8001762:	4593      	cmp	fp, r2
 8001764:	4192      	sbcs	r2, r2
 8001766:	4589      	cmp	r9, r1
 8001768:	4189      	sbcs	r1, r1
 800176a:	426d      	negs	r5, r5
 800176c:	4240      	negs	r0, r0
 800176e:	4328      	orrs	r0, r5
 8001770:	0c24      	lsrs	r4, r4, #16
 8001772:	4252      	negs	r2, r2
 8001774:	4249      	negs	r1, r1
 8001776:	430a      	orrs	r2, r1
 8001778:	9b03      	ldr	r3, [sp, #12]
 800177a:	1900      	adds	r0, r0, r4
 800177c:	1880      	adds	r0, r0, r2
 800177e:	18c7      	adds	r7, r0, r3
 8001780:	464b      	mov	r3, r9
 8001782:	0ddc      	lsrs	r4, r3, #23
 8001784:	9b04      	ldr	r3, [sp, #16]
 8001786:	0275      	lsls	r5, r6, #9
 8001788:	431d      	orrs	r5, r3
 800178a:	1e6a      	subs	r2, r5, #1
 800178c:	4195      	sbcs	r5, r2
 800178e:	464b      	mov	r3, r9
 8001790:	0df6      	lsrs	r6, r6, #23
 8001792:	027f      	lsls	r7, r7, #9
 8001794:	4335      	orrs	r5, r6
 8001796:	025a      	lsls	r2, r3, #9
 8001798:	433c      	orrs	r4, r7
 800179a:	4315      	orrs	r5, r2
 800179c:	01fb      	lsls	r3, r7, #7
 800179e:	d400      	bmi.n	80017a2 <__aeabi_dmul+0x24a>
 80017a0:	e11c      	b.n	80019dc <__aeabi_dmul+0x484>
 80017a2:	2101      	movs	r1, #1
 80017a4:	086a      	lsrs	r2, r5, #1
 80017a6:	400d      	ands	r5, r1
 80017a8:	4315      	orrs	r5, r2
 80017aa:	07e2      	lsls	r2, r4, #31
 80017ac:	4315      	orrs	r5, r2
 80017ae:	0864      	lsrs	r4, r4, #1
 80017b0:	494f      	ldr	r1, [pc, #316]	; (80018f0 <__aeabi_dmul+0x398>)
 80017b2:	4461      	add	r1, ip
 80017b4:	2900      	cmp	r1, #0
 80017b6:	dc00      	bgt.n	80017ba <__aeabi_dmul+0x262>
 80017b8:	e0b0      	b.n	800191c <__aeabi_dmul+0x3c4>
 80017ba:	076b      	lsls	r3, r5, #29
 80017bc:	d009      	beq.n	80017d2 <__aeabi_dmul+0x27a>
 80017be:	220f      	movs	r2, #15
 80017c0:	402a      	ands	r2, r5
 80017c2:	2a04      	cmp	r2, #4
 80017c4:	d005      	beq.n	80017d2 <__aeabi_dmul+0x27a>
 80017c6:	1d2a      	adds	r2, r5, #4
 80017c8:	42aa      	cmp	r2, r5
 80017ca:	41ad      	sbcs	r5, r5
 80017cc:	426d      	negs	r5, r5
 80017ce:	1964      	adds	r4, r4, r5
 80017d0:	0015      	movs	r5, r2
 80017d2:	01e3      	lsls	r3, r4, #7
 80017d4:	d504      	bpl.n	80017e0 <__aeabi_dmul+0x288>
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	4a46      	ldr	r2, [pc, #280]	; (80018f4 <__aeabi_dmul+0x39c>)
 80017da:	00c9      	lsls	r1, r1, #3
 80017dc:	4014      	ands	r4, r2
 80017de:	4461      	add	r1, ip
 80017e0:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <__aeabi_dmul+0x3a0>)
 80017e2:	4291      	cmp	r1, r2
 80017e4:	dd00      	ble.n	80017e8 <__aeabi_dmul+0x290>
 80017e6:	e726      	b.n	8001636 <__aeabi_dmul+0xde>
 80017e8:	0762      	lsls	r2, r4, #29
 80017ea:	08ed      	lsrs	r5, r5, #3
 80017ec:	0264      	lsls	r4, r4, #9
 80017ee:	0549      	lsls	r1, r1, #21
 80017f0:	4315      	orrs	r5, r2
 80017f2:	0b24      	lsrs	r4, r4, #12
 80017f4:	0d4a      	lsrs	r2, r1, #21
 80017f6:	e710      	b.n	800161a <__aeabi_dmul+0xc2>
 80017f8:	4652      	mov	r2, sl
 80017fa:	4332      	orrs	r2, r6
 80017fc:	d100      	bne.n	8001800 <__aeabi_dmul+0x2a8>
 80017fe:	e07f      	b.n	8001900 <__aeabi_dmul+0x3a8>
 8001800:	2e00      	cmp	r6, #0
 8001802:	d100      	bne.n	8001806 <__aeabi_dmul+0x2ae>
 8001804:	e0dc      	b.n	80019c0 <__aeabi_dmul+0x468>
 8001806:	0030      	movs	r0, r6
 8001808:	f000 fe1e 	bl	8002448 <__clzsi2>
 800180c:	0002      	movs	r2, r0
 800180e:	3a0b      	subs	r2, #11
 8001810:	231d      	movs	r3, #29
 8001812:	0001      	movs	r1, r0
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	4652      	mov	r2, sl
 8001818:	3908      	subs	r1, #8
 800181a:	40da      	lsrs	r2, r3
 800181c:	408e      	lsls	r6, r1
 800181e:	4316      	orrs	r6, r2
 8001820:	4652      	mov	r2, sl
 8001822:	408a      	lsls	r2, r1
 8001824:	9b00      	ldr	r3, [sp, #0]
 8001826:	4935      	ldr	r1, [pc, #212]	; (80018fc <__aeabi_dmul+0x3a4>)
 8001828:	1a18      	subs	r0, r3, r0
 800182a:	0003      	movs	r3, r0
 800182c:	468c      	mov	ip, r1
 800182e:	4463      	add	r3, ip
 8001830:	2000      	movs	r0, #0
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	e6d3      	b.n	80015de <__aeabi_dmul+0x86>
 8001836:	0025      	movs	r5, r4
 8001838:	4305      	orrs	r5, r0
 800183a:	d04a      	beq.n	80018d2 <__aeabi_dmul+0x37a>
 800183c:	2c00      	cmp	r4, #0
 800183e:	d100      	bne.n	8001842 <__aeabi_dmul+0x2ea>
 8001840:	e0b0      	b.n	80019a4 <__aeabi_dmul+0x44c>
 8001842:	0020      	movs	r0, r4
 8001844:	f000 fe00 	bl	8002448 <__clzsi2>
 8001848:	0001      	movs	r1, r0
 800184a:	0002      	movs	r2, r0
 800184c:	390b      	subs	r1, #11
 800184e:	231d      	movs	r3, #29
 8001850:	0010      	movs	r0, r2
 8001852:	1a5b      	subs	r3, r3, r1
 8001854:	0031      	movs	r1, r6
 8001856:	0035      	movs	r5, r6
 8001858:	3808      	subs	r0, #8
 800185a:	4084      	lsls	r4, r0
 800185c:	40d9      	lsrs	r1, r3
 800185e:	4085      	lsls	r5, r0
 8001860:	430c      	orrs	r4, r1
 8001862:	4826      	ldr	r0, [pc, #152]	; (80018fc <__aeabi_dmul+0x3a4>)
 8001864:	1a83      	subs	r3, r0, r2
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2300      	movs	r3, #0
 800186a:	4699      	mov	r9, r3
 800186c:	469b      	mov	fp, r3
 800186e:	e697      	b.n	80015a0 <__aeabi_dmul+0x48>
 8001870:	0005      	movs	r5, r0
 8001872:	4325      	orrs	r5, r4
 8001874:	d126      	bne.n	80018c4 <__aeabi_dmul+0x36c>
 8001876:	2208      	movs	r2, #8
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	2400      	movs	r4, #0
 800187e:	4691      	mov	r9, r2
 8001880:	469b      	mov	fp, r3
 8001882:	e68d      	b.n	80015a0 <__aeabi_dmul+0x48>
 8001884:	4652      	mov	r2, sl
 8001886:	9b00      	ldr	r3, [sp, #0]
 8001888:	4332      	orrs	r2, r6
 800188a:	d110      	bne.n	80018ae <__aeabi_dmul+0x356>
 800188c:	4915      	ldr	r1, [pc, #84]	; (80018e4 <__aeabi_dmul+0x38c>)
 800188e:	2600      	movs	r6, #0
 8001890:	468c      	mov	ip, r1
 8001892:	4463      	add	r3, ip
 8001894:	4649      	mov	r1, r9
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2302      	movs	r3, #2
 800189a:	4319      	orrs	r1, r3
 800189c:	4689      	mov	r9, r1
 800189e:	2002      	movs	r0, #2
 80018a0:	e69d      	b.n	80015de <__aeabi_dmul+0x86>
 80018a2:	465b      	mov	r3, fp
 80018a4:	9701      	str	r7, [sp, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d000      	beq.n	80018ac <__aeabi_dmul+0x354>
 80018aa:	e6ad      	b.n	8001608 <__aeabi_dmul+0xb0>
 80018ac:	e6c3      	b.n	8001636 <__aeabi_dmul+0xde>
 80018ae:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <__aeabi_dmul+0x38c>)
 80018b0:	2003      	movs	r0, #3
 80018b2:	4694      	mov	ip, r2
 80018b4:	4463      	add	r3, ip
 80018b6:	464a      	mov	r2, r9
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2303      	movs	r3, #3
 80018bc:	431a      	orrs	r2, r3
 80018be:	4691      	mov	r9, r2
 80018c0:	4652      	mov	r2, sl
 80018c2:	e68c      	b.n	80015de <__aeabi_dmul+0x86>
 80018c4:	220c      	movs	r2, #12
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2303      	movs	r3, #3
 80018ca:	0005      	movs	r5, r0
 80018cc:	4691      	mov	r9, r2
 80018ce:	469b      	mov	fp, r3
 80018d0:	e666      	b.n	80015a0 <__aeabi_dmul+0x48>
 80018d2:	2304      	movs	r3, #4
 80018d4:	4699      	mov	r9, r3
 80018d6:	2300      	movs	r3, #0
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	2400      	movs	r4, #0
 80018de:	469b      	mov	fp, r3
 80018e0:	e65e      	b.n	80015a0 <__aeabi_dmul+0x48>
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	000007ff 	.word	0x000007ff
 80018e8:	fffffc01 	.word	0xfffffc01
 80018ec:	080088c8 	.word	0x080088c8
 80018f0:	000003ff 	.word	0x000003ff
 80018f4:	feffffff 	.word	0xfeffffff
 80018f8:	000007fe 	.word	0x000007fe
 80018fc:	fffffc0d 	.word	0xfffffc0d
 8001900:	4649      	mov	r1, r9
 8001902:	2301      	movs	r3, #1
 8001904:	4319      	orrs	r1, r3
 8001906:	4689      	mov	r9, r1
 8001908:	2600      	movs	r6, #0
 800190a:	2001      	movs	r0, #1
 800190c:	e667      	b.n	80015de <__aeabi_dmul+0x86>
 800190e:	2300      	movs	r3, #0
 8001910:	2480      	movs	r4, #128	; 0x80
 8001912:	2500      	movs	r5, #0
 8001914:	4a43      	ldr	r2, [pc, #268]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	0324      	lsls	r4, r4, #12
 800191a:	e67e      	b.n	800161a <__aeabi_dmul+0xc2>
 800191c:	2001      	movs	r0, #1
 800191e:	1a40      	subs	r0, r0, r1
 8001920:	2838      	cmp	r0, #56	; 0x38
 8001922:	dd00      	ble.n	8001926 <__aeabi_dmul+0x3ce>
 8001924:	e676      	b.n	8001614 <__aeabi_dmul+0xbc>
 8001926:	281f      	cmp	r0, #31
 8001928:	dd5b      	ble.n	80019e2 <__aeabi_dmul+0x48a>
 800192a:	221f      	movs	r2, #31
 800192c:	0023      	movs	r3, r4
 800192e:	4252      	negs	r2, r2
 8001930:	1a51      	subs	r1, r2, r1
 8001932:	40cb      	lsrs	r3, r1
 8001934:	0019      	movs	r1, r3
 8001936:	2820      	cmp	r0, #32
 8001938:	d003      	beq.n	8001942 <__aeabi_dmul+0x3ea>
 800193a:	4a3b      	ldr	r2, [pc, #236]	; (8001a28 <__aeabi_dmul+0x4d0>)
 800193c:	4462      	add	r2, ip
 800193e:	4094      	lsls	r4, r2
 8001940:	4325      	orrs	r5, r4
 8001942:	1e6a      	subs	r2, r5, #1
 8001944:	4195      	sbcs	r5, r2
 8001946:	002a      	movs	r2, r5
 8001948:	430a      	orrs	r2, r1
 800194a:	2107      	movs	r1, #7
 800194c:	000d      	movs	r5, r1
 800194e:	2400      	movs	r4, #0
 8001950:	4015      	ands	r5, r2
 8001952:	4211      	tst	r1, r2
 8001954:	d05b      	beq.n	8001a0e <__aeabi_dmul+0x4b6>
 8001956:	210f      	movs	r1, #15
 8001958:	2400      	movs	r4, #0
 800195a:	4011      	ands	r1, r2
 800195c:	2904      	cmp	r1, #4
 800195e:	d053      	beq.n	8001a08 <__aeabi_dmul+0x4b0>
 8001960:	1d11      	adds	r1, r2, #4
 8001962:	4291      	cmp	r1, r2
 8001964:	4192      	sbcs	r2, r2
 8001966:	4252      	negs	r2, r2
 8001968:	18a4      	adds	r4, r4, r2
 800196a:	000a      	movs	r2, r1
 800196c:	0223      	lsls	r3, r4, #8
 800196e:	d54b      	bpl.n	8001a08 <__aeabi_dmul+0x4b0>
 8001970:	2201      	movs	r2, #1
 8001972:	2400      	movs	r4, #0
 8001974:	2500      	movs	r5, #0
 8001976:	e650      	b.n	800161a <__aeabi_dmul+0xc2>
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	031b      	lsls	r3, r3, #12
 800197c:	421c      	tst	r4, r3
 800197e:	d009      	beq.n	8001994 <__aeabi_dmul+0x43c>
 8001980:	421e      	tst	r6, r3
 8001982:	d107      	bne.n	8001994 <__aeabi_dmul+0x43c>
 8001984:	4333      	orrs	r3, r6
 8001986:	031c      	lsls	r4, r3, #12
 8001988:	4643      	mov	r3, r8
 800198a:	0015      	movs	r5, r2
 800198c:	0b24      	lsrs	r4, r4, #12
 800198e:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	e642      	b.n	800161a <__aeabi_dmul+0xc2>
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	0312      	lsls	r2, r2, #12
 8001998:	4314      	orrs	r4, r2
 800199a:	0324      	lsls	r4, r4, #12
 800199c:	4a21      	ldr	r2, [pc, #132]	; (8001a24 <__aeabi_dmul+0x4cc>)
 800199e:	0b24      	lsrs	r4, r4, #12
 80019a0:	9701      	str	r7, [sp, #4]
 80019a2:	e63a      	b.n	800161a <__aeabi_dmul+0xc2>
 80019a4:	f000 fd50 	bl	8002448 <__clzsi2>
 80019a8:	0001      	movs	r1, r0
 80019aa:	0002      	movs	r2, r0
 80019ac:	3115      	adds	r1, #21
 80019ae:	3220      	adds	r2, #32
 80019b0:	291c      	cmp	r1, #28
 80019b2:	dc00      	bgt.n	80019b6 <__aeabi_dmul+0x45e>
 80019b4:	e74b      	b.n	800184e <__aeabi_dmul+0x2f6>
 80019b6:	0034      	movs	r4, r6
 80019b8:	3808      	subs	r0, #8
 80019ba:	2500      	movs	r5, #0
 80019bc:	4084      	lsls	r4, r0
 80019be:	e750      	b.n	8001862 <__aeabi_dmul+0x30a>
 80019c0:	f000 fd42 	bl	8002448 <__clzsi2>
 80019c4:	0003      	movs	r3, r0
 80019c6:	001a      	movs	r2, r3
 80019c8:	3215      	adds	r2, #21
 80019ca:	3020      	adds	r0, #32
 80019cc:	2a1c      	cmp	r2, #28
 80019ce:	dc00      	bgt.n	80019d2 <__aeabi_dmul+0x47a>
 80019d0:	e71e      	b.n	8001810 <__aeabi_dmul+0x2b8>
 80019d2:	4656      	mov	r6, sl
 80019d4:	3b08      	subs	r3, #8
 80019d6:	2200      	movs	r2, #0
 80019d8:	409e      	lsls	r6, r3
 80019da:	e723      	b.n	8001824 <__aeabi_dmul+0x2cc>
 80019dc:	9b00      	ldr	r3, [sp, #0]
 80019de:	469c      	mov	ip, r3
 80019e0:	e6e6      	b.n	80017b0 <__aeabi_dmul+0x258>
 80019e2:	4912      	ldr	r1, [pc, #72]	; (8001a2c <__aeabi_dmul+0x4d4>)
 80019e4:	0022      	movs	r2, r4
 80019e6:	4461      	add	r1, ip
 80019e8:	002e      	movs	r6, r5
 80019ea:	408d      	lsls	r5, r1
 80019ec:	408a      	lsls	r2, r1
 80019ee:	40c6      	lsrs	r6, r0
 80019f0:	1e69      	subs	r1, r5, #1
 80019f2:	418d      	sbcs	r5, r1
 80019f4:	4332      	orrs	r2, r6
 80019f6:	432a      	orrs	r2, r5
 80019f8:	40c4      	lsrs	r4, r0
 80019fa:	0753      	lsls	r3, r2, #29
 80019fc:	d0b6      	beq.n	800196c <__aeabi_dmul+0x414>
 80019fe:	210f      	movs	r1, #15
 8001a00:	4011      	ands	r1, r2
 8001a02:	2904      	cmp	r1, #4
 8001a04:	d1ac      	bne.n	8001960 <__aeabi_dmul+0x408>
 8001a06:	e7b1      	b.n	800196c <__aeabi_dmul+0x414>
 8001a08:	0765      	lsls	r5, r4, #29
 8001a0a:	0264      	lsls	r4, r4, #9
 8001a0c:	0b24      	lsrs	r4, r4, #12
 8001a0e:	08d2      	lsrs	r2, r2, #3
 8001a10:	4315      	orrs	r5, r2
 8001a12:	2200      	movs	r2, #0
 8001a14:	e601      	b.n	800161a <__aeabi_dmul+0xc2>
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	0312      	lsls	r2, r2, #12
 8001a1a:	4314      	orrs	r4, r2
 8001a1c:	0324      	lsls	r4, r4, #12
 8001a1e:	4a01      	ldr	r2, [pc, #4]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001a20:	0b24      	lsrs	r4, r4, #12
 8001a22:	e5fa      	b.n	800161a <__aeabi_dmul+0xc2>
 8001a24:	000007ff 	.word	0x000007ff
 8001a28:	0000043e 	.word	0x0000043e
 8001a2c:	0000041e 	.word	0x0000041e

08001a30 <__aeabi_dsub>:
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a32:	4657      	mov	r7, sl
 8001a34:	464e      	mov	r6, r9
 8001a36:	4645      	mov	r5, r8
 8001a38:	46de      	mov	lr, fp
 8001a3a:	b5e0      	push	{r5, r6, r7, lr}
 8001a3c:	001e      	movs	r6, r3
 8001a3e:	0017      	movs	r7, r2
 8001a40:	004a      	lsls	r2, r1, #1
 8001a42:	030b      	lsls	r3, r1, #12
 8001a44:	0d52      	lsrs	r2, r2, #21
 8001a46:	0a5b      	lsrs	r3, r3, #9
 8001a48:	4690      	mov	r8, r2
 8001a4a:	0f42      	lsrs	r2, r0, #29
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	0fcd      	lsrs	r5, r1, #31
 8001a50:	4ccd      	ldr	r4, [pc, #820]	; (8001d88 <__aeabi_dsub+0x358>)
 8001a52:	0331      	lsls	r1, r6, #12
 8001a54:	00c3      	lsls	r3, r0, #3
 8001a56:	4694      	mov	ip, r2
 8001a58:	0070      	lsls	r0, r6, #1
 8001a5a:	0f7a      	lsrs	r2, r7, #29
 8001a5c:	0a49      	lsrs	r1, r1, #9
 8001a5e:	00ff      	lsls	r7, r7, #3
 8001a60:	469a      	mov	sl, r3
 8001a62:	46b9      	mov	r9, r7
 8001a64:	0d40      	lsrs	r0, r0, #21
 8001a66:	0ff6      	lsrs	r6, r6, #31
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	42a0      	cmp	r0, r4
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0x40>
 8001a6e:	e0b1      	b.n	8001bd4 <__aeabi_dsub+0x1a4>
 8001a70:	2201      	movs	r2, #1
 8001a72:	4056      	eors	r6, r2
 8001a74:	46b3      	mov	fp, r6
 8001a76:	42b5      	cmp	r5, r6
 8001a78:	d100      	bne.n	8001a7c <__aeabi_dsub+0x4c>
 8001a7a:	e088      	b.n	8001b8e <__aeabi_dsub+0x15e>
 8001a7c:	4642      	mov	r2, r8
 8001a7e:	1a12      	subs	r2, r2, r0
 8001a80:	2a00      	cmp	r2, #0
 8001a82:	dc00      	bgt.n	8001a86 <__aeabi_dsub+0x56>
 8001a84:	e0ae      	b.n	8001be4 <__aeabi_dsub+0x1b4>
 8001a86:	2800      	cmp	r0, #0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x5c>
 8001a8a:	e0c1      	b.n	8001c10 <__aeabi_dsub+0x1e0>
 8001a8c:	48be      	ldr	r0, [pc, #760]	; (8001d88 <__aeabi_dsub+0x358>)
 8001a8e:	4580      	cmp	r8, r0
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dsub+0x64>
 8001a92:	e151      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001a94:	2080      	movs	r0, #128	; 0x80
 8001a96:	0400      	lsls	r0, r0, #16
 8001a98:	4301      	orrs	r1, r0
 8001a9a:	2a38      	cmp	r2, #56	; 0x38
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dsub+0x70>
 8001a9e:	e17b      	b.n	8001d98 <__aeabi_dsub+0x368>
 8001aa0:	2a1f      	cmp	r2, #31
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x76>
 8001aa4:	e1ee      	b.n	8001e84 <__aeabi_dsub+0x454>
 8001aa6:	2020      	movs	r0, #32
 8001aa8:	003e      	movs	r6, r7
 8001aaa:	1a80      	subs	r0, r0, r2
 8001aac:	000c      	movs	r4, r1
 8001aae:	40d6      	lsrs	r6, r2
 8001ab0:	40d1      	lsrs	r1, r2
 8001ab2:	4087      	lsls	r7, r0
 8001ab4:	4662      	mov	r2, ip
 8001ab6:	4084      	lsls	r4, r0
 8001ab8:	1a52      	subs	r2, r2, r1
 8001aba:	1e78      	subs	r0, r7, #1
 8001abc:	4187      	sbcs	r7, r0
 8001abe:	4694      	mov	ip, r2
 8001ac0:	4334      	orrs	r4, r6
 8001ac2:	4327      	orrs	r7, r4
 8001ac4:	1bdc      	subs	r4, r3, r7
 8001ac6:	42a3      	cmp	r3, r4
 8001ac8:	419b      	sbcs	r3, r3
 8001aca:	4662      	mov	r2, ip
 8001acc:	425b      	negs	r3, r3
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	4699      	mov	r9, r3
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	d400      	bmi.n	8001ada <__aeabi_dsub+0xaa>
 8001ad8:	e118      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001ada:	464b      	mov	r3, r9
 8001adc:	0258      	lsls	r0, r3, #9
 8001ade:	0a43      	lsrs	r3, r0, #9
 8001ae0:	4699      	mov	r9, r3
 8001ae2:	464b      	mov	r3, r9
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dsub+0xba>
 8001ae8:	e137      	b.n	8001d5a <__aeabi_dsub+0x32a>
 8001aea:	4648      	mov	r0, r9
 8001aec:	f000 fcac 	bl	8002448 <__clzsi2>
 8001af0:	0001      	movs	r1, r0
 8001af2:	3908      	subs	r1, #8
 8001af4:	2320      	movs	r3, #32
 8001af6:	0022      	movs	r2, r4
 8001af8:	4648      	mov	r0, r9
 8001afa:	1a5b      	subs	r3, r3, r1
 8001afc:	40da      	lsrs	r2, r3
 8001afe:	4088      	lsls	r0, r1
 8001b00:	408c      	lsls	r4, r1
 8001b02:	4643      	mov	r3, r8
 8001b04:	4310      	orrs	r0, r2
 8001b06:	4588      	cmp	r8, r1
 8001b08:	dd00      	ble.n	8001b0c <__aeabi_dsub+0xdc>
 8001b0a:	e136      	b.n	8001d7a <__aeabi_dsub+0x34a>
 8001b0c:	1ac9      	subs	r1, r1, r3
 8001b0e:	1c4b      	adds	r3, r1, #1
 8001b10:	2b1f      	cmp	r3, #31
 8001b12:	dd00      	ble.n	8001b16 <__aeabi_dsub+0xe6>
 8001b14:	e0ea      	b.n	8001cec <__aeabi_dsub+0x2bc>
 8001b16:	2220      	movs	r2, #32
 8001b18:	0026      	movs	r6, r4
 8001b1a:	1ad2      	subs	r2, r2, r3
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	4094      	lsls	r4, r2
 8001b20:	40de      	lsrs	r6, r3
 8001b22:	40d8      	lsrs	r0, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4091      	lsls	r1, r2
 8001b28:	1e62      	subs	r2, r4, #1
 8001b2a:	4194      	sbcs	r4, r2
 8001b2c:	4681      	mov	r9, r0
 8001b2e:	4698      	mov	r8, r3
 8001b30:	4331      	orrs	r1, r6
 8001b32:	430c      	orrs	r4, r1
 8001b34:	0763      	lsls	r3, r4, #29
 8001b36:	d009      	beq.n	8001b4c <__aeabi_dsub+0x11c>
 8001b38:	230f      	movs	r3, #15
 8001b3a:	4023      	ands	r3, r4
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d005      	beq.n	8001b4c <__aeabi_dsub+0x11c>
 8001b40:	1d23      	adds	r3, r4, #4
 8001b42:	42a3      	cmp	r3, r4
 8001b44:	41a4      	sbcs	r4, r4
 8001b46:	4264      	negs	r4, r4
 8001b48:	44a1      	add	r9, r4
 8001b4a:	001c      	movs	r4, r3
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	d400      	bmi.n	8001b54 <__aeabi_dsub+0x124>
 8001b52:	e0de      	b.n	8001d12 <__aeabi_dsub+0x2e2>
 8001b54:	4641      	mov	r1, r8
 8001b56:	4b8c      	ldr	r3, [pc, #560]	; (8001d88 <__aeabi_dsub+0x358>)
 8001b58:	3101      	adds	r1, #1
 8001b5a:	4299      	cmp	r1, r3
 8001b5c:	d100      	bne.n	8001b60 <__aeabi_dsub+0x130>
 8001b5e:	e0e7      	b.n	8001d30 <__aeabi_dsub+0x300>
 8001b60:	464b      	mov	r3, r9
 8001b62:	488a      	ldr	r0, [pc, #552]	; (8001d8c <__aeabi_dsub+0x35c>)
 8001b64:	08e4      	lsrs	r4, r4, #3
 8001b66:	4003      	ands	r3, r0
 8001b68:	0018      	movs	r0, r3
 8001b6a:	0549      	lsls	r1, r1, #21
 8001b6c:	075b      	lsls	r3, r3, #29
 8001b6e:	0240      	lsls	r0, r0, #9
 8001b70:	4323      	orrs	r3, r4
 8001b72:	0d4a      	lsrs	r2, r1, #21
 8001b74:	0b04      	lsrs	r4, r0, #12
 8001b76:	0512      	lsls	r2, r2, #20
 8001b78:	07ed      	lsls	r5, r5, #31
 8001b7a:	4322      	orrs	r2, r4
 8001b7c:	432a      	orrs	r2, r5
 8001b7e:	0018      	movs	r0, r3
 8001b80:	0011      	movs	r1, r2
 8001b82:	bcf0      	pop	{r4, r5, r6, r7}
 8001b84:	46bb      	mov	fp, r7
 8001b86:	46b2      	mov	sl, r6
 8001b88:	46a9      	mov	r9, r5
 8001b8a:	46a0      	mov	r8, r4
 8001b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b8e:	4642      	mov	r2, r8
 8001b90:	1a12      	subs	r2, r2, r0
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	dd52      	ble.n	8001c3c <__aeabi_dsub+0x20c>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x16c>
 8001b9a:	e09c      	b.n	8001cd6 <__aeabi_dsub+0x2a6>
 8001b9c:	45a0      	cmp	r8, r4
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0x172>
 8001ba0:	e0ca      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001ba2:	2080      	movs	r0, #128	; 0x80
 8001ba4:	0400      	lsls	r0, r0, #16
 8001ba6:	4301      	orrs	r1, r0
 8001ba8:	2a38      	cmp	r2, #56	; 0x38
 8001baa:	dd00      	ble.n	8001bae <__aeabi_dsub+0x17e>
 8001bac:	e149      	b.n	8001e42 <__aeabi_dsub+0x412>
 8001bae:	2a1f      	cmp	r2, #31
 8001bb0:	dc00      	bgt.n	8001bb4 <__aeabi_dsub+0x184>
 8001bb2:	e197      	b.n	8001ee4 <__aeabi_dsub+0x4b4>
 8001bb4:	0010      	movs	r0, r2
 8001bb6:	000e      	movs	r6, r1
 8001bb8:	3820      	subs	r0, #32
 8001bba:	40c6      	lsrs	r6, r0
 8001bbc:	2a20      	cmp	r2, #32
 8001bbe:	d004      	beq.n	8001bca <__aeabi_dsub+0x19a>
 8001bc0:	2040      	movs	r0, #64	; 0x40
 8001bc2:	1a82      	subs	r2, r0, r2
 8001bc4:	4091      	lsls	r1, r2
 8001bc6:	430f      	orrs	r7, r1
 8001bc8:	46b9      	mov	r9, r7
 8001bca:	464c      	mov	r4, r9
 8001bcc:	1e62      	subs	r2, r4, #1
 8001bce:	4194      	sbcs	r4, r2
 8001bd0:	4334      	orrs	r4, r6
 8001bd2:	e13a      	b.n	8001e4a <__aeabi_dsub+0x41a>
 8001bd4:	000a      	movs	r2, r1
 8001bd6:	433a      	orrs	r2, r7
 8001bd8:	d028      	beq.n	8001c2c <__aeabi_dsub+0x1fc>
 8001bda:	46b3      	mov	fp, r6
 8001bdc:	42b5      	cmp	r5, r6
 8001bde:	d02b      	beq.n	8001c38 <__aeabi_dsub+0x208>
 8001be0:	4a6b      	ldr	r2, [pc, #428]	; (8001d90 <__aeabi_dsub+0x360>)
 8001be2:	4442      	add	r2, r8
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	d05d      	beq.n	8001ca4 <__aeabi_dsub+0x274>
 8001be8:	4642      	mov	r2, r8
 8001bea:	4644      	mov	r4, r8
 8001bec:	1a82      	subs	r2, r0, r2
 8001bee:	2c00      	cmp	r4, #0
 8001bf0:	d000      	beq.n	8001bf4 <__aeabi_dsub+0x1c4>
 8001bf2:	e0f5      	b.n	8001de0 <__aeabi_dsub+0x3b0>
 8001bf4:	4665      	mov	r5, ip
 8001bf6:	431d      	orrs	r5, r3
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x1cc>
 8001bfa:	e19c      	b.n	8001f36 <__aeabi_dsub+0x506>
 8001bfc:	1e55      	subs	r5, r2, #1
 8001bfe:	2a01      	cmp	r2, #1
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x1d4>
 8001c02:	e1fb      	b.n	8001ffc <__aeabi_dsub+0x5cc>
 8001c04:	4c60      	ldr	r4, [pc, #384]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c06:	42a2      	cmp	r2, r4
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x1dc>
 8001c0a:	e1bd      	b.n	8001f88 <__aeabi_dsub+0x558>
 8001c0c:	002a      	movs	r2, r5
 8001c0e:	e0f0      	b.n	8001df2 <__aeabi_dsub+0x3c2>
 8001c10:	0008      	movs	r0, r1
 8001c12:	4338      	orrs	r0, r7
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x1e8>
 8001c16:	e0c3      	b.n	8001da0 <__aeabi_dsub+0x370>
 8001c18:	1e50      	subs	r0, r2, #1
 8001c1a:	2a01      	cmp	r2, #1
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x1f0>
 8001c1e:	e1a8      	b.n	8001f72 <__aeabi_dsub+0x542>
 8001c20:	4c59      	ldr	r4, [pc, #356]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c22:	42a2      	cmp	r2, r4
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dsub+0x1f8>
 8001c26:	e087      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	e736      	b.n	8001a9a <__aeabi_dsub+0x6a>
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4056      	eors	r6, r2
 8001c30:	46b3      	mov	fp, r6
 8001c32:	42b5      	cmp	r5, r6
 8001c34:	d000      	beq.n	8001c38 <__aeabi_dsub+0x208>
 8001c36:	e721      	b.n	8001a7c <__aeabi_dsub+0x4c>
 8001c38:	4a55      	ldr	r2, [pc, #340]	; (8001d90 <__aeabi_dsub+0x360>)
 8001c3a:	4442      	add	r2, r8
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x212>
 8001c40:	e0b5      	b.n	8001dae <__aeabi_dsub+0x37e>
 8001c42:	4642      	mov	r2, r8
 8001c44:	4644      	mov	r4, r8
 8001c46:	1a82      	subs	r2, r0, r2
 8001c48:	2c00      	cmp	r4, #0
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dsub+0x21e>
 8001c4c:	e138      	b.n	8001ec0 <__aeabi_dsub+0x490>
 8001c4e:	4e4e      	ldr	r6, [pc, #312]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c50:	42b0      	cmp	r0, r6
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x226>
 8001c54:	e1de      	b.n	8002014 <__aeabi_dsub+0x5e4>
 8001c56:	2680      	movs	r6, #128	; 0x80
 8001c58:	4664      	mov	r4, ip
 8001c5a:	0436      	lsls	r6, r6, #16
 8001c5c:	4334      	orrs	r4, r6
 8001c5e:	46a4      	mov	ip, r4
 8001c60:	2a38      	cmp	r2, #56	; 0x38
 8001c62:	dd00      	ble.n	8001c66 <__aeabi_dsub+0x236>
 8001c64:	e196      	b.n	8001f94 <__aeabi_dsub+0x564>
 8001c66:	2a1f      	cmp	r2, #31
 8001c68:	dd00      	ble.n	8001c6c <__aeabi_dsub+0x23c>
 8001c6a:	e224      	b.n	80020b6 <__aeabi_dsub+0x686>
 8001c6c:	2620      	movs	r6, #32
 8001c6e:	1ab4      	subs	r4, r6, r2
 8001c70:	46a2      	mov	sl, r4
 8001c72:	4664      	mov	r4, ip
 8001c74:	4656      	mov	r6, sl
 8001c76:	40b4      	lsls	r4, r6
 8001c78:	46a1      	mov	r9, r4
 8001c7a:	001c      	movs	r4, r3
 8001c7c:	464e      	mov	r6, r9
 8001c7e:	40d4      	lsrs	r4, r2
 8001c80:	4326      	orrs	r6, r4
 8001c82:	0034      	movs	r4, r6
 8001c84:	4656      	mov	r6, sl
 8001c86:	40b3      	lsls	r3, r6
 8001c88:	1e5e      	subs	r6, r3, #1
 8001c8a:	41b3      	sbcs	r3, r6
 8001c8c:	431c      	orrs	r4, r3
 8001c8e:	4663      	mov	r3, ip
 8001c90:	40d3      	lsrs	r3, r2
 8001c92:	18c9      	adds	r1, r1, r3
 8001c94:	19e4      	adds	r4, r4, r7
 8001c96:	42bc      	cmp	r4, r7
 8001c98:	41bf      	sbcs	r7, r7
 8001c9a:	427f      	negs	r7, r7
 8001c9c:	46b9      	mov	r9, r7
 8001c9e:	4680      	mov	r8, r0
 8001ca0:	4489      	add	r9, r1
 8001ca2:	e0d8      	b.n	8001e56 <__aeabi_dsub+0x426>
 8001ca4:	4640      	mov	r0, r8
 8001ca6:	4c3b      	ldr	r4, [pc, #236]	; (8001d94 <__aeabi_dsub+0x364>)
 8001ca8:	3001      	adds	r0, #1
 8001caa:	4220      	tst	r0, r4
 8001cac:	d000      	beq.n	8001cb0 <__aeabi_dsub+0x280>
 8001cae:	e0b4      	b.n	8001e1a <__aeabi_dsub+0x3ea>
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x288>
 8001cb6:	e144      	b.n	8001f42 <__aeabi_dsub+0x512>
 8001cb8:	4660      	mov	r0, ip
 8001cba:	4318      	orrs	r0, r3
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x290>
 8001cbe:	e190      	b.n	8001fe2 <__aeabi_dsub+0x5b2>
 8001cc0:	0008      	movs	r0, r1
 8001cc2:	4338      	orrs	r0, r7
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_dsub+0x298>
 8001cc6:	e1aa      	b.n	800201e <__aeabi_dsub+0x5ee>
 8001cc8:	4661      	mov	r1, ip
 8001cca:	08db      	lsrs	r3, r3, #3
 8001ccc:	0749      	lsls	r1, r1, #29
 8001cce:	430b      	orrs	r3, r1
 8001cd0:	4661      	mov	r1, ip
 8001cd2:	08cc      	lsrs	r4, r1, #3
 8001cd4:	e027      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001cd6:	0008      	movs	r0, r1
 8001cd8:	4338      	orrs	r0, r7
 8001cda:	d061      	beq.n	8001da0 <__aeabi_dsub+0x370>
 8001cdc:	1e50      	subs	r0, r2, #1
 8001cde:	2a01      	cmp	r2, #1
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x2b4>
 8001ce2:	e139      	b.n	8001f58 <__aeabi_dsub+0x528>
 8001ce4:	42a2      	cmp	r2, r4
 8001ce6:	d027      	beq.n	8001d38 <__aeabi_dsub+0x308>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	e75d      	b.n	8001ba8 <__aeabi_dsub+0x178>
 8001cec:	0002      	movs	r2, r0
 8001cee:	391f      	subs	r1, #31
 8001cf0:	40ca      	lsrs	r2, r1
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d003      	beq.n	8001d00 <__aeabi_dsub+0x2d0>
 8001cf8:	2240      	movs	r2, #64	; 0x40
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	4098      	lsls	r0, r3
 8001cfe:	4304      	orrs	r4, r0
 8001d00:	1e63      	subs	r3, r4, #1
 8001d02:	419c      	sbcs	r4, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	4699      	mov	r9, r3
 8001d08:	4698      	mov	r8, r3
 8001d0a:	430c      	orrs	r4, r1
 8001d0c:	0763      	lsls	r3, r4, #29
 8001d0e:	d000      	beq.n	8001d12 <__aeabi_dsub+0x2e2>
 8001d10:	e712      	b.n	8001b38 <__aeabi_dsub+0x108>
 8001d12:	464b      	mov	r3, r9
 8001d14:	464a      	mov	r2, r9
 8001d16:	08e4      	lsrs	r4, r4, #3
 8001d18:	075b      	lsls	r3, r3, #29
 8001d1a:	4323      	orrs	r3, r4
 8001d1c:	08d4      	lsrs	r4, r2, #3
 8001d1e:	4642      	mov	r2, r8
 8001d20:	4919      	ldr	r1, [pc, #100]	; (8001d88 <__aeabi_dsub+0x358>)
 8001d22:	428a      	cmp	r2, r1
 8001d24:	d00e      	beq.n	8001d44 <__aeabi_dsub+0x314>
 8001d26:	0324      	lsls	r4, r4, #12
 8001d28:	0552      	lsls	r2, r2, #21
 8001d2a:	0b24      	lsrs	r4, r4, #12
 8001d2c:	0d52      	lsrs	r2, r2, #21
 8001d2e:	e722      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d30:	000a      	movs	r2, r1
 8001d32:	2400      	movs	r4, #0
 8001d34:	2300      	movs	r3, #0
 8001d36:	e71e      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	4662      	mov	r2, ip
 8001d3c:	0752      	lsls	r2, r2, #29
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	4662      	mov	r2, ip
 8001d42:	08d4      	lsrs	r4, r2, #3
 8001d44:	001a      	movs	r2, r3
 8001d46:	4322      	orrs	r2, r4
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x31c>
 8001d4a:	e1fc      	b.n	8002146 <__aeabi_dsub+0x716>
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	0312      	lsls	r2, r2, #12
 8001d50:	4314      	orrs	r4, r2
 8001d52:	0324      	lsls	r4, r4, #12
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <__aeabi_dsub+0x358>)
 8001d56:	0b24      	lsrs	r4, r4, #12
 8001d58:	e70d      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d5a:	0020      	movs	r0, r4
 8001d5c:	f000 fb74 	bl	8002448 <__clzsi2>
 8001d60:	0001      	movs	r1, r0
 8001d62:	3118      	adds	r1, #24
 8001d64:	291f      	cmp	r1, #31
 8001d66:	dc00      	bgt.n	8001d6a <__aeabi_dsub+0x33a>
 8001d68:	e6c4      	b.n	8001af4 <__aeabi_dsub+0xc4>
 8001d6a:	3808      	subs	r0, #8
 8001d6c:	4084      	lsls	r4, r0
 8001d6e:	4643      	mov	r3, r8
 8001d70:	0020      	movs	r0, r4
 8001d72:	2400      	movs	r4, #0
 8001d74:	4588      	cmp	r8, r1
 8001d76:	dc00      	bgt.n	8001d7a <__aeabi_dsub+0x34a>
 8001d78:	e6c8      	b.n	8001b0c <__aeabi_dsub+0xdc>
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <__aeabi_dsub+0x35c>)
 8001d7c:	1a5b      	subs	r3, r3, r1
 8001d7e:	4010      	ands	r0, r2
 8001d80:	4698      	mov	r8, r3
 8001d82:	4681      	mov	r9, r0
 8001d84:	e6d6      	b.n	8001b34 <__aeabi_dsub+0x104>
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	000007ff 	.word	0x000007ff
 8001d8c:	ff7fffff 	.word	0xff7fffff
 8001d90:	fffff801 	.word	0xfffff801
 8001d94:	000007fe 	.word	0x000007fe
 8001d98:	430f      	orrs	r7, r1
 8001d9a:	1e7a      	subs	r2, r7, #1
 8001d9c:	4197      	sbcs	r7, r2
 8001d9e:	e691      	b.n	8001ac4 <__aeabi_dsub+0x94>
 8001da0:	4661      	mov	r1, ip
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	0749      	lsls	r1, r1, #29
 8001da6:	430b      	orrs	r3, r1
 8001da8:	4661      	mov	r1, ip
 8001daa:	08cc      	lsrs	r4, r1, #3
 8001dac:	e7b8      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8001dae:	4640      	mov	r0, r8
 8001db0:	4cd3      	ldr	r4, [pc, #844]	; (8002100 <__aeabi_dsub+0x6d0>)
 8001db2:	3001      	adds	r0, #1
 8001db4:	4220      	tst	r0, r4
 8001db6:	d000      	beq.n	8001dba <__aeabi_dsub+0x38a>
 8001db8:	e0a2      	b.n	8001f00 <__aeabi_dsub+0x4d0>
 8001dba:	4640      	mov	r0, r8
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d000      	beq.n	8001dc2 <__aeabi_dsub+0x392>
 8001dc0:	e101      	b.n	8001fc6 <__aeabi_dsub+0x596>
 8001dc2:	4660      	mov	r0, ip
 8001dc4:	4318      	orrs	r0, r3
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dsub+0x39a>
 8001dc8:	e15e      	b.n	8002088 <__aeabi_dsub+0x658>
 8001dca:	0008      	movs	r0, r1
 8001dcc:	4338      	orrs	r0, r7
 8001dce:	d000      	beq.n	8001dd2 <__aeabi_dsub+0x3a2>
 8001dd0:	e15f      	b.n	8002092 <__aeabi_dsub+0x662>
 8001dd2:	4661      	mov	r1, ip
 8001dd4:	08db      	lsrs	r3, r3, #3
 8001dd6:	0749      	lsls	r1, r1, #29
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	4661      	mov	r1, ip
 8001ddc:	08cc      	lsrs	r4, r1, #3
 8001dde:	e7a2      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001de0:	4dc8      	ldr	r5, [pc, #800]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001de2:	42a8      	cmp	r0, r5
 8001de4:	d100      	bne.n	8001de8 <__aeabi_dsub+0x3b8>
 8001de6:	e0cf      	b.n	8001f88 <__aeabi_dsub+0x558>
 8001de8:	2580      	movs	r5, #128	; 0x80
 8001dea:	4664      	mov	r4, ip
 8001dec:	042d      	lsls	r5, r5, #16
 8001dee:	432c      	orrs	r4, r5
 8001df0:	46a4      	mov	ip, r4
 8001df2:	2a38      	cmp	r2, #56	; 0x38
 8001df4:	dc56      	bgt.n	8001ea4 <__aeabi_dsub+0x474>
 8001df6:	2a1f      	cmp	r2, #31
 8001df8:	dd00      	ble.n	8001dfc <__aeabi_dsub+0x3cc>
 8001dfa:	e0d1      	b.n	8001fa0 <__aeabi_dsub+0x570>
 8001dfc:	2520      	movs	r5, #32
 8001dfe:	001e      	movs	r6, r3
 8001e00:	1aad      	subs	r5, r5, r2
 8001e02:	4664      	mov	r4, ip
 8001e04:	40ab      	lsls	r3, r5
 8001e06:	40ac      	lsls	r4, r5
 8001e08:	40d6      	lsrs	r6, r2
 8001e0a:	1e5d      	subs	r5, r3, #1
 8001e0c:	41ab      	sbcs	r3, r5
 8001e0e:	4334      	orrs	r4, r6
 8001e10:	4323      	orrs	r3, r4
 8001e12:	4664      	mov	r4, ip
 8001e14:	40d4      	lsrs	r4, r2
 8001e16:	1b09      	subs	r1, r1, r4
 8001e18:	e049      	b.n	8001eae <__aeabi_dsub+0x47e>
 8001e1a:	4660      	mov	r0, ip
 8001e1c:	1bdc      	subs	r4, r3, r7
 8001e1e:	1a46      	subs	r6, r0, r1
 8001e20:	42a3      	cmp	r3, r4
 8001e22:	4180      	sbcs	r0, r0
 8001e24:	4240      	negs	r0, r0
 8001e26:	4681      	mov	r9, r0
 8001e28:	0030      	movs	r0, r6
 8001e2a:	464e      	mov	r6, r9
 8001e2c:	1b80      	subs	r0, r0, r6
 8001e2e:	4681      	mov	r9, r0
 8001e30:	0200      	lsls	r0, r0, #8
 8001e32:	d476      	bmi.n	8001f22 <__aeabi_dsub+0x4f2>
 8001e34:	464b      	mov	r3, r9
 8001e36:	4323      	orrs	r3, r4
 8001e38:	d000      	beq.n	8001e3c <__aeabi_dsub+0x40c>
 8001e3a:	e652      	b.n	8001ae2 <__aeabi_dsub+0xb2>
 8001e3c:	2400      	movs	r4, #0
 8001e3e:	2500      	movs	r5, #0
 8001e40:	e771      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001e42:	4339      	orrs	r1, r7
 8001e44:	000c      	movs	r4, r1
 8001e46:	1e62      	subs	r2, r4, #1
 8001e48:	4194      	sbcs	r4, r2
 8001e4a:	18e4      	adds	r4, r4, r3
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	419b      	sbcs	r3, r3
 8001e50:	425b      	negs	r3, r3
 8001e52:	4463      	add	r3, ip
 8001e54:	4699      	mov	r9, r3
 8001e56:	464b      	mov	r3, r9
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x42e>
 8001e5c:	e756      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	469c      	mov	ip, r3
 8001e62:	4ba8      	ldr	r3, [pc, #672]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001e64:	44e0      	add	r8, ip
 8001e66:	4598      	cmp	r8, r3
 8001e68:	d038      	beq.n	8001edc <__aeabi_dsub+0x4ac>
 8001e6a:	464b      	mov	r3, r9
 8001e6c:	48a6      	ldr	r0, [pc, #664]	; (8002108 <__aeabi_dsub+0x6d8>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4003      	ands	r3, r0
 8001e72:	0018      	movs	r0, r3
 8001e74:	0863      	lsrs	r3, r4, #1
 8001e76:	4014      	ands	r4, r2
 8001e78:	431c      	orrs	r4, r3
 8001e7a:	07c3      	lsls	r3, r0, #31
 8001e7c:	431c      	orrs	r4, r3
 8001e7e:	0843      	lsrs	r3, r0, #1
 8001e80:	4699      	mov	r9, r3
 8001e82:	e657      	b.n	8001b34 <__aeabi_dsub+0x104>
 8001e84:	0010      	movs	r0, r2
 8001e86:	000e      	movs	r6, r1
 8001e88:	3820      	subs	r0, #32
 8001e8a:	40c6      	lsrs	r6, r0
 8001e8c:	2a20      	cmp	r2, #32
 8001e8e:	d004      	beq.n	8001e9a <__aeabi_dsub+0x46a>
 8001e90:	2040      	movs	r0, #64	; 0x40
 8001e92:	1a82      	subs	r2, r0, r2
 8001e94:	4091      	lsls	r1, r2
 8001e96:	430f      	orrs	r7, r1
 8001e98:	46b9      	mov	r9, r7
 8001e9a:	464f      	mov	r7, r9
 8001e9c:	1e7a      	subs	r2, r7, #1
 8001e9e:	4197      	sbcs	r7, r2
 8001ea0:	4337      	orrs	r7, r6
 8001ea2:	e60f      	b.n	8001ac4 <__aeabi_dsub+0x94>
 8001ea4:	4662      	mov	r2, ip
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	1e5a      	subs	r2, r3, #1
 8001eac:	4193      	sbcs	r3, r2
 8001eae:	1afc      	subs	r4, r7, r3
 8001eb0:	42a7      	cmp	r7, r4
 8001eb2:	41bf      	sbcs	r7, r7
 8001eb4:	427f      	negs	r7, r7
 8001eb6:	1bcb      	subs	r3, r1, r7
 8001eb8:	4699      	mov	r9, r3
 8001eba:	465d      	mov	r5, fp
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	e608      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8001ec0:	4666      	mov	r6, ip
 8001ec2:	431e      	orrs	r6, r3
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x498>
 8001ec6:	e0be      	b.n	8002046 <__aeabi_dsub+0x616>
 8001ec8:	1e56      	subs	r6, r2, #1
 8001eca:	2a01      	cmp	r2, #1
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dsub+0x4a0>
 8001ece:	e109      	b.n	80020e4 <__aeabi_dsub+0x6b4>
 8001ed0:	4c8c      	ldr	r4, [pc, #560]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001ed2:	42a2      	cmp	r2, r4
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_dsub+0x4a8>
 8001ed6:	e119      	b.n	800210c <__aeabi_dsub+0x6dc>
 8001ed8:	0032      	movs	r2, r6
 8001eda:	e6c1      	b.n	8001c60 <__aeabi_dsub+0x230>
 8001edc:	4642      	mov	r2, r8
 8001ede:	2400      	movs	r4, #0
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e648      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001ee4:	2020      	movs	r0, #32
 8001ee6:	000c      	movs	r4, r1
 8001ee8:	1a80      	subs	r0, r0, r2
 8001eea:	003e      	movs	r6, r7
 8001eec:	4087      	lsls	r7, r0
 8001eee:	4084      	lsls	r4, r0
 8001ef0:	40d6      	lsrs	r6, r2
 8001ef2:	1e78      	subs	r0, r7, #1
 8001ef4:	4187      	sbcs	r7, r0
 8001ef6:	40d1      	lsrs	r1, r2
 8001ef8:	4334      	orrs	r4, r6
 8001efa:	433c      	orrs	r4, r7
 8001efc:	448c      	add	ip, r1
 8001efe:	e7a4      	b.n	8001e4a <__aeabi_dsub+0x41a>
 8001f00:	4a80      	ldr	r2, [pc, #512]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001f02:	4290      	cmp	r0, r2
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x4d8>
 8001f06:	e0e9      	b.n	80020dc <__aeabi_dsub+0x6ac>
 8001f08:	19df      	adds	r7, r3, r7
 8001f0a:	429f      	cmp	r7, r3
 8001f0c:	419b      	sbcs	r3, r3
 8001f0e:	4461      	add	r1, ip
 8001f10:	425b      	negs	r3, r3
 8001f12:	18c9      	adds	r1, r1, r3
 8001f14:	07cc      	lsls	r4, r1, #31
 8001f16:	087f      	lsrs	r7, r7, #1
 8001f18:	084b      	lsrs	r3, r1, #1
 8001f1a:	4699      	mov	r9, r3
 8001f1c:	4680      	mov	r8, r0
 8001f1e:	433c      	orrs	r4, r7
 8001f20:	e6f4      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001f22:	1afc      	subs	r4, r7, r3
 8001f24:	42a7      	cmp	r7, r4
 8001f26:	41bf      	sbcs	r7, r7
 8001f28:	4663      	mov	r3, ip
 8001f2a:	427f      	negs	r7, r7
 8001f2c:	1ac9      	subs	r1, r1, r3
 8001f2e:	1bcb      	subs	r3, r1, r7
 8001f30:	4699      	mov	r9, r3
 8001f32:	465d      	mov	r5, fp
 8001f34:	e5d5      	b.n	8001ae2 <__aeabi_dsub+0xb2>
 8001f36:	08ff      	lsrs	r7, r7, #3
 8001f38:	074b      	lsls	r3, r1, #29
 8001f3a:	465d      	mov	r5, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	08cc      	lsrs	r4, r1, #3
 8001f40:	e6ee      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8001f42:	4662      	mov	r2, ip
 8001f44:	431a      	orrs	r2, r3
 8001f46:	d000      	beq.n	8001f4a <__aeabi_dsub+0x51a>
 8001f48:	e082      	b.n	8002050 <__aeabi_dsub+0x620>
 8001f4a:	000b      	movs	r3, r1
 8001f4c:	433b      	orrs	r3, r7
 8001f4e:	d11b      	bne.n	8001f88 <__aeabi_dsub+0x558>
 8001f50:	2480      	movs	r4, #128	; 0x80
 8001f52:	2500      	movs	r5, #0
 8001f54:	0324      	lsls	r4, r4, #12
 8001f56:	e6f9      	b.n	8001d4c <__aeabi_dsub+0x31c>
 8001f58:	19dc      	adds	r4, r3, r7
 8001f5a:	429c      	cmp	r4, r3
 8001f5c:	419b      	sbcs	r3, r3
 8001f5e:	4461      	add	r1, ip
 8001f60:	4689      	mov	r9, r1
 8001f62:	425b      	negs	r3, r3
 8001f64:	4499      	add	r9, r3
 8001f66:	464b      	mov	r3, r9
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	d444      	bmi.n	8001ff6 <__aeabi_dsub+0x5c6>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	4698      	mov	r8, r3
 8001f70:	e6cc      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001f72:	1bdc      	subs	r4, r3, r7
 8001f74:	4662      	mov	r2, ip
 8001f76:	42a3      	cmp	r3, r4
 8001f78:	419b      	sbcs	r3, r3
 8001f7a:	1a51      	subs	r1, r2, r1
 8001f7c:	425b      	negs	r3, r3
 8001f7e:	1acb      	subs	r3, r1, r3
 8001f80:	4699      	mov	r9, r3
 8001f82:	2301      	movs	r3, #1
 8001f84:	4698      	mov	r8, r3
 8001f86:	e5a4      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8001f88:	08ff      	lsrs	r7, r7, #3
 8001f8a:	074b      	lsls	r3, r1, #29
 8001f8c:	465d      	mov	r5, fp
 8001f8e:	433b      	orrs	r3, r7
 8001f90:	08cc      	lsrs	r4, r1, #3
 8001f92:	e6d7      	b.n	8001d44 <__aeabi_dsub+0x314>
 8001f94:	4662      	mov	r2, ip
 8001f96:	431a      	orrs	r2, r3
 8001f98:	0014      	movs	r4, r2
 8001f9a:	1e63      	subs	r3, r4, #1
 8001f9c:	419c      	sbcs	r4, r3
 8001f9e:	e679      	b.n	8001c94 <__aeabi_dsub+0x264>
 8001fa0:	0015      	movs	r5, r2
 8001fa2:	4664      	mov	r4, ip
 8001fa4:	3d20      	subs	r5, #32
 8001fa6:	40ec      	lsrs	r4, r5
 8001fa8:	46a0      	mov	r8, r4
 8001faa:	2a20      	cmp	r2, #32
 8001fac:	d005      	beq.n	8001fba <__aeabi_dsub+0x58a>
 8001fae:	2540      	movs	r5, #64	; 0x40
 8001fb0:	4664      	mov	r4, ip
 8001fb2:	1aaa      	subs	r2, r5, r2
 8001fb4:	4094      	lsls	r4, r2
 8001fb6:	4323      	orrs	r3, r4
 8001fb8:	469a      	mov	sl, r3
 8001fba:	4654      	mov	r4, sl
 8001fbc:	1e63      	subs	r3, r4, #1
 8001fbe:	419c      	sbcs	r4, r3
 8001fc0:	4643      	mov	r3, r8
 8001fc2:	4323      	orrs	r3, r4
 8001fc4:	e773      	b.n	8001eae <__aeabi_dsub+0x47e>
 8001fc6:	4662      	mov	r2, ip
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	d023      	beq.n	8002014 <__aeabi_dsub+0x5e4>
 8001fcc:	000a      	movs	r2, r1
 8001fce:	433a      	orrs	r2, r7
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x5a4>
 8001fd2:	e0a0      	b.n	8002116 <__aeabi_dsub+0x6e6>
 8001fd4:	4662      	mov	r2, ip
 8001fd6:	08db      	lsrs	r3, r3, #3
 8001fd8:	0752      	lsls	r2, r2, #29
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	4662      	mov	r2, ip
 8001fde:	08d4      	lsrs	r4, r2, #3
 8001fe0:	e6b0      	b.n	8001d44 <__aeabi_dsub+0x314>
 8001fe2:	000b      	movs	r3, r1
 8001fe4:	433b      	orrs	r3, r7
 8001fe6:	d100      	bne.n	8001fea <__aeabi_dsub+0x5ba>
 8001fe8:	e728      	b.n	8001e3c <__aeabi_dsub+0x40c>
 8001fea:	08ff      	lsrs	r7, r7, #3
 8001fec:	074b      	lsls	r3, r1, #29
 8001fee:	465d      	mov	r5, fp
 8001ff0:	433b      	orrs	r3, r7
 8001ff2:	08cc      	lsrs	r4, r1, #3
 8001ff4:	e697      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	4698      	mov	r8, r3
 8001ffa:	e736      	b.n	8001e6a <__aeabi_dsub+0x43a>
 8001ffc:	1afc      	subs	r4, r7, r3
 8001ffe:	42a7      	cmp	r7, r4
 8002000:	41bf      	sbcs	r7, r7
 8002002:	4663      	mov	r3, ip
 8002004:	427f      	negs	r7, r7
 8002006:	1ac9      	subs	r1, r1, r3
 8002008:	1bcb      	subs	r3, r1, r7
 800200a:	4699      	mov	r9, r3
 800200c:	2301      	movs	r3, #1
 800200e:	465d      	mov	r5, fp
 8002010:	4698      	mov	r8, r3
 8002012:	e55e      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8002014:	074b      	lsls	r3, r1, #29
 8002016:	08ff      	lsrs	r7, r7, #3
 8002018:	433b      	orrs	r3, r7
 800201a:	08cc      	lsrs	r4, r1, #3
 800201c:	e692      	b.n	8001d44 <__aeabi_dsub+0x314>
 800201e:	1bdc      	subs	r4, r3, r7
 8002020:	4660      	mov	r0, ip
 8002022:	42a3      	cmp	r3, r4
 8002024:	41b6      	sbcs	r6, r6
 8002026:	1a40      	subs	r0, r0, r1
 8002028:	4276      	negs	r6, r6
 800202a:	1b80      	subs	r0, r0, r6
 800202c:	4681      	mov	r9, r0
 800202e:	0200      	lsls	r0, r0, #8
 8002030:	d560      	bpl.n	80020f4 <__aeabi_dsub+0x6c4>
 8002032:	1afc      	subs	r4, r7, r3
 8002034:	42a7      	cmp	r7, r4
 8002036:	41bf      	sbcs	r7, r7
 8002038:	4663      	mov	r3, ip
 800203a:	427f      	negs	r7, r7
 800203c:	1ac9      	subs	r1, r1, r3
 800203e:	1bcb      	subs	r3, r1, r7
 8002040:	4699      	mov	r9, r3
 8002042:	465d      	mov	r5, fp
 8002044:	e576      	b.n	8001b34 <__aeabi_dsub+0x104>
 8002046:	08ff      	lsrs	r7, r7, #3
 8002048:	074b      	lsls	r3, r1, #29
 800204a:	433b      	orrs	r3, r7
 800204c:	08cc      	lsrs	r4, r1, #3
 800204e:	e667      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8002050:	000a      	movs	r2, r1
 8002052:	08db      	lsrs	r3, r3, #3
 8002054:	433a      	orrs	r2, r7
 8002056:	d100      	bne.n	800205a <__aeabi_dsub+0x62a>
 8002058:	e66f      	b.n	8001d3a <__aeabi_dsub+0x30a>
 800205a:	4662      	mov	r2, ip
 800205c:	0752      	lsls	r2, r2, #29
 800205e:	4313      	orrs	r3, r2
 8002060:	4662      	mov	r2, ip
 8002062:	08d4      	lsrs	r4, r2, #3
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	0312      	lsls	r2, r2, #12
 8002068:	4214      	tst	r4, r2
 800206a:	d007      	beq.n	800207c <__aeabi_dsub+0x64c>
 800206c:	08c8      	lsrs	r0, r1, #3
 800206e:	4210      	tst	r0, r2
 8002070:	d104      	bne.n	800207c <__aeabi_dsub+0x64c>
 8002072:	465d      	mov	r5, fp
 8002074:	0004      	movs	r4, r0
 8002076:	08fb      	lsrs	r3, r7, #3
 8002078:	0749      	lsls	r1, r1, #29
 800207a:	430b      	orrs	r3, r1
 800207c:	0f5a      	lsrs	r2, r3, #29
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	0752      	lsls	r2, r2, #29
 8002084:	4313      	orrs	r3, r2
 8002086:	e65d      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002088:	074b      	lsls	r3, r1, #29
 800208a:	08ff      	lsrs	r7, r7, #3
 800208c:	433b      	orrs	r3, r7
 800208e:	08cc      	lsrs	r4, r1, #3
 8002090:	e649      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8002092:	19dc      	adds	r4, r3, r7
 8002094:	429c      	cmp	r4, r3
 8002096:	419b      	sbcs	r3, r3
 8002098:	4461      	add	r1, ip
 800209a:	4689      	mov	r9, r1
 800209c:	425b      	negs	r3, r3
 800209e:	4499      	add	r9, r3
 80020a0:	464b      	mov	r3, r9
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	d400      	bmi.n	80020a8 <__aeabi_dsub+0x678>
 80020a6:	e631      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020a8:	464a      	mov	r2, r9
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <__aeabi_dsub+0x6d8>)
 80020ac:	401a      	ands	r2, r3
 80020ae:	2301      	movs	r3, #1
 80020b0:	4691      	mov	r9, r2
 80020b2:	4698      	mov	r8, r3
 80020b4:	e62a      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020b6:	0016      	movs	r6, r2
 80020b8:	4664      	mov	r4, ip
 80020ba:	3e20      	subs	r6, #32
 80020bc:	40f4      	lsrs	r4, r6
 80020be:	46a0      	mov	r8, r4
 80020c0:	2a20      	cmp	r2, #32
 80020c2:	d005      	beq.n	80020d0 <__aeabi_dsub+0x6a0>
 80020c4:	2640      	movs	r6, #64	; 0x40
 80020c6:	4664      	mov	r4, ip
 80020c8:	1ab2      	subs	r2, r6, r2
 80020ca:	4094      	lsls	r4, r2
 80020cc:	4323      	orrs	r3, r4
 80020ce:	469a      	mov	sl, r3
 80020d0:	4654      	mov	r4, sl
 80020d2:	1e63      	subs	r3, r4, #1
 80020d4:	419c      	sbcs	r4, r3
 80020d6:	4643      	mov	r3, r8
 80020d8:	431c      	orrs	r4, r3
 80020da:	e5db      	b.n	8001c94 <__aeabi_dsub+0x264>
 80020dc:	0002      	movs	r2, r0
 80020de:	2400      	movs	r4, #0
 80020e0:	2300      	movs	r3, #0
 80020e2:	e548      	b.n	8001b76 <__aeabi_dsub+0x146>
 80020e4:	19dc      	adds	r4, r3, r7
 80020e6:	42bc      	cmp	r4, r7
 80020e8:	41bf      	sbcs	r7, r7
 80020ea:	4461      	add	r1, ip
 80020ec:	4689      	mov	r9, r1
 80020ee:	427f      	negs	r7, r7
 80020f0:	44b9      	add	r9, r7
 80020f2:	e738      	b.n	8001f66 <__aeabi_dsub+0x536>
 80020f4:	464b      	mov	r3, r9
 80020f6:	4323      	orrs	r3, r4
 80020f8:	d100      	bne.n	80020fc <__aeabi_dsub+0x6cc>
 80020fa:	e69f      	b.n	8001e3c <__aeabi_dsub+0x40c>
 80020fc:	e606      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	000007fe 	.word	0x000007fe
 8002104:	000007ff 	.word	0x000007ff
 8002108:	ff7fffff 	.word	0xff7fffff
 800210c:	08ff      	lsrs	r7, r7, #3
 800210e:	074b      	lsls	r3, r1, #29
 8002110:	433b      	orrs	r3, r7
 8002112:	08cc      	lsrs	r4, r1, #3
 8002114:	e616      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002116:	4662      	mov	r2, ip
 8002118:	08db      	lsrs	r3, r3, #3
 800211a:	0752      	lsls	r2, r2, #29
 800211c:	4313      	orrs	r3, r2
 800211e:	4662      	mov	r2, ip
 8002120:	08d4      	lsrs	r4, r2, #3
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	0312      	lsls	r2, r2, #12
 8002126:	4214      	tst	r4, r2
 8002128:	d007      	beq.n	800213a <__aeabi_dsub+0x70a>
 800212a:	08c8      	lsrs	r0, r1, #3
 800212c:	4210      	tst	r0, r2
 800212e:	d104      	bne.n	800213a <__aeabi_dsub+0x70a>
 8002130:	465d      	mov	r5, fp
 8002132:	0004      	movs	r4, r0
 8002134:	08fb      	lsrs	r3, r7, #3
 8002136:	0749      	lsls	r1, r1, #29
 8002138:	430b      	orrs	r3, r1
 800213a:	0f5a      	lsrs	r2, r3, #29
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	0752      	lsls	r2, r2, #29
 8002140:	08db      	lsrs	r3, r3, #3
 8002142:	4313      	orrs	r3, r2
 8002144:	e5fe      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002146:	2300      	movs	r3, #0
 8002148:	4a01      	ldr	r2, [pc, #4]	; (8002150 <__aeabi_dsub+0x720>)
 800214a:	001c      	movs	r4, r3
 800214c:	e513      	b.n	8001b76 <__aeabi_dsub+0x146>
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	000007ff 	.word	0x000007ff

08002154 <__aeabi_dcmpun>:
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	0005      	movs	r5, r0
 8002158:	480c      	ldr	r0, [pc, #48]	; (800218c <__aeabi_dcmpun+0x38>)
 800215a:	031c      	lsls	r4, r3, #12
 800215c:	0016      	movs	r6, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	030a      	lsls	r2, r1, #12
 8002162:	0049      	lsls	r1, r1, #1
 8002164:	0b12      	lsrs	r2, r2, #12
 8002166:	0d49      	lsrs	r1, r1, #21
 8002168:	0b24      	lsrs	r4, r4, #12
 800216a:	0d5b      	lsrs	r3, r3, #21
 800216c:	4281      	cmp	r1, r0
 800216e:	d008      	beq.n	8002182 <__aeabi_dcmpun+0x2e>
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <__aeabi_dcmpun+0x38>)
 8002172:	2000      	movs	r0, #0
 8002174:	4293      	cmp	r3, r2
 8002176:	d103      	bne.n	8002180 <__aeabi_dcmpun+0x2c>
 8002178:	0020      	movs	r0, r4
 800217a:	4330      	orrs	r0, r6
 800217c:	1e43      	subs	r3, r0, #1
 800217e:	4198      	sbcs	r0, r3
 8002180:	bd70      	pop	{r4, r5, r6, pc}
 8002182:	2001      	movs	r0, #1
 8002184:	432a      	orrs	r2, r5
 8002186:	d1fb      	bne.n	8002180 <__aeabi_dcmpun+0x2c>
 8002188:	e7f2      	b.n	8002170 <__aeabi_dcmpun+0x1c>
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	000007ff 	.word	0x000007ff

08002190 <__aeabi_d2iz>:
 8002190:	000a      	movs	r2, r1
 8002192:	b530      	push	{r4, r5, lr}
 8002194:	4c13      	ldr	r4, [pc, #76]	; (80021e4 <__aeabi_d2iz+0x54>)
 8002196:	0053      	lsls	r3, r2, #1
 8002198:	0309      	lsls	r1, r1, #12
 800219a:	0005      	movs	r5, r0
 800219c:	0b09      	lsrs	r1, r1, #12
 800219e:	2000      	movs	r0, #0
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	0fd2      	lsrs	r2, r2, #31
 80021a4:	42a3      	cmp	r3, r4
 80021a6:	dd04      	ble.n	80021b2 <__aeabi_d2iz+0x22>
 80021a8:	480f      	ldr	r0, [pc, #60]	; (80021e8 <__aeabi_d2iz+0x58>)
 80021aa:	4283      	cmp	r3, r0
 80021ac:	dd02      	ble.n	80021b4 <__aeabi_d2iz+0x24>
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <__aeabi_d2iz+0x5c>)
 80021b0:	18d0      	adds	r0, r2, r3
 80021b2:	bd30      	pop	{r4, r5, pc}
 80021b4:	2080      	movs	r0, #128	; 0x80
 80021b6:	0340      	lsls	r0, r0, #13
 80021b8:	4301      	orrs	r1, r0
 80021ba:	480d      	ldr	r0, [pc, #52]	; (80021f0 <__aeabi_d2iz+0x60>)
 80021bc:	1ac0      	subs	r0, r0, r3
 80021be:	281f      	cmp	r0, #31
 80021c0:	dd08      	ble.n	80021d4 <__aeabi_d2iz+0x44>
 80021c2:	480c      	ldr	r0, [pc, #48]	; (80021f4 <__aeabi_d2iz+0x64>)
 80021c4:	1ac3      	subs	r3, r0, r3
 80021c6:	40d9      	lsrs	r1, r3
 80021c8:	000b      	movs	r3, r1
 80021ca:	4258      	negs	r0, r3
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	d1f0      	bne.n	80021b2 <__aeabi_d2iz+0x22>
 80021d0:	0018      	movs	r0, r3
 80021d2:	e7ee      	b.n	80021b2 <__aeabi_d2iz+0x22>
 80021d4:	4c08      	ldr	r4, [pc, #32]	; (80021f8 <__aeabi_d2iz+0x68>)
 80021d6:	40c5      	lsrs	r5, r0
 80021d8:	46a4      	mov	ip, r4
 80021da:	4463      	add	r3, ip
 80021dc:	4099      	lsls	r1, r3
 80021de:	000b      	movs	r3, r1
 80021e0:	432b      	orrs	r3, r5
 80021e2:	e7f2      	b.n	80021ca <__aeabi_d2iz+0x3a>
 80021e4:	000003fe 	.word	0x000003fe
 80021e8:	0000041d 	.word	0x0000041d
 80021ec:	7fffffff 	.word	0x7fffffff
 80021f0:	00000433 	.word	0x00000433
 80021f4:	00000413 	.word	0x00000413
 80021f8:	fffffbed 	.word	0xfffffbed

080021fc <__aeabi_i2d>:
 80021fc:	b570      	push	{r4, r5, r6, lr}
 80021fe:	2800      	cmp	r0, #0
 8002200:	d016      	beq.n	8002230 <__aeabi_i2d+0x34>
 8002202:	17c3      	asrs	r3, r0, #31
 8002204:	18c5      	adds	r5, r0, r3
 8002206:	405d      	eors	r5, r3
 8002208:	0fc4      	lsrs	r4, r0, #31
 800220a:	0028      	movs	r0, r5
 800220c:	f000 f91c 	bl	8002448 <__clzsi2>
 8002210:	4a11      	ldr	r2, [pc, #68]	; (8002258 <__aeabi_i2d+0x5c>)
 8002212:	1a12      	subs	r2, r2, r0
 8002214:	280a      	cmp	r0, #10
 8002216:	dc16      	bgt.n	8002246 <__aeabi_i2d+0x4a>
 8002218:	0003      	movs	r3, r0
 800221a:	002e      	movs	r6, r5
 800221c:	3315      	adds	r3, #21
 800221e:	409e      	lsls	r6, r3
 8002220:	230b      	movs	r3, #11
 8002222:	1a18      	subs	r0, r3, r0
 8002224:	40c5      	lsrs	r5, r0
 8002226:	0552      	lsls	r2, r2, #21
 8002228:	032d      	lsls	r5, r5, #12
 800222a:	0b2d      	lsrs	r5, r5, #12
 800222c:	0d53      	lsrs	r3, r2, #21
 800222e:	e003      	b.n	8002238 <__aeabi_i2d+0x3c>
 8002230:	2400      	movs	r4, #0
 8002232:	2300      	movs	r3, #0
 8002234:	2500      	movs	r5, #0
 8002236:	2600      	movs	r6, #0
 8002238:	051b      	lsls	r3, r3, #20
 800223a:	432b      	orrs	r3, r5
 800223c:	07e4      	lsls	r4, r4, #31
 800223e:	4323      	orrs	r3, r4
 8002240:	0030      	movs	r0, r6
 8002242:	0019      	movs	r1, r3
 8002244:	bd70      	pop	{r4, r5, r6, pc}
 8002246:	380b      	subs	r0, #11
 8002248:	4085      	lsls	r5, r0
 800224a:	0552      	lsls	r2, r2, #21
 800224c:	032d      	lsls	r5, r5, #12
 800224e:	2600      	movs	r6, #0
 8002250:	0b2d      	lsrs	r5, r5, #12
 8002252:	0d53      	lsrs	r3, r2, #21
 8002254:	e7f0      	b.n	8002238 <__aeabi_i2d+0x3c>
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	0000041e 	.word	0x0000041e

0800225c <__aeabi_ui2d>:
 800225c:	b510      	push	{r4, lr}
 800225e:	1e04      	subs	r4, r0, #0
 8002260:	d010      	beq.n	8002284 <__aeabi_ui2d+0x28>
 8002262:	f000 f8f1 	bl	8002448 <__clzsi2>
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <__aeabi_ui2d+0x48>)
 8002268:	1a1b      	subs	r3, r3, r0
 800226a:	280a      	cmp	r0, #10
 800226c:	dc11      	bgt.n	8002292 <__aeabi_ui2d+0x36>
 800226e:	220b      	movs	r2, #11
 8002270:	0021      	movs	r1, r4
 8002272:	1a12      	subs	r2, r2, r0
 8002274:	40d1      	lsrs	r1, r2
 8002276:	3015      	adds	r0, #21
 8002278:	030a      	lsls	r2, r1, #12
 800227a:	055b      	lsls	r3, r3, #21
 800227c:	4084      	lsls	r4, r0
 800227e:	0b12      	lsrs	r2, r2, #12
 8002280:	0d5b      	lsrs	r3, r3, #21
 8002282:	e001      	b.n	8002288 <__aeabi_ui2d+0x2c>
 8002284:	2300      	movs	r3, #0
 8002286:	2200      	movs	r2, #0
 8002288:	051b      	lsls	r3, r3, #20
 800228a:	4313      	orrs	r3, r2
 800228c:	0020      	movs	r0, r4
 800228e:	0019      	movs	r1, r3
 8002290:	bd10      	pop	{r4, pc}
 8002292:	0022      	movs	r2, r4
 8002294:	380b      	subs	r0, #11
 8002296:	4082      	lsls	r2, r0
 8002298:	055b      	lsls	r3, r3, #21
 800229a:	0312      	lsls	r2, r2, #12
 800229c:	2400      	movs	r4, #0
 800229e:	0b12      	lsrs	r2, r2, #12
 80022a0:	0d5b      	lsrs	r3, r3, #21
 80022a2:	e7f1      	b.n	8002288 <__aeabi_ui2d+0x2c>
 80022a4:	0000041e 	.word	0x0000041e

080022a8 <__aeabi_f2d>:
 80022a8:	b570      	push	{r4, r5, r6, lr}
 80022aa:	0043      	lsls	r3, r0, #1
 80022ac:	0246      	lsls	r6, r0, #9
 80022ae:	0fc4      	lsrs	r4, r0, #31
 80022b0:	20fe      	movs	r0, #254	; 0xfe
 80022b2:	0e1b      	lsrs	r3, r3, #24
 80022b4:	1c59      	adds	r1, r3, #1
 80022b6:	0a75      	lsrs	r5, r6, #9
 80022b8:	4208      	tst	r0, r1
 80022ba:	d00c      	beq.n	80022d6 <__aeabi_f2d+0x2e>
 80022bc:	22e0      	movs	r2, #224	; 0xe0
 80022be:	0092      	lsls	r2, r2, #2
 80022c0:	4694      	mov	ip, r2
 80022c2:	076d      	lsls	r5, r5, #29
 80022c4:	0b36      	lsrs	r6, r6, #12
 80022c6:	4463      	add	r3, ip
 80022c8:	051b      	lsls	r3, r3, #20
 80022ca:	4333      	orrs	r3, r6
 80022cc:	07e4      	lsls	r4, r4, #31
 80022ce:	4323      	orrs	r3, r4
 80022d0:	0028      	movs	r0, r5
 80022d2:	0019      	movs	r1, r3
 80022d4:	bd70      	pop	{r4, r5, r6, pc}
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d114      	bne.n	8002304 <__aeabi_f2d+0x5c>
 80022da:	2d00      	cmp	r5, #0
 80022dc:	d01b      	beq.n	8002316 <__aeabi_f2d+0x6e>
 80022de:	0028      	movs	r0, r5
 80022e0:	f000 f8b2 	bl	8002448 <__clzsi2>
 80022e4:	280a      	cmp	r0, #10
 80022e6:	dc1c      	bgt.n	8002322 <__aeabi_f2d+0x7a>
 80022e8:	230b      	movs	r3, #11
 80022ea:	002e      	movs	r6, r5
 80022ec:	1a1b      	subs	r3, r3, r0
 80022ee:	40de      	lsrs	r6, r3
 80022f0:	0003      	movs	r3, r0
 80022f2:	3315      	adds	r3, #21
 80022f4:	409d      	lsls	r5, r3
 80022f6:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <__aeabi_f2d+0x88>)
 80022f8:	0336      	lsls	r6, r6, #12
 80022fa:	1a12      	subs	r2, r2, r0
 80022fc:	0552      	lsls	r2, r2, #21
 80022fe:	0b36      	lsrs	r6, r6, #12
 8002300:	0d53      	lsrs	r3, r2, #21
 8002302:	e7e1      	b.n	80022c8 <__aeabi_f2d+0x20>
 8002304:	2d00      	cmp	r5, #0
 8002306:	d009      	beq.n	800231c <__aeabi_f2d+0x74>
 8002308:	2280      	movs	r2, #128	; 0x80
 800230a:	0b36      	lsrs	r6, r6, #12
 800230c:	0312      	lsls	r2, r2, #12
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <__aeabi_f2d+0x8c>)
 8002310:	076d      	lsls	r5, r5, #29
 8002312:	4316      	orrs	r6, r2
 8002314:	e7d8      	b.n	80022c8 <__aeabi_f2d+0x20>
 8002316:	2300      	movs	r3, #0
 8002318:	2600      	movs	r6, #0
 800231a:	e7d5      	b.n	80022c8 <__aeabi_f2d+0x20>
 800231c:	2600      	movs	r6, #0
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <__aeabi_f2d+0x8c>)
 8002320:	e7d2      	b.n	80022c8 <__aeabi_f2d+0x20>
 8002322:	0003      	movs	r3, r0
 8002324:	3b0b      	subs	r3, #11
 8002326:	409d      	lsls	r5, r3
 8002328:	002e      	movs	r6, r5
 800232a:	2500      	movs	r5, #0
 800232c:	e7e3      	b.n	80022f6 <__aeabi_f2d+0x4e>
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	00000389 	.word	0x00000389
 8002334:	000007ff 	.word	0x000007ff

08002338 <__aeabi_d2f>:
 8002338:	0002      	movs	r2, r0
 800233a:	004b      	lsls	r3, r1, #1
 800233c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233e:	0d5b      	lsrs	r3, r3, #21
 8002340:	030c      	lsls	r4, r1, #12
 8002342:	4e3d      	ldr	r6, [pc, #244]	; (8002438 <__aeabi_d2f+0x100>)
 8002344:	0a64      	lsrs	r4, r4, #9
 8002346:	0f40      	lsrs	r0, r0, #29
 8002348:	1c5f      	adds	r7, r3, #1
 800234a:	0fc9      	lsrs	r1, r1, #31
 800234c:	4304      	orrs	r4, r0
 800234e:	00d5      	lsls	r5, r2, #3
 8002350:	4237      	tst	r7, r6
 8002352:	d00a      	beq.n	800236a <__aeabi_d2f+0x32>
 8002354:	4839      	ldr	r0, [pc, #228]	; (800243c <__aeabi_d2f+0x104>)
 8002356:	181e      	adds	r6, r3, r0
 8002358:	2efe      	cmp	r6, #254	; 0xfe
 800235a:	dd16      	ble.n	800238a <__aeabi_d2f+0x52>
 800235c:	20ff      	movs	r0, #255	; 0xff
 800235e:	2400      	movs	r4, #0
 8002360:	05c0      	lsls	r0, r0, #23
 8002362:	4320      	orrs	r0, r4
 8002364:	07c9      	lsls	r1, r1, #31
 8002366:	4308      	orrs	r0, r1
 8002368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <__aeabi_d2f+0x44>
 800236e:	432c      	orrs	r4, r5
 8002370:	d026      	beq.n	80023c0 <__aeabi_d2f+0x88>
 8002372:	2205      	movs	r2, #5
 8002374:	0192      	lsls	r2, r2, #6
 8002376:	0a54      	lsrs	r4, r2, #9
 8002378:	b2d8      	uxtb	r0, r3
 800237a:	e7f1      	b.n	8002360 <__aeabi_d2f+0x28>
 800237c:	4325      	orrs	r5, r4
 800237e:	d0ed      	beq.n	800235c <__aeabi_d2f+0x24>
 8002380:	2080      	movs	r0, #128	; 0x80
 8002382:	03c0      	lsls	r0, r0, #15
 8002384:	4304      	orrs	r4, r0
 8002386:	20ff      	movs	r0, #255	; 0xff
 8002388:	e7ea      	b.n	8002360 <__aeabi_d2f+0x28>
 800238a:	2e00      	cmp	r6, #0
 800238c:	dd1b      	ble.n	80023c6 <__aeabi_d2f+0x8e>
 800238e:	0192      	lsls	r2, r2, #6
 8002390:	1e53      	subs	r3, r2, #1
 8002392:	419a      	sbcs	r2, r3
 8002394:	00e4      	lsls	r4, r4, #3
 8002396:	0f6d      	lsrs	r5, r5, #29
 8002398:	4322      	orrs	r2, r4
 800239a:	432a      	orrs	r2, r5
 800239c:	0753      	lsls	r3, r2, #29
 800239e:	d048      	beq.n	8002432 <__aeabi_d2f+0xfa>
 80023a0:	230f      	movs	r3, #15
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d000      	beq.n	80023aa <__aeabi_d2f+0x72>
 80023a8:	3204      	adds	r2, #4
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	04db      	lsls	r3, r3, #19
 80023ae:	4013      	ands	r3, r2
 80023b0:	d03f      	beq.n	8002432 <__aeabi_d2f+0xfa>
 80023b2:	1c70      	adds	r0, r6, #1
 80023b4:	2efe      	cmp	r6, #254	; 0xfe
 80023b6:	d0d1      	beq.n	800235c <__aeabi_d2f+0x24>
 80023b8:	0192      	lsls	r2, r2, #6
 80023ba:	0a54      	lsrs	r4, r2, #9
 80023bc:	b2c0      	uxtb	r0, r0
 80023be:	e7cf      	b.n	8002360 <__aeabi_d2f+0x28>
 80023c0:	2000      	movs	r0, #0
 80023c2:	2400      	movs	r4, #0
 80023c4:	e7cc      	b.n	8002360 <__aeabi_d2f+0x28>
 80023c6:	0032      	movs	r2, r6
 80023c8:	3217      	adds	r2, #23
 80023ca:	db22      	blt.n	8002412 <__aeabi_d2f+0xda>
 80023cc:	2080      	movs	r0, #128	; 0x80
 80023ce:	0400      	lsls	r0, r0, #16
 80023d0:	4320      	orrs	r0, r4
 80023d2:	241e      	movs	r4, #30
 80023d4:	1ba4      	subs	r4, r4, r6
 80023d6:	2c1f      	cmp	r4, #31
 80023d8:	dd1d      	ble.n	8002416 <__aeabi_d2f+0xde>
 80023da:	2202      	movs	r2, #2
 80023dc:	4252      	negs	r2, r2
 80023de:	1b96      	subs	r6, r2, r6
 80023e0:	0002      	movs	r2, r0
 80023e2:	40f2      	lsrs	r2, r6
 80023e4:	0016      	movs	r6, r2
 80023e6:	2c20      	cmp	r4, #32
 80023e8:	d004      	beq.n	80023f4 <__aeabi_d2f+0xbc>
 80023ea:	4a15      	ldr	r2, [pc, #84]	; (8002440 <__aeabi_d2f+0x108>)
 80023ec:	4694      	mov	ip, r2
 80023ee:	4463      	add	r3, ip
 80023f0:	4098      	lsls	r0, r3
 80023f2:	4305      	orrs	r5, r0
 80023f4:	002a      	movs	r2, r5
 80023f6:	1e53      	subs	r3, r2, #1
 80023f8:	419a      	sbcs	r2, r3
 80023fa:	4332      	orrs	r2, r6
 80023fc:	2600      	movs	r6, #0
 80023fe:	0753      	lsls	r3, r2, #29
 8002400:	d1ce      	bne.n	80023a0 <__aeabi_d2f+0x68>
 8002402:	2480      	movs	r4, #128	; 0x80
 8002404:	0013      	movs	r3, r2
 8002406:	04e4      	lsls	r4, r4, #19
 8002408:	2001      	movs	r0, #1
 800240a:	4023      	ands	r3, r4
 800240c:	4222      	tst	r2, r4
 800240e:	d1d3      	bne.n	80023b8 <__aeabi_d2f+0x80>
 8002410:	e7b0      	b.n	8002374 <__aeabi_d2f+0x3c>
 8002412:	2300      	movs	r3, #0
 8002414:	e7ad      	b.n	8002372 <__aeabi_d2f+0x3a>
 8002416:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <__aeabi_d2f+0x10c>)
 8002418:	4694      	mov	ip, r2
 800241a:	002a      	movs	r2, r5
 800241c:	40e2      	lsrs	r2, r4
 800241e:	0014      	movs	r4, r2
 8002420:	002a      	movs	r2, r5
 8002422:	4463      	add	r3, ip
 8002424:	409a      	lsls	r2, r3
 8002426:	4098      	lsls	r0, r3
 8002428:	1e55      	subs	r5, r2, #1
 800242a:	41aa      	sbcs	r2, r5
 800242c:	4302      	orrs	r2, r0
 800242e:	4322      	orrs	r2, r4
 8002430:	e7e4      	b.n	80023fc <__aeabi_d2f+0xc4>
 8002432:	0033      	movs	r3, r6
 8002434:	e79e      	b.n	8002374 <__aeabi_d2f+0x3c>
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	000007fe 	.word	0x000007fe
 800243c:	fffffc80 	.word	0xfffffc80
 8002440:	fffffca2 	.word	0xfffffca2
 8002444:	fffffc82 	.word	0xfffffc82

08002448 <__clzsi2>:
 8002448:	211c      	movs	r1, #28
 800244a:	2301      	movs	r3, #1
 800244c:	041b      	lsls	r3, r3, #16
 800244e:	4298      	cmp	r0, r3
 8002450:	d301      	bcc.n	8002456 <__clzsi2+0xe>
 8002452:	0c00      	lsrs	r0, r0, #16
 8002454:	3910      	subs	r1, #16
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	4298      	cmp	r0, r3
 800245a:	d301      	bcc.n	8002460 <__clzsi2+0x18>
 800245c:	0a00      	lsrs	r0, r0, #8
 800245e:	3908      	subs	r1, #8
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	4298      	cmp	r0, r3
 8002464:	d301      	bcc.n	800246a <__clzsi2+0x22>
 8002466:	0900      	lsrs	r0, r0, #4
 8002468:	3904      	subs	r1, #4
 800246a:	a202      	add	r2, pc, #8	; (adr r2, 8002474 <__clzsi2+0x2c>)
 800246c:	5c10      	ldrb	r0, [r2, r0]
 800246e:	1840      	adds	r0, r0, r1
 8002470:	4770      	bx	lr
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	02020304 	.word	0x02020304
 8002478:	01010101 	.word	0x01010101
	...

08002484 <__clzdi2>:
 8002484:	b510      	push	{r4, lr}
 8002486:	2900      	cmp	r1, #0
 8002488:	d103      	bne.n	8002492 <__clzdi2+0xe>
 800248a:	f7ff ffdd 	bl	8002448 <__clzsi2>
 800248e:	3020      	adds	r0, #32
 8002490:	e002      	b.n	8002498 <__clzdi2+0x14>
 8002492:	0008      	movs	r0, r1
 8002494:	f7ff ffd8 	bl	8002448 <__clzsi2>
 8002498:	bd10      	pop	{r4, pc}
 800249a:	46c0      	nop			; (mov r8, r8)

0800249c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024a2:	f000 fce9 	bl	8002e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024a6:	f000 f8ff 	bl	80026a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024aa:	f000 fa4f 	bl	800294c <MX_GPIO_Init>
  MX_DMA_Init();
 80024ae:	f000 fa2f 	bl	8002910 <MX_DMA_Init>
  MX_I2C1_Init();
 80024b2:	f000 f9ef 	bl	8002894 <MX_I2C1_Init>
  MX_ADC_Init();
 80024b6:	f000 f969 	bl	800278c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  uint8_t data_t [2];
  uint8_t data_u[2];
  data_t[0] = 0x80;
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	2280      	movs	r2, #128	; 0x80
 80024be:	701a      	strb	r2, [r3, #0]
  data_t[1] = 0x28;
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	2228      	movs	r2, #40	; 0x28
 80024c4:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)GROOVELCD_ADDR, (uint8_t*)data_t, 2, 50);
 80024c6:	1d3a      	adds	r2, r7, #4
 80024c8:	486e      	ldr	r0, [pc, #440]	; (8002684 <main+0x1e8>)
 80024ca:	2332      	movs	r3, #50	; 0x32
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2302      	movs	r3, #2
 80024d0:	217c      	movs	r1, #124	; 0x7c
 80024d2:	f002 f835 	bl	8004540 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 80024d6:	2001      	movs	r0, #1
 80024d8:	f000 fd3e 	bl	8002f58 <HAL_Delay>

  data_t[0] = 0x80;
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	2280      	movs	r2, #128	; 0x80
 80024e0:	701a      	strb	r2, [r3, #0]
  data_t[1] = 0x0C;
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	220c      	movs	r2, #12
 80024e6:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)GROOVELCD_ADDR, (uint8_t*)data_t, 2, 50);
 80024e8:	1d3a      	adds	r2, r7, #4
 80024ea:	4866      	ldr	r0, [pc, #408]	; (8002684 <main+0x1e8>)
 80024ec:	2332      	movs	r3, #50	; 0x32
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2302      	movs	r3, #2
 80024f2:	217c      	movs	r1, #124	; 0x7c
 80024f4:	f002 f824 	bl	8004540 <HAL_I2C_Master_Transmit>

  data_t[0] = 0x80;
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	2280      	movs	r2, #128	; 0x80
 80024fc:	701a      	strb	r2, [r3, #0]
  data_t[1] = 0x01;
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	2201      	movs	r2, #1
 8002502:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)GROOVELCD_ADDR, (uint8_t*)data_t, 2, 50);
 8002504:	1d3a      	adds	r2, r7, #4
 8002506:	485f      	ldr	r0, [pc, #380]	; (8002684 <main+0x1e8>)
 8002508:	2332      	movs	r3, #50	; 0x32
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2302      	movs	r3, #2
 800250e:	217c      	movs	r1, #124	; 0x7c
 8002510:	f002 f816 	bl	8004540 <HAL_I2C_Master_Transmit>

  data_t[0] = 0x80;
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	2280      	movs	r2, #128	; 0x80
 8002518:	701a      	strb	r2, [r3, #0]
  data_t[1] = 0x06;
 800251a:	1d3b      	adds	r3, r7, #4
 800251c:	2206      	movs	r2, #6
 800251e:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)GROOVELCD_ADDR, (uint8_t*)data_t, 2, 50);
 8002520:	1d3a      	adds	r2, r7, #4
 8002522:	4858      	ldr	r0, [pc, #352]	; (8002684 <main+0x1e8>)
 8002524:	2332      	movs	r3, #50	; 0x32
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2302      	movs	r3, #2
 800252a:	217c      	movs	r1, #124	; 0x7c
 800252c:	f002 f808 	bl	8004540 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8002530:	2001      	movs	r0, #1
 8002532:	f000 fd11 	bl	8002f58 <HAL_Delay>

  //ADC
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)value_adc, 3);
 8002536:	4954      	ldr	r1, [pc, #336]	; (8002688 <main+0x1ec>)
 8002538:	4b54      	ldr	r3, [pc, #336]	; (800268c <main+0x1f0>)
 800253a:	2203      	movs	r2, #3
 800253c:	0018      	movs	r0, r3
 800253e:	f000 ff37 	bl	80033b0 <HAL_ADC_Start_DMA>

  char *str = malloc (6);
 8002542:	2006      	movs	r0, #6
 8002544:	f003 f9e2 	bl	800590c <malloc>
 8002548:	0003      	movs	r3, r0
 800254a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 800254c:	4b4f      	ldr	r3, [pc, #316]	; (800268c <main+0x1f0>)
 800254e:	2100      	movs	r1, #0
 8002550:	0018      	movs	r0, r3
 8002552:	f001 fab3 	bl	8003abc <HAL_ADCEx_Calibration_Start>

	  data_t[0] = 0x80;
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	701a      	strb	r2, [r3, #0]
	  data_t[1] = 0x03;
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	2203      	movs	r2, #3
 8002560:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)GROOVELCD_ADDR, (uint8_t*)data_t, 2, 50);
 8002562:	1d3a      	adds	r2, r7, #4
 8002564:	4847      	ldr	r0, [pc, #284]	; (8002684 <main+0x1e8>)
 8002566:	2332      	movs	r3, #50	; 0x32
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2302      	movs	r3, #2
 800256c:	217c      	movs	r1, #124	; 0x7c
 800256e:	f001 ffe7 	bl	8004540 <HAL_I2C_Master_Transmit>
	  HAL_Delay(1);
 8002572:	2001      	movs	r0, #1
 8002574:	f000 fcf0 	bl	8002f58 <HAL_Delay>

	  Print(GROOVELCD_ADDR, "Q1:-");
 8002578:	4b45      	ldr	r3, [pc, #276]	; (8002690 <main+0x1f4>)
 800257a:	0019      	movs	r1, r3
 800257c:	207c      	movs	r0, #124	; 0x7c
 800257e:	f000 fa07 	bl	8002990 <Print>

	  HAL_ADC_Start(&hadc);
 8002582:	4b42      	ldr	r3, [pc, #264]	; (800268c <main+0x1f0>)
 8002584:	0018      	movs	r0, r3
 8002586:	f000 fe7f 	bl	8003288 <HAL_ADC_Start>

	  HAL_Delay(100);
 800258a:	2064      	movs	r0, #100	; 0x64
 800258c:	f000 fce4 	bl	8002f58 <HAL_Delay>

	  f = value_adc[0]*0.000805860805861;
 8002590:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <main+0x1ec>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	0018      	movs	r0, r3
 8002596:	f7ff fe31 	bl	80021fc <__aeabi_i2d>
 800259a:	4a3e      	ldr	r2, [pc, #248]	; (8002694 <main+0x1f8>)
 800259c:	4b3e      	ldr	r3, [pc, #248]	; (8002698 <main+0x1fc>)
 800259e:	f7fe ffdb 	bl	8001558 <__aeabi_dmul>
 80025a2:	0002      	movs	r2, r0
 80025a4:	000b      	movs	r3, r1
 80025a6:	0010      	movs	r0, r2
 80025a8:	0019      	movs	r1, r3
 80025aa:	f7ff fec5 	bl	8002338 <__aeabi_d2f>
 80025ae:	1c03      	adds	r3, r0, #0
 80025b0:	60bb      	str	r3, [r7, #8]
	  sprintf (str, "%.2f", f);
 80025b2:	68b8      	ldr	r0, [r7, #8]
 80025b4:	f7ff fe78 	bl	80022a8 <__aeabi_f2d>
 80025b8:	0002      	movs	r2, r0
 80025ba:	000b      	movs	r3, r1
 80025bc:	4937      	ldr	r1, [pc, #220]	; (800269c <main+0x200>)
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f003 ff18 	bl	80063f4 <siprintf>

	  Print(GROOVELCD_ADDR, str);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	0019      	movs	r1, r3
 80025c8:	207c      	movs	r0, #124	; 0x7c
 80025ca:	f000 f9e1 	bl	8002990 <Print>

	  f = value_adc[1]*0.000805860805861;
 80025ce:	4b2e      	ldr	r3, [pc, #184]	; (8002688 <main+0x1ec>)
 80025d0:	885b      	ldrh	r3, [r3, #2]
 80025d2:	0018      	movs	r0, r3
 80025d4:	f7ff fe12 	bl	80021fc <__aeabi_i2d>
 80025d8:	4a2e      	ldr	r2, [pc, #184]	; (8002694 <main+0x1f8>)
 80025da:	4b2f      	ldr	r3, [pc, #188]	; (8002698 <main+0x1fc>)
 80025dc:	f7fe ffbc 	bl	8001558 <__aeabi_dmul>
 80025e0:	0002      	movs	r2, r0
 80025e2:	000b      	movs	r3, r1
 80025e4:	0010      	movs	r0, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	f7ff fea6 	bl	8002338 <__aeabi_d2f>
 80025ec:	1c03      	adds	r3, r0, #0
 80025ee:	60bb      	str	r3, [r7, #8]
	  sprintf (str, "%.2f", f);
 80025f0:	68b8      	ldr	r0, [r7, #8]
 80025f2:	f7ff fe59 	bl	80022a8 <__aeabi_f2d>
 80025f6:	0002      	movs	r2, r0
 80025f8:	000b      	movs	r3, r1
 80025fa:	4928      	ldr	r1, [pc, #160]	; (800269c <main+0x200>)
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f003 fef9 	bl	80063f4 <siprintf>

	  /*Shift to second line*/
	  data_t[0] = 0x80;
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	2280      	movs	r2, #128	; 0x80
 8002606:	701a      	strb	r2, [r3, #0]
	  data_t[1] = 0xC0;
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	22c0      	movs	r2, #192	; 0xc0
 800260c:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)GROOVELCD_ADDR, (uint8_t*)data_t, 2, 50);
 800260e:	1d3a      	adds	r2, r7, #4
 8002610:	481c      	ldr	r0, [pc, #112]	; (8002684 <main+0x1e8>)
 8002612:	2332      	movs	r3, #50	; 0x32
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2302      	movs	r3, #2
 8002618:	217c      	movs	r1, #124	; 0x7c
 800261a:	f001 ff91 	bl	8004540 <HAL_I2C_Master_Transmit>
	  /**/

	  Print(GROOVELCD_ADDR, "Q2:-");
 800261e:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <main+0x204>)
 8002620:	0019      	movs	r1, r3
 8002622:	207c      	movs	r0, #124	; 0x7c
 8002624:	f000 f9b4 	bl	8002990 <Print>
	  Print(GROOVELCD_ADDR, str);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	0019      	movs	r1, r3
 800262c:	207c      	movs	r0, #124	; 0x7c
 800262e:	f000 f9af 	bl	8002990 <Print>

	  f = value_adc[2]*0.000805860805861;
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <main+0x1ec>)
 8002634:	889b      	ldrh	r3, [r3, #4]
 8002636:	0018      	movs	r0, r3
 8002638:	f7ff fde0 	bl	80021fc <__aeabi_i2d>
 800263c:	4a15      	ldr	r2, [pc, #84]	; (8002694 <main+0x1f8>)
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <main+0x1fc>)
 8002640:	f7fe ff8a 	bl	8001558 <__aeabi_dmul>
 8002644:	0002      	movs	r2, r0
 8002646:	000b      	movs	r3, r1
 8002648:	0010      	movs	r0, r2
 800264a:	0019      	movs	r1, r3
 800264c:	f7ff fe74 	bl	8002338 <__aeabi_d2f>
 8002650:	1c03      	adds	r3, r0, #0
 8002652:	60bb      	str	r3, [r7, #8]
	  sprintf (str, "%.2f", f);
 8002654:	68b8      	ldr	r0, [r7, #8]
 8002656:	f7ff fe27 	bl	80022a8 <__aeabi_f2d>
 800265a:	0002      	movs	r2, r0
 800265c:	000b      	movs	r3, r1
 800265e:	490f      	ldr	r1, [pc, #60]	; (800269c <main+0x200>)
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f003 fec7 	bl	80063f4 <siprintf>

	  Print(GROOVELCD_ADDR, " V:-");
 8002666:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <main+0x208>)
 8002668:	0019      	movs	r1, r3
 800266a:	207c      	movs	r0, #124	; 0x7c
 800266c:	f000 f990 	bl	8002990 <Print>
	  Print(GROOVELCD_ADDR, str);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	0019      	movs	r1, r3
 8002674:	207c      	movs	r0, #124	; 0x7c
 8002676:	f000 f98b 	bl	8002990 <Print>

	  HAL_ADC_Stop(&hadc);
 800267a:	4b04      	ldr	r3, [pc, #16]	; (800268c <main+0x1f0>)
 800267c:	0018      	movs	r0, r3
 800267e:	f000 fe57 	bl	8003330 <HAL_ADC_Stop>
  {
 8002682:	e763      	b.n	800254c <main+0xb0>
 8002684:	2000029c 	.word	0x2000029c
 8002688:	200002e8 	.word	0x200002e8
 800268c:	200001f8 	.word	0x200001f8
 8002690:	08008868 	.word	0x08008868
 8002694:	e734e0b3 	.word	0xe734e0b3
 8002698:	3f4a680c 	.word	0x3f4a680c
 800269c:	08008870 	.word	0x08008870
 80026a0:	08008878 	.word	0x08008878
 80026a4:	08008880 	.word	0x08008880

080026a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b099      	sub	sp, #100	; 0x64
 80026ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ae:	242c      	movs	r4, #44	; 0x2c
 80026b0:	193b      	adds	r3, r7, r4
 80026b2:	0018      	movs	r0, r3
 80026b4:	2334      	movs	r3, #52	; 0x34
 80026b6:	001a      	movs	r2, r3
 80026b8:	2100      	movs	r1, #0
 80026ba:	f003 f931 	bl	8005920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026be:	2318      	movs	r3, #24
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	0018      	movs	r0, r3
 80026c4:	2314      	movs	r3, #20
 80026c6:	001a      	movs	r2, r3
 80026c8:	2100      	movs	r1, #0
 80026ca:	f003 f929 	bl	8005920 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026ce:	003b      	movs	r3, r7
 80026d0:	0018      	movs	r0, r3
 80026d2:	2318      	movs	r3, #24
 80026d4:	001a      	movs	r2, r3
 80026d6:	2100      	movs	r1, #0
 80026d8:	f003 f922 	bl	8005920 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026dc:	4b29      	ldr	r3, [pc, #164]	; (8002784 <SystemClock_Config+0xdc>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a29      	ldr	r2, [pc, #164]	; (8002788 <SystemClock_Config+0xe0>)
 80026e2:	401a      	ands	r2, r3
 80026e4:	4b27      	ldr	r3, [pc, #156]	; (8002784 <SystemClock_Config+0xdc>)
 80026e6:	2180      	movs	r1, #128	; 0x80
 80026e8:	0109      	lsls	r1, r1, #4
 80026ea:	430a      	orrs	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80026ee:	0021      	movs	r1, r4
 80026f0:	187b      	adds	r3, r7, r1
 80026f2:	2212      	movs	r2, #18
 80026f4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026f6:	187b      	adds	r3, r7, r1
 80026f8:	2201      	movs	r2, #1
 80026fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	2210      	movs	r2, #16
 8002700:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002702:	187b      	adds	r3, r7, r1
 8002704:	2201      	movs	r2, #1
 8002706:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002708:	187b      	adds	r3, r7, r1
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800270e:	187b      	adds	r3, r7, r1
 8002710:	22a0      	movs	r2, #160	; 0xa0
 8002712:	0212      	lsls	r2, r2, #8
 8002714:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002716:	187b      	adds	r3, r7, r1
 8002718:	2200      	movs	r2, #0
 800271a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800271c:	187b      	adds	r3, r7, r1
 800271e:	0018      	movs	r0, r3
 8002720:	f002 fa3a 	bl	8004b98 <HAL_RCC_OscConfig>
 8002724:	1e03      	subs	r3, r0, #0
 8002726:	d001      	beq.n	800272c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002728:	f000 f99e 	bl	8002a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800272c:	2118      	movs	r1, #24
 800272e:	187b      	adds	r3, r7, r1
 8002730:	220f      	movs	r2, #15
 8002732:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002734:	187b      	adds	r3, r7, r1
 8002736:	2200      	movs	r2, #0
 8002738:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800273a:	187b      	adds	r3, r7, r1
 800273c:	2280      	movs	r2, #128	; 0x80
 800273e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8002740:	187b      	adds	r3, r7, r1
 8002742:	22e0      	movs	r2, #224	; 0xe0
 8002744:	00d2      	lsls	r2, r2, #3
 8002746:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002748:	187b      	adds	r3, r7, r1
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800274e:	187b      	adds	r3, r7, r1
 8002750:	2100      	movs	r1, #0
 8002752:	0018      	movs	r0, r3
 8002754:	f002 fd9c 	bl	8005290 <HAL_RCC_ClockConfig>
 8002758:	1e03      	subs	r3, r0, #0
 800275a:	d001      	beq.n	8002760 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800275c:	f000 f984 	bl	8002a68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002760:	003b      	movs	r3, r7
 8002762:	2208      	movs	r2, #8
 8002764:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002766:	003b      	movs	r3, r7
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800276c:	003b      	movs	r3, r7
 800276e:	0018      	movs	r0, r3
 8002770:	f002 ff7c 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>
 8002774:	1e03      	subs	r3, r0, #0
 8002776:	d001      	beq.n	800277c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002778:	f000 f976 	bl	8002a68 <Error_Handler>
  }
}
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	b019      	add	sp, #100	; 0x64
 8002782:	bd90      	pop	{r4, r7, pc}
 8002784:	40007000 	.word	0x40007000
 8002788:	ffffe7ff 	.word	0xffffe7ff

0800278c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002792:	003b      	movs	r3, r7
 8002794:	0018      	movs	r0, r3
 8002796:	2308      	movs	r3, #8
 8002798:	001a      	movs	r2, r3
 800279a:	2100      	movs	r1, #0
 800279c:	f003 f8c0 	bl	8005920 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80027a0:	4b37      	ldr	r3, [pc, #220]	; (8002880 <MX_ADC_Init+0xf4>)
 80027a2:	4a38      	ldr	r2, [pc, #224]	; (8002884 <MX_ADC_Init+0xf8>)
 80027a4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80027a6:	4b36      	ldr	r3, [pc, #216]	; (8002880 <MX_ADC_Init+0xf4>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 80027ac:	4b34      	ldr	r3, [pc, #208]	; (8002880 <MX_ADC_Init+0xf4>)
 80027ae:	2290      	movs	r2, #144	; 0x90
 80027b0:	0392      	lsls	r2, r2, #14
 80027b2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80027b4:	4b32      	ldr	r3, [pc, #200]	; (8002880 <MX_ADC_Init+0xf4>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80027ba:	4b31      	ldr	r3, [pc, #196]	; (8002880 <MX_ADC_Init+0xf4>)
 80027bc:	2207      	movs	r2, #7
 80027be:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80027c0:	4b2f      	ldr	r3, [pc, #188]	; (8002880 <MX_ADC_Init+0xf4>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027c6:	4b2e      	ldr	r3, [pc, #184]	; (8002880 <MX_ADC_Init+0xf4>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80027cc:	4b2c      	ldr	r3, [pc, #176]	; (8002880 <MX_ADC_Init+0xf4>)
 80027ce:	2220      	movs	r2, #32
 80027d0:	2100      	movs	r1, #0
 80027d2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80027d4:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <MX_ADC_Init+0xf4>)
 80027d6:	2221      	movs	r2, #33	; 0x21
 80027d8:	2100      	movs	r1, #0
 80027da:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027dc:	4b28      	ldr	r3, [pc, #160]	; (8002880 <MX_ADC_Init+0xf4>)
 80027de:	2200      	movs	r2, #0
 80027e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027e2:	4b27      	ldr	r3, [pc, #156]	; (8002880 <MX_ADC_Init+0xf4>)
 80027e4:	22c2      	movs	r2, #194	; 0xc2
 80027e6:	32ff      	adds	r2, #255	; 0xff
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 80027ea:	4b25      	ldr	r3, [pc, #148]	; (8002880 <MX_ADC_Init+0xf4>)
 80027ec:	222c      	movs	r2, #44	; 0x2c
 80027ee:	2101      	movs	r1, #1
 80027f0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027f2:	4b23      	ldr	r3, [pc, #140]	; (8002880 <MX_ADC_Init+0xf4>)
 80027f4:	2204      	movs	r2, #4
 80027f6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027f8:	4b21      	ldr	r3, [pc, #132]	; (8002880 <MX_ADC_Init+0xf4>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <MX_ADC_Init+0xf4>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8002804:	4b1e      	ldr	r3, [pc, #120]	; (8002880 <MX_ADC_Init+0xf4>)
 8002806:	2201      	movs	r2, #1
 8002808:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800280a:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <MX_ADC_Init+0xf4>)
 800280c:	2200      	movs	r2, #0
 800280e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002810:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <MX_ADC_Init+0xf4>)
 8002812:	0018      	movs	r0, r3
 8002814:	f000 fbc4 	bl	8002fa0 <HAL_ADC_Init>
 8002818:	1e03      	subs	r3, r0, #0
 800281a:	d001      	beq.n	8002820 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800281c:	f000 f924 	bl	8002a68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002820:	003b      	movs	r3, r7
 8002822:	4a19      	ldr	r2, [pc, #100]	; (8002888 <MX_ADC_Init+0xfc>)
 8002824:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002826:	003b      	movs	r3, r7
 8002828:	2280      	movs	r2, #128	; 0x80
 800282a:	0152      	lsls	r2, r2, #5
 800282c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800282e:	003a      	movs	r2, r7
 8002830:	4b13      	ldr	r3, [pc, #76]	; (8002880 <MX_ADC_Init+0xf4>)
 8002832:	0011      	movs	r1, r2
 8002834:	0018      	movs	r0, r3
 8002836:	f000 ff19 	bl	800366c <HAL_ADC_ConfigChannel>
 800283a:	1e03      	subs	r3, r0, #0
 800283c:	d001      	beq.n	8002842 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800283e:	f000 f913 	bl	8002a68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002842:	003b      	movs	r3, r7
 8002844:	4a11      	ldr	r2, [pc, #68]	; (800288c <MX_ADC_Init+0x100>)
 8002846:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002848:	003a      	movs	r2, r7
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <MX_ADC_Init+0xf4>)
 800284c:	0011      	movs	r1, r2
 800284e:	0018      	movs	r0, r3
 8002850:	f000 ff0c 	bl	800366c <HAL_ADC_ConfigChannel>
 8002854:	1e03      	subs	r3, r0, #0
 8002856:	d001      	beq.n	800285c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8002858:	f000 f906 	bl	8002a68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800285c:	003b      	movs	r3, r7
 800285e:	4a0c      	ldr	r2, [pc, #48]	; (8002890 <MX_ADC_Init+0x104>)
 8002860:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002862:	003a      	movs	r2, r7
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <MX_ADC_Init+0xf4>)
 8002866:	0011      	movs	r1, r2
 8002868:	0018      	movs	r0, r3
 800286a:	f000 feff 	bl	800366c <HAL_ADC_ConfigChannel>
 800286e:	1e03      	subs	r3, r0, #0
 8002870:	d001      	beq.n	8002876 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8002872:	f000 f8f9 	bl	8002a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	46bd      	mov	sp, r7
 800287a:	b002      	add	sp, #8
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	200001f8 	.word	0x200001f8
 8002884:	40012400 	.word	0x40012400
 8002888:	14000020 	.word	0x14000020
 800288c:	18000040 	.word	0x18000040
 8002890:	1c000080 	.word	0x1c000080

08002894 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <MX_I2C1_Init+0x74>)
 800289a:	4a1c      	ldr	r2, [pc, #112]	; (800290c <MX_I2C1_Init+0x78>)
 800289c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <MX_I2C1_Init+0x74>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80028a4:	4b18      	ldr	r3, [pc, #96]	; (8002908 <MX_I2C1_Init+0x74>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <MX_I2C1_Init+0x74>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028b0:	4b15      	ldr	r3, [pc, #84]	; (8002908 <MX_I2C1_Init+0x74>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80028b6:	4b14      	ldr	r3, [pc, #80]	; (8002908 <MX_I2C1_Init+0x74>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <MX_I2C1_Init+0x74>)
 80028be:	2200      	movs	r2, #0
 80028c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <MX_I2C1_Init+0x74>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028c8:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <MX_I2C1_Init+0x74>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028ce:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <MX_I2C1_Init+0x74>)
 80028d0:	0018      	movs	r0, r3
 80028d2:	f001 fd9f 	bl	8004414 <HAL_I2C_Init>
 80028d6:	1e03      	subs	r3, r0, #0
 80028d8:	d001      	beq.n	80028de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80028da:	f000 f8c5 	bl	8002a68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <MX_I2C1_Init+0x74>)
 80028e0:	2100      	movs	r1, #0
 80028e2:	0018      	movs	r0, r3
 80028e4:	f002 f8c0 	bl	8004a68 <HAL_I2CEx_ConfigAnalogFilter>
 80028e8:	1e03      	subs	r3, r0, #0
 80028ea:	d001      	beq.n	80028f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80028ec:	f000 f8bc 	bl	8002a68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <MX_I2C1_Init+0x74>)
 80028f2:	2100      	movs	r1, #0
 80028f4:	0018      	movs	r0, r3
 80028f6:	f002 f903 	bl	8004b00 <HAL_I2CEx_ConfigDigitalFilter>
 80028fa:	1e03      	subs	r3, r0, #0
 80028fc:	d001      	beq.n	8002902 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80028fe:	f000 f8b3 	bl	8002a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	2000029c 	.word	0x2000029c
 800290c:	40005400 	.word	0x40005400

08002910 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002916:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <MX_DMA_Init+0x38>)
 8002918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800291a:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <MX_DMA_Init+0x38>)
 800291c:	2101      	movs	r1, #1
 800291e:	430a      	orrs	r2, r1
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
 8002922:	4b09      	ldr	r3, [pc, #36]	; (8002948 <MX_DMA_Init+0x38>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	2201      	movs	r2, #1
 8002928:	4013      	ands	r3, r2
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2100      	movs	r1, #0
 8002932:	2009      	movs	r0, #9
 8002934:	f001 fa0c 	bl	8003d50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002938:	2009      	movs	r0, #9
 800293a:	f001 fa1e 	bl	8003d7a <HAL_NVIC_EnableIRQ>

}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	46bd      	mov	sp, r7
 8002942:	b002      	add	sp, #8
 8002944:	bd80      	pop	{r7, pc}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	40021000 	.word	0x40021000

0800294c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002952:	4b0e      	ldr	r3, [pc, #56]	; (800298c <MX_GPIO_Init+0x40>)
 8002954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <MX_GPIO_Init+0x40>)
 8002958:	2101      	movs	r1, #1
 800295a:	430a      	orrs	r2, r1
 800295c:	62da      	str	r2, [r3, #44]	; 0x2c
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <MX_GPIO_Init+0x40>)
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	2201      	movs	r2, #1
 8002964:	4013      	ands	r3, r2
 8002966:	607b      	str	r3, [r7, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <MX_GPIO_Init+0x40>)
 800296c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <MX_GPIO_Init+0x40>)
 8002970:	2102      	movs	r1, #2
 8002972:	430a      	orrs	r2, r1
 8002974:	62da      	str	r2, [r3, #44]	; 0x2c
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <MX_GPIO_Init+0x40>)
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	2202      	movs	r2, #2
 800297c:	4013      	ands	r3, r2
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	683b      	ldr	r3, [r7, #0]

}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	46bd      	mov	sp, r7
 8002986:	b002      	add	sp, #8
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	40021000 	.word	0x40021000

08002990 <Print>:

/* USER CODE BEGIN 4 */
void Print(uint16_t addre, uint8_t *str)
{
 8002990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002992:	46c6      	mov	lr, r8
 8002994:	b500      	push	{lr}
 8002996:	b08e      	sub	sp, #56	; 0x38
 8002998:	af02      	add	r7, sp, #8
 800299a:	0002      	movs	r2, r0
 800299c:	61b9      	str	r1, [r7, #24]
 800299e:	231e      	movs	r3, #30
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	801a      	strh	r2, [r3, #0]
 80029a4:	466b      	mov	r3, sp
 80029a6:	4698      	mov	r8, r3
	uint8_t data_a[strlen(str)];
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f7fd fbac 	bl	8000108 <strlen>
 80029b0:	0003      	movs	r3, r0
 80029b2:	001a      	movs	r2, r3
 80029b4:	3a01      	subs	r2, #1
 80029b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	2200      	movs	r2, #0
 80029bc:	60fa      	str	r2, [r7, #12]
 80029be:	68b8      	ldr	r0, [r7, #8]
 80029c0:	68f9      	ldr	r1, [r7, #12]
 80029c2:	0002      	movs	r2, r0
 80029c4:	0f52      	lsrs	r2, r2, #29
 80029c6:	000e      	movs	r6, r1
 80029c8:	00f6      	lsls	r6, r6, #3
 80029ca:	617e      	str	r6, [r7, #20]
 80029cc:	697e      	ldr	r6, [r7, #20]
 80029ce:	4316      	orrs	r6, r2
 80029d0:	617e      	str	r6, [r7, #20]
 80029d2:	0002      	movs	r2, r0
 80029d4:	00d2      	lsls	r2, r2, #3
 80029d6:	613a      	str	r2, [r7, #16]
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	6838      	ldr	r0, [r7, #0]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	0002      	movs	r2, r0
 80029e4:	0f52      	lsrs	r2, r2, #29
 80029e6:	000e      	movs	r6, r1
 80029e8:	00f5      	lsls	r5, r6, #3
 80029ea:	4315      	orrs	r5, r2
 80029ec:	0002      	movs	r2, r0
 80029ee:	00d4      	lsls	r4, r2, #3
 80029f0:	3307      	adds	r3, #7
 80029f2:	08db      	lsrs	r3, r3, #3
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	466a      	mov	r2, sp
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	469d      	mov	sp, r3
 80029fc:	ab02      	add	r3, sp, #8
 80029fe:	3300      	adds	r3, #0
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
	data_a[0] = 0x40;
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	2240      	movs	r2, #64	; 0x40
 8002a06:	701a      	strb	r2, [r3, #0]
	int i;
	for(i=0; str[i]!=0; i++)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a0c:	e00a      	b.n	8002a24 <Print+0x94>
	{
		data_a[1+i] = str[i];
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	18d2      	adds	r2, r2, r3
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	3301      	adds	r3, #1
 8002a18:	7811      	ldrb	r1, [r2, #0]
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	54d1      	strb	r1, [r2, r3]
	for(i=0; str[i]!=0; i++)
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a20:	3301      	adds	r3, #1
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	18d3      	adds	r3, r2, r3
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1ee      	bne.n	8002a0e <Print+0x7e>
	}
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)addre, (uint8_t*)data_a, 1+strlen(str), 50);
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	0018      	movs	r0, r3
 8002a34:	f7fd fb68 	bl	8000108 <strlen>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	b29c      	uxth	r4, r3
 8002a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a42:	231e      	movs	r3, #30
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	8819      	ldrh	r1, [r3, #0]
 8002a48:	4806      	ldr	r0, [pc, #24]	; (8002a64 <Print+0xd4>)
 8002a4a:	2332      	movs	r3, #50	; 0x32
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	0023      	movs	r3, r4
 8002a50:	f001 fd76 	bl	8004540 <HAL_I2C_Master_Transmit>
 8002a54:	46c5      	mov	sp, r8
}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b00c      	add	sp, #48	; 0x30
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	46b8      	mov	r8, r7
 8002a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	2000029c 	.word	0x2000029c

08002a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a6c:	b672      	cpsid	i
}
 8002a6e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a70:	e7fe      	b.n	8002a70 <Error_Handler+0x8>
	...

08002a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <HAL_MspInit+0x24>)
 8002a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_MspInit+0x24>)
 8002a7e:	2101      	movs	r1, #1
 8002a80:	430a      	orrs	r2, r1
 8002a82:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <HAL_MspInit+0x24>)
 8002a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_MspInit+0x24>)
 8002a8a:	2180      	movs	r1, #128	; 0x80
 8002a8c:	0549      	lsls	r1, r1, #21
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40021000 	.word	0x40021000

08002a9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b089      	sub	sp, #36	; 0x24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	240c      	movs	r4, #12
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	2314      	movs	r3, #20
 8002aac:	001a      	movs	r2, r3
 8002aae:	2100      	movs	r1, #0
 8002ab0:	f002 ff36 	bl	8005920 <memset>
  if(hadc->Instance==ADC1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2e      	ldr	r2, [pc, #184]	; (8002b74 <HAL_ADC_MspInit+0xd8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d155      	bne.n	8002b6a <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002abe:	4b2e      	ldr	r3, [pc, #184]	; (8002b78 <HAL_ADC_MspInit+0xdc>)
 8002ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac2:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <HAL_ADC_MspInit+0xdc>)
 8002ac4:	2180      	movs	r1, #128	; 0x80
 8002ac6:	0089      	lsls	r1, r1, #2
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002acc:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <HAL_ADC_MspInit+0xdc>)
 8002ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad0:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <HAL_ADC_MspInit+0xdc>)
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ad8:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <HAL_ADC_MspInit+0xdc>)
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	2201      	movs	r2, #1
 8002ade:	4013      	ands	r3, r2
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ae4:	193b      	adds	r3, r7, r4
 8002ae6:	22e0      	movs	r2, #224	; 0xe0
 8002ae8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aea:	193b      	adds	r3, r7, r4
 8002aec:	2203      	movs	r2, #3
 8002aee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	193b      	adds	r3, r7, r4
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af6:	193a      	adds	r2, r7, r4
 8002af8:	23a0      	movs	r3, #160	; 0xa0
 8002afa:	05db      	lsls	r3, r3, #23
 8002afc:	0011      	movs	r1, r2
 8002afe:	0018      	movs	r0, r3
 8002b00:	f001 fb12 	bl	8004128 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_ADC_MspInit+0xe0>)
 8002b06:	4a1e      	ldr	r2, [pc, #120]	; (8002b80 <HAL_ADC_MspInit+0xe4>)
 8002b08:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8002b0a:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <HAL_ADC_MspInit+0xe0>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b10:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <HAL_ADC_MspInit+0xe0>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b16:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_ADC_MspInit+0xe0>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002b1c:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <HAL_ADC_MspInit+0xe0>)
 8002b1e:	2280      	movs	r2, #128	; 0x80
 8002b20:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b22:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <HAL_ADC_MspInit+0xe0>)
 8002b24:	2280      	movs	r2, #128	; 0x80
 8002b26:	0052      	lsls	r2, r2, #1
 8002b28:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b2a:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <HAL_ADC_MspInit+0xe0>)
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	00d2      	lsls	r2, r2, #3
 8002b30:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002b32:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_ADC_MspInit+0xe0>)
 8002b34:	2220      	movs	r2, #32
 8002b36:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002b38:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <HAL_ADC_MspInit+0xe0>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002b3e:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <HAL_ADC_MspInit+0xe0>)
 8002b40:	0018      	movs	r0, r3
 8002b42:	f001 f937 	bl	8003db4 <HAL_DMA_Init>
 8002b46:	1e03      	subs	r3, r0, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8002b4a:	f7ff ff8d 	bl	8002a68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a0a      	ldr	r2, [pc, #40]	; (8002b7c <HAL_ADC_MspInit+0xe0>)
 8002b52:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <HAL_ADC_MspInit+0xe0>)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	200c      	movs	r0, #12
 8002b60:	f001 f8f6 	bl	8003d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002b64:	200c      	movs	r0, #12
 8002b66:	f001 f908 	bl	8003d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b009      	add	sp, #36	; 0x24
 8002b70:	bd90      	pop	{r4, r7, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	40012400 	.word	0x40012400
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	20000254 	.word	0x20000254
 8002b80:	40020008 	.word	0x40020008

08002b84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b089      	sub	sp, #36	; 0x24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	240c      	movs	r4, #12
 8002b8e:	193b      	adds	r3, r7, r4
 8002b90:	0018      	movs	r0, r3
 8002b92:	2314      	movs	r3, #20
 8002b94:	001a      	movs	r2, r3
 8002b96:	2100      	movs	r1, #0
 8002b98:	f002 fec2 	bl	8005920 <memset>
  if(hi2c->Instance==I2C1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <HAL_I2C_MspInit+0x7c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d128      	bne.n	8002bf8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba6:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <HAL_I2C_MspInit+0x80>)
 8002ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002baa:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <HAL_I2C_MspInit+0x80>)
 8002bac:	2102      	movs	r1, #2
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bb2:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <HAL_I2C_MspInit+0x80>)
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bbe:	0021      	movs	r1, r4
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	22c0      	movs	r2, #192	; 0xc0
 8002bc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	2212      	movs	r2, #18
 8002bca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002bd8:	187b      	adds	r3, r7, r1
 8002bda:	2201      	movs	r2, #1
 8002bdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bde:	187b      	adds	r3, r7, r1
 8002be0:	4a09      	ldr	r2, [pc, #36]	; (8002c08 <HAL_I2C_MspInit+0x84>)
 8002be2:	0019      	movs	r1, r3
 8002be4:	0010      	movs	r0, r2
 8002be6:	f001 fa9f 	bl	8004128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_I2C_MspInit+0x80>)
 8002bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_I2C_MspInit+0x80>)
 8002bf0:	2180      	movs	r1, #128	; 0x80
 8002bf2:	0389      	lsls	r1, r1, #14
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bf8:	46c0      	nop			; (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b009      	add	sp, #36	; 0x24
 8002bfe:	bd90      	pop	{r4, r7, pc}
 8002c00:	40005400 	.word	0x40005400
 8002c04:	40021000 	.word	0x40021000
 8002c08:	50000400 	.word	0x50000400

08002c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c10:	e7fe      	b.n	8002c10 <NMI_Handler+0x4>

08002c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c16:	e7fe      	b.n	8002c16 <HardFault_Handler+0x4>

08002c18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c1c:	46c0      	nop			; (mov r8, r8)
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c30:	f000 f976 	bl	8002f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <DMA1_Channel1_IRQHandler+0x14>)
 8002c42:	0018      	movs	r0, r3
 8002c44:	f001 f994 	bl	8003f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c48:	46c0      	nop			; (mov r8, r8)
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	20000254 	.word	0x20000254

08002c54 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <ADC1_IRQHandler+0x14>)
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f000 fc2a 	bl	80034b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002c60:	46c0      	nop			; (mov r8, r8)
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	200001f8 	.word	0x200001f8

08002c6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
	return 1;
 8002c70:	2301      	movs	r3, #1
}
 8002c72:	0018      	movs	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <_kill>:

int _kill(int pid, int sig)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c82:	f002 fe19 	bl	80058b8 <__errno>
 8002c86:	0003      	movs	r3, r0
 8002c88:	2216      	movs	r2, #22
 8002c8a:	601a      	str	r2, [r3, #0]
	return -1;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	425b      	negs	r3, r3
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b002      	add	sp, #8
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <_exit>:

void _exit (int status)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	425a      	negs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	0011      	movs	r1, r2
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7ff ffe5 	bl	8002c78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cae:	e7fe      	b.n	8002cae <_exit+0x16>

08002cb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e00a      	b.n	8002cd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cc2:	e000      	b.n	8002cc6 <_read+0x16>
 8002cc4:	bf00      	nop
 8002cc6:	0001      	movs	r1, r0
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	60ba      	str	r2, [r7, #8]
 8002cce:	b2ca      	uxtb	r2, r1
 8002cd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	dbf0      	blt.n	8002cc2 <_read+0x12>
	}

return len;
 8002ce0:	687b      	ldr	r3, [r7, #4]
}
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b006      	add	sp, #24
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	e009      	b.n	8002d10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	60ba      	str	r2, [r7, #8]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	0018      	movs	r0, r3
 8002d06:	e000      	b.n	8002d0a <_write+0x20>
 8002d08:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	dbf1      	blt.n	8002cfc <_write+0x12>
	}
	return len;
 8002d18:	687b      	ldr	r3, [r7, #4]
}
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b006      	add	sp, #24
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <_close>:

int _close(int file)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
	return -1;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	425b      	negs	r3, r3
}
 8002d2e:	0018      	movs	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b002      	add	sp, #8
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2280      	movs	r2, #128	; 0x80
 8002d44:	0192      	lsls	r2, r2, #6
 8002d46:	605a      	str	r2, [r3, #4]
	return 0;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b002      	add	sp, #8
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <_isatty>:

int _isatty(int file)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
	return 1;
 8002d5a:	2301      	movs	r3, #1
}
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b002      	add	sp, #8
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
	return 0;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	0018      	movs	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b004      	add	sp, #16
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d84:	4a14      	ldr	r2, [pc, #80]	; (8002dd8 <_sbrk+0x5c>)
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <_sbrk+0x60>)
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <_sbrk+0x64>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d102      	bne.n	8002d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <_sbrk+0x64>)
 8002d9a:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <_sbrk+0x68>)
 8002d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <_sbrk+0x64>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	18d3      	adds	r3, r2, r3
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d207      	bcs.n	8002dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dac:	f002 fd84 	bl	80058b8 <__errno>
 8002db0:	0003      	movs	r3, r0
 8002db2:	220c      	movs	r2, #12
 8002db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002db6:	2301      	movs	r3, #1
 8002db8:	425b      	negs	r3, r3
 8002dba:	e009      	b.n	8002dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <_sbrk+0x64>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dc2:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <_sbrk+0x64>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	18d2      	adds	r2, r2, r3
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <_sbrk+0x64>)
 8002dcc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002dce:	68fb      	ldr	r3, [r7, #12]
}
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b006      	add	sp, #24
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20002000 	.word	0x20002000
 8002ddc:	00000400 	.word	0x00000400
 8002de0:	200002f0 	.word	0x200002f0
 8002de4:	20000308 	.word	0x20000308

08002de8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002df4:	4813      	ldr	r0, [pc, #76]	; (8002e44 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002df6:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8002df8:	4813      	ldr	r0, [pc, #76]	; (8002e48 <LoopForever+0x6>)
    LDR R1, [R0]
 8002dfa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002dfc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002dfe:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <LoopForever+0xa>)
    CMP R1, R2
 8002e00:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002e02:	d105      	bne.n	8002e10 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8002e04:	4812      	ldr	r0, [pc, #72]	; (8002e50 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002e06:	4913      	ldr	r1, [pc, #76]	; (8002e54 <LoopForever+0x12>)
    STR R1, [R0]
 8002e08:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002e0a:	4813      	ldr	r0, [pc, #76]	; (8002e58 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002e0c:	4913      	ldr	r1, [pc, #76]	; (8002e5c <LoopForever+0x1a>)
    STR R1, [R0]
 8002e0e:	6001      	str	r1, [r0, #0]

08002e10 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e10:	4813      	ldr	r0, [pc, #76]	; (8002e60 <LoopForever+0x1e>)
  ldr r1, =_edata
 8002e12:	4914      	ldr	r1, [pc, #80]	; (8002e64 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002e14:	4a14      	ldr	r2, [pc, #80]	; (8002e68 <LoopForever+0x26>)
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e18:	e002      	b.n	8002e20 <LoopCopyDataInit>

08002e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e1e:	3304      	adds	r3, #4

08002e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e24:	d3f9      	bcc.n	8002e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e26:	4a11      	ldr	r2, [pc, #68]	; (8002e6c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002e28:	4c11      	ldr	r4, [pc, #68]	; (8002e70 <LoopForever+0x2e>)
  movs r3, #0
 8002e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e2c:	e001      	b.n	8002e32 <LoopFillZerobss>

08002e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e30:	3204      	adds	r2, #4

08002e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e34:	d3fb      	bcc.n	8002e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002e36:	f7ff ffd7 	bl	8002de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e3a:	f002 fd43 	bl	80058c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e3e:	f7ff fb2d 	bl	800249c <main>

08002e42 <LoopForever>:

LoopForever:
    b LoopForever
 8002e42:	e7fe      	b.n	8002e42 <LoopForever>
   ldr   r0, =_estack
 8002e44:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8002e48:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002e4c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8002e50:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8002e54:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002e58:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002e5c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e64:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002e68:	08008d0c 	.word	0x08008d0c
  ldr r2, =_sbss
 8002e6c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002e70:	20000308 	.word	0x20000308

08002e74 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e74:	e7fe      	b.n	8002e74 <DMA1_Channel2_3_IRQHandler>
	...

08002e78 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e7e:	1dfb      	adds	r3, r7, #7
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_Init+0x3c>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <HAL_Init+0x3c>)
 8002e8a:	2140      	movs	r1, #64	; 0x40
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e90:	2003      	movs	r0, #3
 8002e92:	f000 f811 	bl	8002eb8 <HAL_InitTick>
 8002e96:	1e03      	subs	r3, r0, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002e9a:	1dfb      	adds	r3, r7, #7
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e001      	b.n	8002ea6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ea2:	f7ff fde7 	bl	8002a74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ea6:	1dfb      	adds	r3, r7, #7
 8002ea8:	781b      	ldrb	r3, [r3, #0]
}
 8002eaa:	0018      	movs	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b002      	add	sp, #8
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	40022000 	.word	0x40022000

08002eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ec0:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <HAL_InitTick+0x5c>)
 8002ec2:	681c      	ldr	r4, [r3, #0]
 8002ec4:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <HAL_InitTick+0x60>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	0019      	movs	r1, r3
 8002eca:	23fa      	movs	r3, #250	; 0xfa
 8002ecc:	0098      	lsls	r0, r3, #2
 8002ece:	f7fd f937 	bl	8000140 <__udivsi3>
 8002ed2:	0003      	movs	r3, r0
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	0020      	movs	r0, r4
 8002ed8:	f7fd f932 	bl	8000140 <__udivsi3>
 8002edc:	0003      	movs	r3, r0
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f000 ff5b 	bl	8003d9a <HAL_SYSTICK_Config>
 8002ee4:	1e03      	subs	r3, r0, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e00f      	b.n	8002f0c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d80b      	bhi.n	8002f0a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	425b      	negs	r3, r3
 8002ef8:	2200      	movs	r2, #0
 8002efa:	0018      	movs	r0, r3
 8002efc:	f000 ff28 	bl	8003d50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_InitTick+0x64>)
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e000      	b.n	8002f0c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
}
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b003      	add	sp, #12
 8002f12:	bd90      	pop	{r4, r7, pc}
 8002f14:	20000000 	.word	0x20000000
 8002f18:	20000008 	.word	0x20000008
 8002f1c:	20000004 	.word	0x20000004

08002f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <HAL_IncTick+0x1c>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	001a      	movs	r2, r3
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_IncTick+0x20>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	18d2      	adds	r2, r2, r3
 8002f30:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <HAL_IncTick+0x20>)
 8002f32:	601a      	str	r2, [r3, #0]
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	20000008 	.word	0x20000008
 8002f40:	200002f4 	.word	0x200002f4

08002f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  return uwTick;
 8002f48:	4b02      	ldr	r3, [pc, #8]	; (8002f54 <HAL_GetTick+0x10>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	200002f4 	.word	0x200002f4

08002f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f60:	f7ff fff0 	bl	8002f44 <HAL_GetTick>
 8002f64:	0003      	movs	r3, r0
 8002f66:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	d005      	beq.n	8002f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <HAL_Delay+0x44>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	001a      	movs	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	189b      	adds	r3, r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	f7ff ffe0 	bl	8002f44 <HAL_GetTick>
 8002f84:	0002      	movs	r2, r0
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d8f7      	bhi.n	8002f80 <HAL_Delay+0x28>
  {
  }
}
 8002f90:	46c0      	nop			; (mov r8, r8)
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b004      	add	sp, #16
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	20000008 	.word	0x20000008

08002fa0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e159      	b.n	8003266 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10a      	bne.n	8002fd0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2250      	movs	r2, #80	; 0x50
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f7ff fd66 	bl	8002a9c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b10      	cmp	r3, #16
 8002fda:	d005      	beq.n	8002fe8 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002fe6:	d00b      	beq.n	8003000 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	2210      	movs	r2, #16
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2250      	movs	r2, #80	; 0x50
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e132      	b.n	8003266 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003004:	4a9a      	ldr	r2, [pc, #616]	; (8003270 <HAL_ADC_Init+0x2d0>)
 8003006:	4013      	ands	r3, r2
 8003008:	2202      	movs	r2, #2
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2203      	movs	r2, #3
 8003018:	4013      	ands	r3, r2
 800301a:	2b01      	cmp	r3, #1
 800301c:	d108      	bne.n	8003030 <HAL_ADC_Init+0x90>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2201      	movs	r2, #1
 8003026:	4013      	ands	r3, r2
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_ADC_Init+0x90>
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <HAL_ADC_Init+0x92>
 8003030:	2300      	movs	r3, #0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d149      	bne.n	80030ca <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	23c0      	movs	r3, #192	; 0xc0
 800303c:	061b      	lsls	r3, r3, #24
 800303e:	429a      	cmp	r2, r3
 8003040:	d00b      	beq.n	800305a <HAL_ADC_Init+0xba>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	05db      	lsls	r3, r3, #23
 800304a:	429a      	cmp	r2, r3
 800304c:	d005      	beq.n	800305a <HAL_ADC_Init+0xba>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	061b      	lsls	r3, r3, #24
 8003056:	429a      	cmp	r2, r3
 8003058:	d111      	bne.n	800307e <HAL_ADC_Init+0xde>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	0092      	lsls	r2, r2, #2
 8003066:	0892      	lsrs	r2, r2, #2
 8003068:	611a      	str	r2, [r3, #16]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6919      	ldr	r1, [r3, #16]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	611a      	str	r2, [r3, #16]
 800307c:	e014      	b.n	80030a8 <HAL_ADC_Init+0x108>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0092      	lsls	r2, r2, #2
 800308a:	0892      	lsrs	r2, r2, #2
 800308c:	611a      	str	r2, [r3, #16]
 800308e:	4b79      	ldr	r3, [pc, #484]	; (8003274 <HAL_ADC_Init+0x2d4>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b78      	ldr	r3, [pc, #480]	; (8003274 <HAL_ADC_Init+0x2d4>)
 8003094:	4978      	ldr	r1, [pc, #480]	; (8003278 <HAL_ADC_Init+0x2d8>)
 8003096:	400a      	ands	r2, r1
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	4b76      	ldr	r3, [pc, #472]	; (8003274 <HAL_ADC_Init+0x2d4>)
 800309c:	6819      	ldr	r1, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	4b74      	ldr	r3, [pc, #464]	; (8003274 <HAL_ADC_Init+0x2d4>)
 80030a4:	430a      	orrs	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2118      	movs	r1, #24
 80030b4:	438a      	bics	r2, r1
 80030b6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68d9      	ldr	r1, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80030ca:	4b6a      	ldr	r3, [pc, #424]	; (8003274 <HAL_ADC_Init+0x2d4>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4b69      	ldr	r3, [pc, #420]	; (8003274 <HAL_ADC_Init+0x2d4>)
 80030d0:	496a      	ldr	r1, [pc, #424]	; (800327c <HAL_ADC_Init+0x2dc>)
 80030d2:	400a      	ands	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80030d6:	4b67      	ldr	r3, [pc, #412]	; (8003274 <HAL_ADC_Init+0x2d4>)
 80030d8:	6819      	ldr	r1, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030de:	065a      	lsls	r2, r3, #25
 80030e0:	4b64      	ldr	r3, [pc, #400]	; (8003274 <HAL_ADC_Init+0x2d4>)
 80030e2:	430a      	orrs	r2, r1
 80030e4:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	055b      	lsls	r3, r3, #21
 80030f0:	4013      	ands	r3, r2
 80030f2:	d108      	bne.n	8003106 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2180      	movs	r1, #128	; 0x80
 8003100:	0549      	lsls	r1, r1, #21
 8003102:	430a      	orrs	r2, r1
 8003104:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	495b      	ldr	r1, [pc, #364]	; (8003280 <HAL_ADC_Init+0x2e0>)
 8003112:	400a      	ands	r2, r1
 8003114:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68d9      	ldr	r1, [r3, #12]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d101      	bne.n	800312c <HAL_ADC_Init+0x18c>
 8003128:	2304      	movs	r3, #4
 800312a:	e000      	b.n	800312e <HAL_ADC_Init+0x18e>
 800312c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800312e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2020      	movs	r0, #32
 8003134:	5c1b      	ldrb	r3, [r3, r0]
 8003136:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003138:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	202c      	movs	r0, #44	; 0x2c
 800313e:	5c1b      	ldrb	r3, [r3, r0]
 8003140:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003142:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003148:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003150:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003158:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003166:	23c2      	movs	r3, #194	; 0xc2
 8003168:	33ff      	adds	r3, #255	; 0xff
 800316a:	429a      	cmp	r2, r3
 800316c:	d00b      	beq.n	8003186 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68d9      	ldr	r1, [r3, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2221      	movs	r2, #33	; 0x21
 800318a:	5c9b      	ldrb	r3, [r3, r2]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d11a      	bne.n	80031c6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	5c9b      	ldrb	r3, [r3, r2]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	0249      	lsls	r1, r1, #9
 80031a8:	430a      	orrs	r2, r1
 80031aa:	60da      	str	r2, [r3, #12]
 80031ac:	e00b      	b.n	80031c6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b2:	2220      	movs	r2, #32
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	2201      	movs	r2, #1
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d11f      	bne.n	800320e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	492a      	ldr	r1, [pc, #168]	; (8003284 <HAL_ADC_Init+0x2e4>)
 80031da:	400a      	ands	r2, r1
 80031dc:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6919      	ldr	r1, [r3, #16]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80031ec:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80031f2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2101      	movs	r1, #1
 8003208:	430a      	orrs	r2, r1
 800320a:	611a      	str	r2, [r3, #16]
 800320c:	e00e      	b.n	800322c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2201      	movs	r2, #1
 8003216:	4013      	ands	r3, r2
 8003218:	2b01      	cmp	r3, #1
 800321a:	d107      	bne.n	800322c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2101      	movs	r1, #1
 8003228:	438a      	bics	r2, r1
 800322a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2107      	movs	r1, #7
 8003238:	438a      	bics	r2, r1
 800323a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6959      	ldr	r1, [r3, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003258:	2203      	movs	r2, #3
 800325a:	4393      	bics	r3, r2
 800325c:	2201      	movs	r2, #1
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	0018      	movs	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	b002      	add	sp, #8
 800326c:	bd80      	pop	{r7, pc}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	fffffefd 	.word	0xfffffefd
 8003274:	40012708 	.word	0x40012708
 8003278:	ffc3ffff 	.word	0xffc3ffff
 800327c:	fdffffff 	.word	0xfdffffff
 8003280:	fffe0219 	.word	0xfffe0219
 8003284:	fffffc03 	.word	0xfffffc03

08003288 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003290:	230f      	movs	r3, #15
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2204      	movs	r2, #4
 80032a0:	4013      	ands	r3, r2
 80032a2:	d138      	bne.n	8003316 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2250      	movs	r2, #80	; 0x50
 80032a8:	5c9b      	ldrb	r3, [r3, r2]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_ADC_Start+0x2a>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e038      	b.n	8003324 <HAL_ADC_Start+0x9c>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2250      	movs	r2, #80	; 0x50
 80032b6:	2101      	movs	r1, #1
 80032b8:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d007      	beq.n	80032d2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80032c2:	230f      	movs	r3, #15
 80032c4:	18fc      	adds	r4, r7, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	0018      	movs	r0, r3
 80032ca:	f000 fa37 	bl	800373c <ADC_Enable>
 80032ce:	0003      	movs	r3, r0
 80032d0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032d2:	230f      	movs	r3, #15
 80032d4:	18fb      	adds	r3, r7, r3
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d120      	bne.n	800331e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e0:	4a12      	ldr	r2, [pc, #72]	; (800332c <HAL_ADC_Start+0xa4>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	2280      	movs	r2, #128	; 0x80
 80032e6:	0052      	lsls	r2, r2, #1
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2250      	movs	r2, #80	; 0x50
 80032f8:	2100      	movs	r1, #0
 80032fa:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	221c      	movs	r2, #28
 8003302:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2104      	movs	r1, #4
 8003310:	430a      	orrs	r2, r1
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	e003      	b.n	800331e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003316:	230f      	movs	r3, #15
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	2202      	movs	r2, #2
 800331c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800331e:	230f      	movs	r3, #15
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	781b      	ldrb	r3, [r3, #0]
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	b005      	add	sp, #20
 800332a:	bd90      	pop	{r4, r7, pc}
 800332c:	fffff0fe 	.word	0xfffff0fe

08003330 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003330:	b5b0      	push	{r4, r5, r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003338:	230f      	movs	r3, #15
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2250      	movs	r2, #80	; 0x50
 8003344:	5c9b      	ldrb	r3, [r3, r2]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_ADC_Stop+0x1e>
 800334a:	2302      	movs	r3, #2
 800334c:	e029      	b.n	80033a2 <HAL_ADC_Stop+0x72>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2250      	movs	r2, #80	; 0x50
 8003352:	2101      	movs	r1, #1
 8003354:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003356:	250f      	movs	r5, #15
 8003358:	197c      	adds	r4, r7, r5
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	0018      	movs	r0, r3
 800335e:	f000 fabc 	bl	80038da <ADC_ConversionStop>
 8003362:	0003      	movs	r3, r0
 8003364:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003366:	197b      	adds	r3, r7, r5
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d112      	bne.n	8003394 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800336e:	197c      	adds	r4, r7, r5
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	0018      	movs	r0, r3
 8003374:	f000 fa4a 	bl	800380c <ADC_Disable>
 8003378:	0003      	movs	r3, r0
 800337a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800337c:	197b      	adds	r3, r7, r5
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d107      	bne.n	8003394 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003388:	4a08      	ldr	r2, [pc, #32]	; (80033ac <HAL_ADC_Stop+0x7c>)
 800338a:	4013      	ands	r3, r2
 800338c:	2201      	movs	r2, #1
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2250      	movs	r2, #80	; 0x50
 8003398:	2100      	movs	r1, #0
 800339a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800339c:	230f      	movs	r3, #15
 800339e:	18fb      	adds	r3, r7, r3
 80033a0:	781b      	ldrb	r3, [r3, #0]
}
 80033a2:	0018      	movs	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b004      	add	sp, #16
 80033a8:	bdb0      	pop	{r4, r5, r7, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	fffffefe 	.word	0xfffffefe

080033b0 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033bc:	2317      	movs	r3, #23
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2204      	movs	r2, #4
 80033cc:	4013      	ands	r3, r2
 80033ce:	d15e      	bne.n	800348e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2250      	movs	r2, #80	; 0x50
 80033d4:	5c9b      	ldrb	r3, [r3, r2]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_ADC_Start_DMA+0x2e>
 80033da:	2302      	movs	r3, #2
 80033dc:	e05e      	b.n	800349c <HAL_ADC_Start_DMA+0xec>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2250      	movs	r2, #80	; 0x50
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2101      	movs	r1, #1
 80033f2:	430a      	orrs	r2, r1
 80033f4:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d007      	beq.n	800340e <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80033fe:	2317      	movs	r3, #23
 8003400:	18fc      	adds	r4, r7, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	0018      	movs	r0, r3
 8003406:	f000 f999 	bl	800373c <ADC_Enable>
 800340a:	0003      	movs	r3, r0
 800340c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800340e:	2317      	movs	r3, #23
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d13e      	bne.n	8003496 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341c:	4a21      	ldr	r2, [pc, #132]	; (80034a4 <HAL_ADC_Start_DMA+0xf4>)
 800341e:	4013      	ands	r3, r2
 8003420:	2280      	movs	r2, #128	; 0x80
 8003422:	0052      	lsls	r2, r2, #1
 8003424:	431a      	orrs	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2250      	movs	r2, #80	; 0x50
 8003434:	2100      	movs	r1, #0
 8003436:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343c:	4a1a      	ldr	r2, [pc, #104]	; (80034a8 <HAL_ADC_Start_DMA+0xf8>)
 800343e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003444:	4a19      	ldr	r2, [pc, #100]	; (80034ac <HAL_ADC_Start_DMA+0xfc>)
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344c:	4a18      	ldr	r2, [pc, #96]	; (80034b0 <HAL_ADC_Start_DMA+0x100>)
 800344e:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	221c      	movs	r2, #28
 8003456:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2110      	movs	r1, #16
 8003464:	430a      	orrs	r2, r1
 8003466:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	3340      	adds	r3, #64	; 0x40
 8003472:	0019      	movs	r1, r3
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f000 fd14 	bl	8003ea4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2104      	movs	r1, #4
 8003488:	430a      	orrs	r2, r1
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	e003      	b.n	8003496 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800348e:	2317      	movs	r3, #23
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	2202      	movs	r2, #2
 8003494:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003496:	2317      	movs	r3, #23
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	781b      	ldrb	r3, [r3, #0]
}
 800349c:	0018      	movs	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	b007      	add	sp, #28
 80034a2:	bd90      	pop	{r4, r7, pc}
 80034a4:	fffff0fe 	.word	0xfffff0fe
 80034a8:	08003975 	.word	0x08003975
 80034ac:	08003a29 	.word	0x08003a29
 80034b0:	08003a47 	.word	0x08003a47

080034b4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2204      	movs	r2, #4
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d106      	bne.n	80034d8 <HAL_ADC_IRQHandler+0x24>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2204      	movs	r2, #4
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d00d      	beq.n	80034f4 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2208      	movs	r2, #8
 80034e0:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d154      	bne.n	8003590 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2208      	movs	r2, #8
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d14d      	bne.n	8003590 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f8:	2210      	movs	r2, #16
 80034fa:	4013      	ands	r3, r2
 80034fc:	d106      	bne.n	800350c <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003502:	2280      	movs	r2, #128	; 0x80
 8003504:	0092      	lsls	r2, r2, #2
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	23c0      	movs	r3, #192	; 0xc0
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	4013      	ands	r3, r2
 8003518:	d12e      	bne.n	8003578 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2220      	movs	r2, #32
 800351e:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003520:	2b00      	cmp	r3, #0
 8003522:	d129      	bne.n	8003578 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2208      	movs	r2, #8
 800352c:	4013      	ands	r3, r2
 800352e:	2b08      	cmp	r3, #8
 8003530:	d122      	bne.n	8003578 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2204      	movs	r2, #4
 800353a:	4013      	ands	r3, r2
 800353c:	d110      	bne.n	8003560 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	210c      	movs	r1, #12
 800354a:	438a      	bics	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003552:	4a35      	ldr	r2, [pc, #212]	; (8003628 <HAL_ADC_IRQHandler+0x174>)
 8003554:	4013      	ands	r3, r2
 8003556:	2201      	movs	r2, #1
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	655a      	str	r2, [r3, #84]	; 0x54
 800355e:	e00b      	b.n	8003578 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003564:	2220      	movs	r2, #32
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	2201      	movs	r2, #1
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	0018      	movs	r0, r3
 800357c:	f000 f856 	bl	800362c <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d003      	beq.n	8003590 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	220c      	movs	r2, #12
 800358e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	4013      	ands	r3, r2
 800359a:	2b80      	cmp	r3, #128	; 0x80
 800359c:	d115      	bne.n	80035ca <HAL_ADC_IRQHandler+0x116>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2280      	movs	r2, #128	; 0x80
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b80      	cmp	r3, #128	; 0x80
 80035aa:	d10e      	bne.n	80035ca <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b0:	2280      	movs	r2, #128	; 0x80
 80035b2:	0252      	lsls	r2, r2, #9
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	0018      	movs	r0, r3
 80035be:	f000 f845 	bl	800364c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2210      	movs	r2, #16
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d123      	bne.n	8003620 <HAL_ADC_IRQHandler+0x16c>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2210      	movs	r2, #16
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b10      	cmp	r3, #16
 80035e4:	d11c      	bne.n	8003620 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d006      	beq.n	80035fc <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d10d      	bne.n	8003618 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003600:	2202      	movs	r2, #2
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2210      	movs	r2, #16
 800360e:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	0018      	movs	r0, r3
 8003614:	f000 f822 	bl	800365c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2210      	movs	r2, #16
 800361e:	601a      	str	r2, [r3, #0]
  }
  
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b002      	add	sp, #8
 8003626:	bd80      	pop	{r7, pc}
 8003628:	fffffefe 	.word	0xfffffefe

0800362c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003634:	46c0      	nop			; (mov r8, r8)
 8003636:	46bd      	mov	sp, r7
 8003638:	b002      	add	sp, #8
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003644:	46c0      	nop			; (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	b002      	add	sp, #8
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003654:	46c0      	nop			; (mov r8, r8)
 8003656:	46bd      	mov	sp, r7
 8003658:	b002      	add	sp, #8
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	46bd      	mov	sp, r7
 8003668:	b002      	add	sp, #8
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2250      	movs	r2, #80	; 0x50
 800367a:	5c9b      	ldrb	r3, [r3, r2]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x18>
 8003680:	2302      	movs	r3, #2
 8003682:	e050      	b.n	8003726 <HAL_ADC_ConfigChannel+0xba>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2250      	movs	r2, #80	; 0x50
 8003688:	2101      	movs	r1, #1
 800368a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2204      	movs	r2, #4
 8003694:	4013      	ands	r3, r2
 8003696:	d00b      	beq.n	80036b0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369c:	2220      	movs	r2, #32
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2250      	movs	r2, #80	; 0x50
 80036a8:	2100      	movs	r1, #0
 80036aa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e03a      	b.n	8003726 <HAL_ADC_ConfigChannel+0xba>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	4a1e      	ldr	r2, [pc, #120]	; (8003730 <HAL_ADC_ConfigChannel+0xc4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d018      	beq.n	80036ec <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	035b      	lsls	r3, r3, #13
 80036c6:	0b5a      	lsrs	r2, r3, #13
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	2380      	movs	r3, #128	; 0x80
 80036d6:	029b      	lsls	r3, r3, #10
 80036d8:	4013      	ands	r3, r2
 80036da:	d01f      	beq.n	800371c <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80036dc:	4b15      	ldr	r3, [pc, #84]	; (8003734 <HAL_ADC_ConfigChannel+0xc8>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4b14      	ldr	r3, [pc, #80]	; (8003734 <HAL_ADC_ConfigChannel+0xc8>)
 80036e2:	2180      	movs	r1, #128	; 0x80
 80036e4:	03c9      	lsls	r1, r1, #15
 80036e6:	430a      	orrs	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e017      	b.n	800371c <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	035b      	lsls	r3, r3, #13
 80036f8:	0b5b      	lsrs	r3, r3, #13
 80036fa:	43d9      	mvns	r1, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	400a      	ands	r2, r1
 8003702:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;   
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	029b      	lsls	r3, r3, #10
 800370c:	4013      	ands	r3, r2
 800370e:	d005      	beq.n	800371c <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_ADC_ConfigChannel+0xc8>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b07      	ldr	r3, [pc, #28]	; (8003734 <HAL_ADC_ConfigChannel+0xc8>)
 8003716:	4908      	ldr	r1, [pc, #32]	; (8003738 <HAL_ADC_ConfigChannel+0xcc>)
 8003718:	400a      	ands	r2, r1
 800371a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2250      	movs	r2, #80	; 0x50
 8003720:	2100      	movs	r1, #0
 8003722:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	0018      	movs	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	b002      	add	sp, #8
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	00001001 	.word	0x00001001
 8003734:	40012708 	.word	0x40012708
 8003738:	ffbfffff 	.word	0xffbfffff

0800373c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2203      	movs	r2, #3
 8003750:	4013      	ands	r3, r2
 8003752:	2b01      	cmp	r3, #1
 8003754:	d108      	bne.n	8003768 <ADC_Enable+0x2c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2201      	movs	r2, #1
 800375e:	4013      	ands	r3, r2
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <ADC_Enable+0x2c>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <ADC_Enable+0x2e>
 8003768:	2300      	movs	r3, #0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d146      	bne.n	80037fc <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a24      	ldr	r2, [pc, #144]	; (8003808 <ADC_Enable+0xcc>)
 8003776:	4013      	ands	r3, r2
 8003778:	d00d      	beq.n	8003796 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377e:	2210      	movs	r2, #16
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378a:	2201      	movs	r2, #1
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e033      	b.n	80037fe <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2101      	movs	r1, #1
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80037a6:	2001      	movs	r0, #1
 80037a8:	f000 f968 	bl	8003a7c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80037ac:	f7ff fbca 	bl	8002f44 <HAL_GetTick>
 80037b0:	0003      	movs	r3, r0
 80037b2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80037b4:	e01b      	b.n	80037ee <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037b6:	f7ff fbc5 	bl	8002f44 <HAL_GetTick>
 80037ba:	0002      	movs	r2, r0
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b0a      	cmp	r3, #10
 80037c2:	d914      	bls.n	80037ee <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2201      	movs	r2, #1
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d00d      	beq.n	80037ee <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d6:	2210      	movs	r2, #16
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	2201      	movs	r2, #1
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e007      	b.n	80037fe <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2201      	movs	r2, #1
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d1dc      	bne.n	80037b6 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	0018      	movs	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	b004      	add	sp, #16
 8003804:	bd80      	pop	{r7, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	80000017 	.word	0x80000017

0800380c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2203      	movs	r2, #3
 8003820:	4013      	ands	r3, r2
 8003822:	2b01      	cmp	r3, #1
 8003824:	d108      	bne.n	8003838 <ADC_Disable+0x2c>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2201      	movs	r2, #1
 800382e:	4013      	ands	r3, r2
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <ADC_Disable+0x2c>
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <ADC_Disable+0x2e>
 8003838:	2300      	movs	r3, #0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d048      	beq.n	80038d0 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2205      	movs	r2, #5
 8003846:	4013      	ands	r3, r2
 8003848:	2b01      	cmp	r3, #1
 800384a:	d110      	bne.n	800386e <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2102      	movs	r1, #2
 8003858:	430a      	orrs	r2, r1
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2203      	movs	r2, #3
 8003862:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003864:	f7ff fb6e 	bl	8002f44 <HAL_GetTick>
 8003868:	0003      	movs	r3, r0
 800386a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800386c:	e029      	b.n	80038c2 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003872:	2210      	movs	r2, #16
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	2201      	movs	r2, #1
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e023      	b.n	80038d2 <ADC_Disable+0xc6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800388a:	f7ff fb5b 	bl	8002f44 <HAL_GetTick>
 800388e:	0002      	movs	r2, r0
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b0a      	cmp	r3, #10
 8003896:	d914      	bls.n	80038c2 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2201      	movs	r2, #1
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d10d      	bne.n	80038c2 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038aa:	2210      	movs	r2, #16
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	2201      	movs	r2, #1
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e007      	b.n	80038d2 <ADC_Disable+0xc6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2201      	movs	r2, #1
 80038ca:	4013      	ands	r3, r2
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d0dc      	beq.n	800388a <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b004      	add	sp, #16
 80038d8:	bd80      	pop	{r7, pc}

080038da <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2204      	movs	r2, #4
 80038ee:	4013      	ands	r3, r2
 80038f0:	d03a      	beq.n	8003968 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2204      	movs	r2, #4
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d10d      	bne.n	800391c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2202      	movs	r2, #2
 8003908:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800390a:	d107      	bne.n	800391c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2110      	movs	r1, #16
 8003918:	430a      	orrs	r2, r1
 800391a:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800391c:	f7ff fb12 	bl	8002f44 <HAL_GetTick>
 8003920:	0003      	movs	r3, r0
 8003922:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003924:	e01a      	b.n	800395c <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003926:	f7ff fb0d 	bl	8002f44 <HAL_GetTick>
 800392a:	0002      	movs	r2, r0
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b0a      	cmp	r3, #10
 8003932:	d913      	bls.n	800395c <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2204      	movs	r2, #4
 800393c:	4013      	ands	r3, r2
 800393e:	d00d      	beq.n	800395c <ADC_ConversionStop+0x82>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003944:	2210      	movs	r2, #16
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	2201      	movs	r2, #1
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e006      	b.n	800396a <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2204      	movs	r2, #4
 8003964:	4013      	ands	r3, r2
 8003966:	d1de      	bne.n	8003926 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	0018      	movs	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	b004      	add	sp, #16
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	2250      	movs	r2, #80	; 0x50
 8003988:	4013      	ands	r3, r2
 800398a:	d141      	bne.n	8003a10 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003990:	2280      	movs	r2, #128	; 0x80
 8003992:	0092      	lsls	r2, r2, #2
 8003994:	431a      	orrs	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	23c0      	movs	r3, #192	; 0xc0
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	4013      	ands	r3, r2
 80039a6:	d12e      	bne.n	8003a06 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d129      	bne.n	8003a06 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2208      	movs	r2, #8
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d122      	bne.n	8003a06 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2204      	movs	r2, #4
 80039c8:	4013      	ands	r3, r2
 80039ca:	d110      	bne.n	80039ee <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	210c      	movs	r1, #12
 80039d8:	438a      	bics	r2, r1
 80039da:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e0:	4a10      	ldr	r2, [pc, #64]	; (8003a24 <ADC_DMAConvCplt+0xb0>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	2201      	movs	r2, #1
 80039e6:	431a      	orrs	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	655a      	str	r2, [r3, #84]	; 0x54
 80039ec:	e00b      	b.n	8003a06 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f2:	2220      	movs	r2, #32
 80039f4:	431a      	orrs	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	2201      	movs	r2, #1
 8003a00:	431a      	orrs	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f7ff fe0f 	bl	800362c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003a0e:	e005      	b.n	8003a1c <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	0010      	movs	r0, r2
 8003a1a:	4798      	blx	r3
}
 8003a1c:	46c0      	nop			; (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b004      	add	sp, #16
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	fffffefe 	.word	0xfffffefe

08003a28 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7ff fdff 	bl	800363c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b004      	add	sp, #16
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a52:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	2240      	movs	r2, #64	; 0x40
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a64:	2204      	movs	r2, #4
 8003a66:	431a      	orrs	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f7ff fdf4 	bl	800365c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b004      	add	sp, #16
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <ADC_DelayMicroSecond+0x38>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	490b      	ldr	r1, [pc, #44]	; (8003ab8 <ADC_DelayMicroSecond+0x3c>)
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f7fc fb58 	bl	8000140 <__udivsi3>
 8003a90:	0003      	movs	r3, r0
 8003a92:	001a      	movs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4353      	muls	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8003a9a:	e002      	b.n	8003aa2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f9      	bne.n	8003a9c <ADC_DelayMicroSecond+0x20>
  } 
}
 8003aa8:	46c0      	nop			; (mov r8, r8)
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b004      	add	sp, #16
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	000f4240 	.word	0x000f4240

08003abc <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ac6:	2317      	movs	r3, #23
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	2200      	movs	r2, #0
 8003acc:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2250      	movs	r2, #80	; 0x50
 8003ada:	5c9b      	ldrb	r3, [r3, r2]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_ADCEx_Calibration_Start+0x28>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e083      	b.n	8003bec <HAL_ADCEx_Calibration_Start+0x130>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2250      	movs	r2, #80	; 0x50
 8003ae8:	2101      	movs	r1, #1
 8003aea:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2203      	movs	r2, #3
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d108      	bne.n	8003b0c <HAL_ADCEx_Calibration_Start+0x50>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2201      	movs	r2, #1
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_ADCEx_Calibration_Start+0x50>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_ADCEx_Calibration_Start+0x52>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d15b      	bne.n	8003bca <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	4a37      	ldr	r2, [pc, #220]	; (8003bf4 <HAL_ADCEx_Calibration_Start+0x138>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	2203      	movs	r2, #3
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2103      	movs	r1, #3
 8003b3a:	438a      	bics	r2, r1
 8003b3c:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2180      	movs	r1, #128	; 0x80
 8003b4a:	0609      	lsls	r1, r1, #24
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003b50:	f7ff f9f8 	bl	8002f44 <HAL_GetTick>
 8003b54:	0003      	movs	r3, r0
 8003b56:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003b58:	e01d      	b.n	8003b96 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003b5a:	f7ff f9f3 	bl	8002f44 <HAL_GetTick>
 8003b5e:	0002      	movs	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b0a      	cmp	r3, #10
 8003b66:	d916      	bls.n	8003b96 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	0fdb      	lsrs	r3, r3, #31
 8003b70:	07da      	lsls	r2, r3, #31
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	061b      	lsls	r3, r3, #24
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d10d      	bne.n	8003b96 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	2212      	movs	r2, #18
 8003b80:	4393      	bics	r3, r2
 8003b82:	2210      	movs	r2, #16
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2250      	movs	r2, #80	; 0x50
 8003b8e:	2100      	movs	r1, #0
 8003b90:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e02a      	b.n	8003bec <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	0fdb      	lsrs	r3, r3, #31
 8003b9e:	07da      	lsls	r2, r3, #31
 8003ba0:	2380      	movs	r3, #128	; 0x80
 8003ba2:	061b      	lsls	r3, r3, #24
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d0d8      	beq.n	8003b5a <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68d9      	ldr	r1, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	4393      	bics	r3, r2
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54
 8003bc8:	e009      	b.n	8003bde <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	2220      	movs	r2, #32
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8003bd6:	2317      	movs	r3, #23
 8003bd8:	18fb      	adds	r3, r7, r3
 8003bda:	2201      	movs	r2, #1
 8003bdc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2250      	movs	r2, #80	; 0x50
 8003be2:	2100      	movs	r1, #0
 8003be4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003be6:	2317      	movs	r3, #23
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	781b      	ldrb	r3, [r3, #0]
}
 8003bec:	0018      	movs	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b006      	add	sp, #24
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	fffffefd 	.word	0xfffffefd

08003bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	0002      	movs	r2, r0
 8003c00:	1dfb      	adds	r3, r7, #7
 8003c02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c04:	1dfb      	adds	r3, r7, #7
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b7f      	cmp	r3, #127	; 0x7f
 8003c0a:	d809      	bhi.n	8003c20 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c0c:	1dfb      	adds	r3, r7, #7
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	001a      	movs	r2, r3
 8003c12:	231f      	movs	r3, #31
 8003c14:	401a      	ands	r2, r3
 8003c16:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <__NVIC_EnableIRQ+0x30>)
 8003c18:	2101      	movs	r1, #1
 8003c1a:	4091      	lsls	r1, r2
 8003c1c:	000a      	movs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]
  }
}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b002      	add	sp, #8
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	e000e100 	.word	0xe000e100

08003c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	0002      	movs	r2, r0
 8003c34:	6039      	str	r1, [r7, #0]
 8003c36:	1dfb      	adds	r3, r7, #7
 8003c38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c3a:	1dfb      	adds	r3, r7, #7
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8003c40:	d828      	bhi.n	8003c94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c42:	4a2f      	ldr	r2, [pc, #188]	; (8003d00 <__NVIC_SetPriority+0xd4>)
 8003c44:	1dfb      	adds	r3, r7, #7
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	b25b      	sxtb	r3, r3
 8003c4a:	089b      	lsrs	r3, r3, #2
 8003c4c:	33c0      	adds	r3, #192	; 0xc0
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	589b      	ldr	r3, [r3, r2]
 8003c52:	1dfa      	adds	r2, r7, #7
 8003c54:	7812      	ldrb	r2, [r2, #0]
 8003c56:	0011      	movs	r1, r2
 8003c58:	2203      	movs	r2, #3
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	00d2      	lsls	r2, r2, #3
 8003c5e:	21ff      	movs	r1, #255	; 0xff
 8003c60:	4091      	lsls	r1, r2
 8003c62:	000a      	movs	r2, r1
 8003c64:	43d2      	mvns	r2, r2
 8003c66:	401a      	ands	r2, r3
 8003c68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	019b      	lsls	r3, r3, #6
 8003c6e:	22ff      	movs	r2, #255	; 0xff
 8003c70:	401a      	ands	r2, r3
 8003c72:	1dfb      	adds	r3, r7, #7
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	0018      	movs	r0, r3
 8003c78:	2303      	movs	r3, #3
 8003c7a:	4003      	ands	r3, r0
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c80:	481f      	ldr	r0, [pc, #124]	; (8003d00 <__NVIC_SetPriority+0xd4>)
 8003c82:	1dfb      	adds	r3, r7, #7
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	b25b      	sxtb	r3, r3
 8003c88:	089b      	lsrs	r3, r3, #2
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	33c0      	adds	r3, #192	; 0xc0
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003c92:	e031      	b.n	8003cf8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c94:	4a1b      	ldr	r2, [pc, #108]	; (8003d04 <__NVIC_SetPriority+0xd8>)
 8003c96:	1dfb      	adds	r3, r7, #7
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	230f      	movs	r3, #15
 8003c9e:	400b      	ands	r3, r1
 8003ca0:	3b08      	subs	r3, #8
 8003ca2:	089b      	lsrs	r3, r3, #2
 8003ca4:	3306      	adds	r3, #6
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	18d3      	adds	r3, r2, r3
 8003caa:	3304      	adds	r3, #4
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	1dfa      	adds	r2, r7, #7
 8003cb0:	7812      	ldrb	r2, [r2, #0]
 8003cb2:	0011      	movs	r1, r2
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	400a      	ands	r2, r1
 8003cb8:	00d2      	lsls	r2, r2, #3
 8003cba:	21ff      	movs	r1, #255	; 0xff
 8003cbc:	4091      	lsls	r1, r2
 8003cbe:	000a      	movs	r2, r1
 8003cc0:	43d2      	mvns	r2, r2
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	019b      	lsls	r3, r3, #6
 8003cca:	22ff      	movs	r2, #255	; 0xff
 8003ccc:	401a      	ands	r2, r3
 8003cce:	1dfb      	adds	r3, r7, #7
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	4003      	ands	r3, r0
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cdc:	4809      	ldr	r0, [pc, #36]	; (8003d04 <__NVIC_SetPriority+0xd8>)
 8003cde:	1dfb      	adds	r3, r7, #7
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	001c      	movs	r4, r3
 8003ce4:	230f      	movs	r3, #15
 8003ce6:	4023      	ands	r3, r4
 8003ce8:	3b08      	subs	r3, #8
 8003cea:	089b      	lsrs	r3, r3, #2
 8003cec:	430a      	orrs	r2, r1
 8003cee:	3306      	adds	r3, #6
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	18c3      	adds	r3, r0, r3
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	601a      	str	r2, [r3, #0]
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b003      	add	sp, #12
 8003cfe:	bd90      	pop	{r4, r7, pc}
 8003d00:	e000e100 	.word	0xe000e100
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	1e5a      	subs	r2, r3, #1
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	045b      	lsls	r3, r3, #17
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d301      	bcc.n	8003d20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e010      	b.n	8003d42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d20:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <SysTick_Config+0x44>)
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	3a01      	subs	r2, #1
 8003d26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d28:	2301      	movs	r3, #1
 8003d2a:	425b      	negs	r3, r3
 8003d2c:	2103      	movs	r1, #3
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7ff ff7c 	bl	8003c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <SysTick_Config+0x44>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d3a:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <SysTick_Config+0x44>)
 8003d3c:	2207      	movs	r2, #7
 8003d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	0018      	movs	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b002      	add	sp, #8
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	e000e010 	.word	0xe000e010

08003d50 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	210f      	movs	r1, #15
 8003d5c:	187b      	adds	r3, r7, r1
 8003d5e:	1c02      	adds	r2, r0, #0
 8003d60:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	b25b      	sxtb	r3, r3
 8003d6a:	0011      	movs	r1, r2
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f7ff ff5d 	bl	8003c2c <__NVIC_SetPriority>
}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b004      	add	sp, #16
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	0002      	movs	r2, r0
 8003d82:	1dfb      	adds	r3, r7, #7
 8003d84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d86:	1dfb      	adds	r3, r7, #7
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	b25b      	sxtb	r3, r3
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f7ff ff33 	bl	8003bf8 <__NVIC_EnableIRQ>
}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b002      	add	sp, #8
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f7ff ffaf 	bl	8003d08 <SysTick_Config>
 8003daa:	0003      	movs	r3, r0
}
 8003dac:	0018      	movs	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b002      	add	sp, #8
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e061      	b.n	8003e8a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a32      	ldr	r2, [pc, #200]	; (8003e94 <HAL_DMA_Init+0xe0>)
 8003dcc:	4694      	mov	ip, r2
 8003dce:	4463      	add	r3, ip
 8003dd0:	2114      	movs	r1, #20
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7fc f9b4 	bl	8000140 <__udivsi3>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	009a      	lsls	r2, r3, #2
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a2d      	ldr	r2, [pc, #180]	; (8003e98 <HAL_DMA_Init+0xe4>)
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2225      	movs	r2, #37	; 0x25
 8003dea:	2102      	movs	r1, #2
 8003dec:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4a28      	ldr	r2, [pc, #160]	; (8003e9c <HAL_DMA_Init+0xe8>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	2380      	movs	r3, #128	; 0x80
 8003e3a:	01db      	lsls	r3, r3, #7
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d018      	beq.n	8003e72 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e40:	4b17      	ldr	r3, [pc, #92]	; (8003ea0 <HAL_DMA_Init+0xec>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e48:	211c      	movs	r1, #28
 8003e4a:	400b      	ands	r3, r1
 8003e4c:	210f      	movs	r1, #15
 8003e4e:	4099      	lsls	r1, r3
 8003e50:	000b      	movs	r3, r1
 8003e52:	43d9      	mvns	r1, r3
 8003e54:	4b12      	ldr	r3, [pc, #72]	; (8003ea0 <HAL_DMA_Init+0xec>)
 8003e56:	400a      	ands	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003e5a:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <HAL_DMA_Init+0xec>)
 8003e5c:	6819      	ldr	r1, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	201c      	movs	r0, #28
 8003e68:	4003      	ands	r3, r0
 8003e6a:	409a      	lsls	r2, r3
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <HAL_DMA_Init+0xec>)
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2225      	movs	r2, #37	; 0x25
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2224      	movs	r2, #36	; 0x24
 8003e84:	2100      	movs	r1, #0
 8003e86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b004      	add	sp, #16
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	bffdfff8 	.word	0xbffdfff8
 8003e98:	40020000 	.word	0x40020000
 8003e9c:	ffff800f 	.word	0xffff800f
 8003ea0:	400200a8 	.word	0x400200a8

08003ea4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb2:	2317      	movs	r3, #23
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2224      	movs	r2, #36	; 0x24
 8003ebe:	5c9b      	ldrb	r3, [r3, r2]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_DMA_Start_IT+0x24>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e04f      	b.n	8003f68 <HAL_DMA_Start_IT+0xc4>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2224      	movs	r2, #36	; 0x24
 8003ecc:	2101      	movs	r1, #1
 8003ece:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2225      	movs	r2, #37	; 0x25
 8003ed4:	5c9b      	ldrb	r3, [r3, r2]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d13a      	bne.n	8003f52 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2225      	movs	r2, #37	; 0x25
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	438a      	bics	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f8e3 	bl	80040cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d008      	beq.n	8003f20 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	210e      	movs	r1, #14
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	e00f      	b.n	8003f40 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2104      	movs	r1, #4
 8003f2c:	438a      	bics	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	210a      	movs	r1, #10
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	e007      	b.n	8003f62 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2224      	movs	r2, #36	; 0x24
 8003f56:	2100      	movs	r1, #0
 8003f58:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f5a:	2317      	movs	r3, #23
 8003f5c:	18fb      	adds	r3, r7, r3
 8003f5e:	2202      	movs	r2, #2
 8003f60:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8003f62:	2317      	movs	r3, #23
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	781b      	ldrb	r3, [r3, #0]
}
 8003f68:	0018      	movs	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b006      	add	sp, #24
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8c:	221c      	movs	r2, #28
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2204      	movs	r2, #4
 8003f92:	409a      	lsls	r2, r3
 8003f94:	0013      	movs	r3, r2
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d026      	beq.n	8003fea <HAL_DMA_IRQHandler+0x7a>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d022      	beq.n	8003fea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2220      	movs	r2, #32
 8003fac:	4013      	ands	r3, r2
 8003fae:	d107      	bne.n	8003fc0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2104      	movs	r1, #4
 8003fbc:	438a      	bics	r2, r1
 8003fbe:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc4:	221c      	movs	r2, #28
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	2104      	movs	r1, #4
 8003fce:	4091      	lsls	r1, r2
 8003fd0:	000a      	movs	r2, r1
 8003fd2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d100      	bne.n	8003fde <HAL_DMA_IRQHandler+0x6e>
 8003fdc:	e071      	b.n	80040c2 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	0010      	movs	r0, r2
 8003fe6:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8003fe8:	e06b      	b.n	80040c2 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	221c      	movs	r2, #28
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	409a      	lsls	r2, r3
 8003ff6:	0013      	movs	r3, r2
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d02d      	beq.n	800405a <HAL_DMA_IRQHandler+0xea>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2202      	movs	r2, #2
 8004002:	4013      	ands	r3, r2
 8004004:	d029      	beq.n	800405a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2220      	movs	r2, #32
 800400e:	4013      	ands	r3, r2
 8004010:	d10b      	bne.n	800402a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	210a      	movs	r1, #10
 800401e:	438a      	bics	r2, r1
 8004020:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2225      	movs	r2, #37	; 0x25
 8004026:	2101      	movs	r1, #1
 8004028:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	221c      	movs	r2, #28
 8004030:	401a      	ands	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	2102      	movs	r1, #2
 8004038:	4091      	lsls	r1, r2
 800403a:	000a      	movs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2224      	movs	r2, #36	; 0x24
 8004042:	2100      	movs	r1, #0
 8004044:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d039      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	0010      	movs	r0, r2
 8004056:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004058:	e033      	b.n	80040c2 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	221c      	movs	r2, #28
 8004060:	4013      	ands	r3, r2
 8004062:	2208      	movs	r2, #8
 8004064:	409a      	lsls	r2, r3
 8004066:	0013      	movs	r3, r2
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4013      	ands	r3, r2
 800406c:	d02a      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x154>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2208      	movs	r2, #8
 8004072:	4013      	ands	r3, r2
 8004074:	d026      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	210e      	movs	r1, #14
 8004082:	438a      	bics	r2, r1
 8004084:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408a:	221c      	movs	r2, #28
 800408c:	401a      	ands	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	2101      	movs	r1, #1
 8004094:	4091      	lsls	r1, r2
 8004096:	000a      	movs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2225      	movs	r2, #37	; 0x25
 80040a4:	2101      	movs	r1, #1
 80040a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2224      	movs	r2, #36	; 0x24
 80040ac:	2100      	movs	r1, #0
 80040ae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	0010      	movs	r0, r2
 80040c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	46c0      	nop			; (mov r8, r8)
}
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b004      	add	sp, #16
 80040ca:	bd80      	pop	{r7, pc}

080040cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	221c      	movs	r2, #28
 80040e0:	401a      	ands	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	2101      	movs	r1, #1
 80040e8:	4091      	lsls	r1, r2
 80040ea:	000a      	movs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b10      	cmp	r3, #16
 80040fc:	d108      	bne.n	8004110 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800410e:	e007      	b.n	8004120 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	60da      	str	r2, [r3, #12]
}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	b004      	add	sp, #16
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800413a:	2300      	movs	r3, #0
 800413c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800413e:	e14f      	b.n	80043e0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2101      	movs	r1, #1
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4091      	lsls	r1, r2
 800414a:	000a      	movs	r2, r1
 800414c:	4013      	ands	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d100      	bne.n	8004158 <HAL_GPIO_Init+0x30>
 8004156:	e140      	b.n	80043da <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2203      	movs	r2, #3
 800415e:	4013      	ands	r3, r2
 8004160:	2b01      	cmp	r3, #1
 8004162:	d005      	beq.n	8004170 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2203      	movs	r2, #3
 800416a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800416c:	2b02      	cmp	r3, #2
 800416e:	d130      	bne.n	80041d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	2203      	movs	r2, #3
 800417c:	409a      	lsls	r2, r3
 800417e:	0013      	movs	r3, r2
 8004180:	43da      	mvns	r2, r3
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4013      	ands	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	409a      	lsls	r2, r3
 8004192:	0013      	movs	r3, r2
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041a6:	2201      	movs	r2, #1
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	409a      	lsls	r2, r3
 80041ac:	0013      	movs	r3, r2
 80041ae:	43da      	mvns	r2, r3
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4013      	ands	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	2201      	movs	r2, #1
 80041be:	401a      	ands	r2, r3
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	409a      	lsls	r2, r3
 80041c4:	0013      	movs	r3, r2
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2203      	movs	r2, #3
 80041d8:	4013      	ands	r3, r2
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d017      	beq.n	800420e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	2203      	movs	r2, #3
 80041ea:	409a      	lsls	r2, r3
 80041ec:	0013      	movs	r3, r2
 80041ee:	43da      	mvns	r2, r3
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	4013      	ands	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	409a      	lsls	r2, r3
 8004200:	0013      	movs	r3, r2
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2203      	movs	r2, #3
 8004214:	4013      	ands	r3, r2
 8004216:	2b02      	cmp	r3, #2
 8004218:	d123      	bne.n	8004262 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	08da      	lsrs	r2, r3, #3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3208      	adds	r2, #8
 8004222:	0092      	lsls	r2, r2, #2
 8004224:	58d3      	ldr	r3, [r2, r3]
 8004226:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2207      	movs	r2, #7
 800422c:	4013      	ands	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	220f      	movs	r2, #15
 8004232:	409a      	lsls	r2, r3
 8004234:	0013      	movs	r3, r2
 8004236:	43da      	mvns	r2, r3
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4013      	ands	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2107      	movs	r1, #7
 8004246:	400b      	ands	r3, r1
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	409a      	lsls	r2, r3
 800424c:	0013      	movs	r3, r2
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	08da      	lsrs	r2, r3, #3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3208      	adds	r2, #8
 800425c:	0092      	lsls	r2, r2, #2
 800425e:	6939      	ldr	r1, [r7, #16]
 8004260:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	2203      	movs	r2, #3
 800426e:	409a      	lsls	r2, r3
 8004270:	0013      	movs	r3, r2
 8004272:	43da      	mvns	r2, r3
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4013      	ands	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2203      	movs	r2, #3
 8004280:	401a      	ands	r2, r3
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	409a      	lsls	r2, r3
 8004288:	0013      	movs	r3, r2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	23c0      	movs	r3, #192	; 0xc0
 800429c:	029b      	lsls	r3, r3, #10
 800429e:	4013      	ands	r3, r2
 80042a0:	d100      	bne.n	80042a4 <HAL_GPIO_Init+0x17c>
 80042a2:	e09a      	b.n	80043da <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042a4:	4b54      	ldr	r3, [pc, #336]	; (80043f8 <HAL_GPIO_Init+0x2d0>)
 80042a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042a8:	4b53      	ldr	r3, [pc, #332]	; (80043f8 <HAL_GPIO_Init+0x2d0>)
 80042aa:	2101      	movs	r1, #1
 80042ac:	430a      	orrs	r2, r1
 80042ae:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80042b0:	4a52      	ldr	r2, [pc, #328]	; (80043fc <HAL_GPIO_Init+0x2d4>)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	089b      	lsrs	r3, r3, #2
 80042b6:	3302      	adds	r3, #2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	589b      	ldr	r3, [r3, r2]
 80042bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2203      	movs	r2, #3
 80042c2:	4013      	ands	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	220f      	movs	r2, #15
 80042c8:	409a      	lsls	r2, r3
 80042ca:	0013      	movs	r3, r2
 80042cc:	43da      	mvns	r2, r3
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	4013      	ands	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	23a0      	movs	r3, #160	; 0xa0
 80042d8:	05db      	lsls	r3, r3, #23
 80042da:	429a      	cmp	r2, r3
 80042dc:	d019      	beq.n	8004312 <HAL_GPIO_Init+0x1ea>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a47      	ldr	r2, [pc, #284]	; (8004400 <HAL_GPIO_Init+0x2d8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <HAL_GPIO_Init+0x1e6>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a46      	ldr	r2, [pc, #280]	; (8004404 <HAL_GPIO_Init+0x2dc>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00d      	beq.n	800430a <HAL_GPIO_Init+0x1e2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a45      	ldr	r2, [pc, #276]	; (8004408 <HAL_GPIO_Init+0x2e0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d007      	beq.n	8004306 <HAL_GPIO_Init+0x1de>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a44      	ldr	r2, [pc, #272]	; (800440c <HAL_GPIO_Init+0x2e4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d101      	bne.n	8004302 <HAL_GPIO_Init+0x1da>
 80042fe:	2305      	movs	r3, #5
 8004300:	e008      	b.n	8004314 <HAL_GPIO_Init+0x1ec>
 8004302:	2306      	movs	r3, #6
 8004304:	e006      	b.n	8004314 <HAL_GPIO_Init+0x1ec>
 8004306:	2303      	movs	r3, #3
 8004308:	e004      	b.n	8004314 <HAL_GPIO_Init+0x1ec>
 800430a:	2302      	movs	r3, #2
 800430c:	e002      	b.n	8004314 <HAL_GPIO_Init+0x1ec>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <HAL_GPIO_Init+0x1ec>
 8004312:	2300      	movs	r3, #0
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	2103      	movs	r1, #3
 8004318:	400a      	ands	r2, r1
 800431a:	0092      	lsls	r2, r2, #2
 800431c:	4093      	lsls	r3, r2
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004324:	4935      	ldr	r1, [pc, #212]	; (80043fc <HAL_GPIO_Init+0x2d4>)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	089b      	lsrs	r3, r3, #2
 800432a:	3302      	adds	r3, #2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004332:	4b37      	ldr	r3, [pc, #220]	; (8004410 <HAL_GPIO_Init+0x2e8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	43da      	mvns	r2, r3
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4013      	ands	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	2380      	movs	r3, #128	; 0x80
 8004348:	025b      	lsls	r3, r3, #9
 800434a:	4013      	ands	r3, r2
 800434c:	d003      	beq.n	8004356 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004356:	4b2e      	ldr	r3, [pc, #184]	; (8004410 <HAL_GPIO_Init+0x2e8>)
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800435c:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <HAL_GPIO_Init+0x2e8>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	43da      	mvns	r2, r3
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4013      	ands	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	2380      	movs	r3, #128	; 0x80
 8004372:	029b      	lsls	r3, r3, #10
 8004374:	4013      	ands	r3, r2
 8004376:	d003      	beq.n	8004380 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004380:	4b23      	ldr	r3, [pc, #140]	; (8004410 <HAL_GPIO_Init+0x2e8>)
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004386:	4b22      	ldr	r3, [pc, #136]	; (8004410 <HAL_GPIO_Init+0x2e8>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	43da      	mvns	r2, r3
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	4013      	ands	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	035b      	lsls	r3, r3, #13
 800439e:	4013      	ands	r3, r2
 80043a0:	d003      	beq.n	80043aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043aa:	4b19      	ldr	r3, [pc, #100]	; (8004410 <HAL_GPIO_Init+0x2e8>)
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80043b0:	4b17      	ldr	r3, [pc, #92]	; (8004410 <HAL_GPIO_Init+0x2e8>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	43da      	mvns	r2, r3
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4013      	ands	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	039b      	lsls	r3, r3, #14
 80043c8:	4013      	ands	r3, r2
 80043ca:	d003      	beq.n	80043d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80043d4:	4b0e      	ldr	r3, [pc, #56]	; (8004410 <HAL_GPIO_Init+0x2e8>)
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	3301      	adds	r3, #1
 80043de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	40da      	lsrs	r2, r3
 80043e8:	1e13      	subs	r3, r2, #0
 80043ea:	d000      	beq.n	80043ee <HAL_GPIO_Init+0x2c6>
 80043ec:	e6a8      	b.n	8004140 <HAL_GPIO_Init+0x18>
  }
}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	46c0      	nop			; (mov r8, r8)
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b006      	add	sp, #24
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40021000 	.word	0x40021000
 80043fc:	40010000 	.word	0x40010000
 8004400:	50000400 	.word	0x50000400
 8004404:	50000800 	.word	0x50000800
 8004408:	50000c00 	.word	0x50000c00
 800440c:	50001c00 	.word	0x50001c00
 8004410:	40010400 	.word	0x40010400

08004414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e082      	b.n	800452c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2241      	movs	r2, #65	; 0x41
 800442a:	5c9b      	ldrb	r3, [r3, r2]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d107      	bne.n	8004442 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2240      	movs	r2, #64	; 0x40
 8004436:	2100      	movs	r1, #0
 8004438:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	0018      	movs	r0, r3
 800443e:	f7fe fba1 	bl	8002b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2241      	movs	r2, #65	; 0x41
 8004446:	2124      	movs	r1, #36	; 0x24
 8004448:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2101      	movs	r1, #1
 8004456:	438a      	bics	r2, r1
 8004458:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4934      	ldr	r1, [pc, #208]	; (8004534 <HAL_I2C_Init+0x120>)
 8004464:	400a      	ands	r2, r1
 8004466:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4931      	ldr	r1, [pc, #196]	; (8004538 <HAL_I2C_Init+0x124>)
 8004474:	400a      	ands	r2, r1
 8004476:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d108      	bne.n	8004492 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2180      	movs	r1, #128	; 0x80
 800448a:	0209      	lsls	r1, r1, #8
 800448c:	430a      	orrs	r2, r1
 800448e:	609a      	str	r2, [r3, #8]
 8004490:	e007      	b.n	80044a2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2184      	movs	r1, #132	; 0x84
 800449c:	0209      	lsls	r1, r1, #8
 800449e:	430a      	orrs	r2, r1
 80044a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d104      	bne.n	80044b4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2280      	movs	r2, #128	; 0x80
 80044b0:	0112      	lsls	r2, r2, #4
 80044b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	491f      	ldr	r1, [pc, #124]	; (800453c <HAL_I2C_Init+0x128>)
 80044c0:	430a      	orrs	r2, r1
 80044c2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	491a      	ldr	r1, [pc, #104]	; (8004538 <HAL_I2C_Init+0x124>)
 80044d0:	400a      	ands	r2, r1
 80044d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	431a      	orrs	r2, r3
 80044de:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69d9      	ldr	r1, [r3, #28]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1a      	ldr	r2, [r3, #32]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2101      	movs	r1, #1
 800450a:	430a      	orrs	r2, r1
 800450c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2241      	movs	r2, #65	; 0x41
 8004518:	2120      	movs	r1, #32
 800451a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2242      	movs	r2, #66	; 0x42
 8004526:	2100      	movs	r1, #0
 8004528:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	0018      	movs	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	b002      	add	sp, #8
 8004532:	bd80      	pop	{r7, pc}
 8004534:	f0ffffff 	.word	0xf0ffffff
 8004538:	ffff7fff 	.word	0xffff7fff
 800453c:	02008000 	.word	0x02008000

08004540 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004540:	b590      	push	{r4, r7, lr}
 8004542:	b089      	sub	sp, #36	; 0x24
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	0008      	movs	r0, r1
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	0019      	movs	r1, r3
 800454e:	230a      	movs	r3, #10
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	1c02      	adds	r2, r0, #0
 8004554:	801a      	strh	r2, [r3, #0]
 8004556:	2308      	movs	r3, #8
 8004558:	18fb      	adds	r3, r7, r3
 800455a:	1c0a      	adds	r2, r1, #0
 800455c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2241      	movs	r2, #65	; 0x41
 8004562:	5c9b      	ldrb	r3, [r3, r2]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b20      	cmp	r3, #32
 8004568:	d000      	beq.n	800456c <HAL_I2C_Master_Transmit+0x2c>
 800456a:	e0e7      	b.n	800473c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2240      	movs	r2, #64	; 0x40
 8004570:	5c9b      	ldrb	r3, [r3, r2]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_I2C_Master_Transmit+0x3a>
 8004576:	2302      	movs	r3, #2
 8004578:	e0e1      	b.n	800473e <HAL_I2C_Master_Transmit+0x1fe>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2240      	movs	r2, #64	; 0x40
 800457e:	2101      	movs	r1, #1
 8004580:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004582:	f7fe fcdf 	bl	8002f44 <HAL_GetTick>
 8004586:	0003      	movs	r3, r0
 8004588:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	0219      	lsls	r1, r3, #8
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	2319      	movs	r3, #25
 8004596:	2201      	movs	r2, #1
 8004598:	f000 f8fc 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 800459c:	1e03      	subs	r3, r0, #0
 800459e:	d001      	beq.n	80045a4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0cc      	b.n	800473e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2241      	movs	r2, #65	; 0x41
 80045a8:	2121      	movs	r1, #33	; 0x21
 80045aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2242      	movs	r2, #66	; 0x42
 80045b0:	2110      	movs	r1, #16
 80045b2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2208      	movs	r2, #8
 80045c4:	18ba      	adds	r2, r7, r2
 80045c6:	8812      	ldrh	r2, [r2, #0]
 80045c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2bff      	cmp	r3, #255	; 0xff
 80045d8:	d911      	bls.n	80045fe <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	22ff      	movs	r2, #255	; 0xff
 80045de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	2380      	movs	r3, #128	; 0x80
 80045e8:	045c      	lsls	r4, r3, #17
 80045ea:	230a      	movs	r3, #10
 80045ec:	18fb      	adds	r3, r7, r3
 80045ee:	8819      	ldrh	r1, [r3, #0]
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	4b55      	ldr	r3, [pc, #340]	; (8004748 <HAL_I2C_Master_Transmit+0x208>)
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	0023      	movs	r3, r4
 80045f8:	f000 fa00 	bl	80049fc <I2C_TransferConfig>
 80045fc:	e075      	b.n	80046ea <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460c:	b2da      	uxtb	r2, r3
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	049c      	lsls	r4, r3, #18
 8004612:	230a      	movs	r3, #10
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	8819      	ldrh	r1, [r3, #0]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	4b4b      	ldr	r3, [pc, #300]	; (8004748 <HAL_I2C_Master_Transmit+0x208>)
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	0023      	movs	r3, r4
 8004620:	f000 f9ec 	bl	80049fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004624:	e061      	b.n	80046ea <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	0018      	movs	r0, r3
 800462e:	f000 f8f0 	bl	8004812 <I2C_WaitOnTXISFlagUntilTimeout>
 8004632:	1e03      	subs	r3, r0, #0
 8004634:	d001      	beq.n	800463a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e081      	b.n	800473e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	781a      	ldrb	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d03a      	beq.n	80046ea <HAL_I2C_Master_Transmit+0x1aa>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004678:	2b00      	cmp	r3, #0
 800467a:	d136      	bne.n	80046ea <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800467c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	0013      	movs	r3, r2
 8004686:	2200      	movs	r2, #0
 8004688:	2180      	movs	r1, #128	; 0x80
 800468a:	f000 f883 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 800468e:	1e03      	subs	r3, r0, #0
 8004690:	d001      	beq.n	8004696 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e053      	b.n	800473e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469a:	b29b      	uxth	r3, r3
 800469c:	2bff      	cmp	r3, #255	; 0xff
 800469e:	d911      	bls.n	80046c4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	22ff      	movs	r2, #255	; 0xff
 80046a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	2380      	movs	r3, #128	; 0x80
 80046ae:	045c      	lsls	r4, r3, #17
 80046b0:	230a      	movs	r3, #10
 80046b2:	18fb      	adds	r3, r7, r3
 80046b4:	8819      	ldrh	r1, [r3, #0]
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	2300      	movs	r3, #0
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	0023      	movs	r3, r4
 80046be:	f000 f99d 	bl	80049fc <I2C_TransferConfig>
 80046c2:	e012      	b.n	80046ea <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	2380      	movs	r3, #128	; 0x80
 80046d6:	049c      	lsls	r4, r3, #18
 80046d8:	230a      	movs	r3, #10
 80046da:	18fb      	adds	r3, r7, r3
 80046dc:	8819      	ldrh	r1, [r3, #0]
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	2300      	movs	r3, #0
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	0023      	movs	r3, r4
 80046e6:	f000 f989 	bl	80049fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d198      	bne.n	8004626 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	0018      	movs	r0, r3
 80046fc:	f000 f8c8 	bl	8004890 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004700:	1e03      	subs	r3, r0, #0
 8004702:	d001      	beq.n	8004708 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e01a      	b.n	800473e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2220      	movs	r2, #32
 800470e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	490c      	ldr	r1, [pc, #48]	; (800474c <HAL_I2C_Master_Transmit+0x20c>)
 800471c:	400a      	ands	r2, r1
 800471e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2241      	movs	r2, #65	; 0x41
 8004724:	2120      	movs	r1, #32
 8004726:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2242      	movs	r2, #66	; 0x42
 800472c:	2100      	movs	r1, #0
 800472e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2240      	movs	r2, #64	; 0x40
 8004734:	2100      	movs	r1, #0
 8004736:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	e000      	b.n	800473e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800473c:	2302      	movs	r3, #2
  }
}
 800473e:	0018      	movs	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	b007      	add	sp, #28
 8004744:	bd90      	pop	{r4, r7, pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	80002000 	.word	0x80002000
 800474c:	fe00e800 	.word	0xfe00e800

08004750 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	2202      	movs	r2, #2
 8004760:	4013      	ands	r3, r2
 8004762:	2b02      	cmp	r3, #2
 8004764:	d103      	bne.n	800476e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2200      	movs	r2, #0
 800476c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	2201      	movs	r2, #1
 8004776:	4013      	ands	r3, r2
 8004778:	2b01      	cmp	r3, #1
 800477a:	d007      	beq.n	800478c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699a      	ldr	r2, [r3, #24]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2101      	movs	r1, #1
 8004788:	430a      	orrs	r2, r1
 800478a:	619a      	str	r2, [r3, #24]
  }
}
 800478c:	46c0      	nop			; (mov r8, r8)
 800478e:	46bd      	mov	sp, r7
 8004790:	b002      	add	sp, #8
 8004792:	bd80      	pop	{r7, pc}

08004794 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	1dfb      	adds	r3, r7, #7
 80047a2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047a4:	e021      	b.n	80047ea <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	3301      	adds	r3, #1
 80047aa:	d01e      	beq.n	80047ea <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ac:	f7fe fbca 	bl	8002f44 <HAL_GetTick>
 80047b0:	0002      	movs	r2, r0
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d302      	bcc.n	80047c2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d113      	bne.n	80047ea <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	2220      	movs	r2, #32
 80047c8:	431a      	orrs	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2241      	movs	r2, #65	; 0x41
 80047d2:	2120      	movs	r1, #32
 80047d4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2242      	movs	r2, #66	; 0x42
 80047da:	2100      	movs	r1, #0
 80047dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2240      	movs	r2, #64	; 0x40
 80047e2:	2100      	movs	r1, #0
 80047e4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e00f      	b.n	800480a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	4013      	ands	r3, r2
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	425a      	negs	r2, r3
 80047fa:	4153      	adcs	r3, r2
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	001a      	movs	r2, r3
 8004800:	1dfb      	adds	r3, r7, #7
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d0ce      	beq.n	80047a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	0018      	movs	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	b004      	add	sp, #16
 8004810:	bd80      	pop	{r7, pc}

08004812 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b084      	sub	sp, #16
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800481e:	e02b      	b.n	8004878 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	0018      	movs	r0, r3
 8004828:	f000 f86e 	bl	8004908 <I2C_IsAcknowledgeFailed>
 800482c:	1e03      	subs	r3, r0, #0
 800482e:	d001      	beq.n	8004834 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e029      	b.n	8004888 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	3301      	adds	r3, #1
 8004838:	d01e      	beq.n	8004878 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483a:	f7fe fb83 	bl	8002f44 <HAL_GetTick>
 800483e:	0002      	movs	r2, r0
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	429a      	cmp	r2, r3
 8004848:	d302      	bcc.n	8004850 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d113      	bne.n	8004878 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004854:	2220      	movs	r2, #32
 8004856:	431a      	orrs	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2241      	movs	r2, #65	; 0x41
 8004860:	2120      	movs	r1, #32
 8004862:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2242      	movs	r2, #66	; 0x42
 8004868:	2100      	movs	r1, #0
 800486a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2240      	movs	r2, #64	; 0x40
 8004870:	2100      	movs	r1, #0
 8004872:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e007      	b.n	8004888 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	2202      	movs	r2, #2
 8004880:	4013      	ands	r3, r2
 8004882:	2b02      	cmp	r3, #2
 8004884:	d1cc      	bne.n	8004820 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	0018      	movs	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	b004      	add	sp, #16
 800488e:	bd80      	pop	{r7, pc}

08004890 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800489c:	e028      	b.n	80048f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	0018      	movs	r0, r3
 80048a6:	f000 f82f 	bl	8004908 <I2C_IsAcknowledgeFailed>
 80048aa:	1e03      	subs	r3, r0, #0
 80048ac:	d001      	beq.n	80048b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e026      	b.n	8004900 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b2:	f7fe fb47 	bl	8002f44 <HAL_GetTick>
 80048b6:	0002      	movs	r2, r0
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d302      	bcc.n	80048c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d113      	bne.n	80048f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048cc:	2220      	movs	r2, #32
 80048ce:	431a      	orrs	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2241      	movs	r2, #65	; 0x41
 80048d8:	2120      	movs	r1, #32
 80048da:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2242      	movs	r2, #66	; 0x42
 80048e0:	2100      	movs	r1, #0
 80048e2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2240      	movs	r2, #64	; 0x40
 80048e8:	2100      	movs	r1, #0
 80048ea:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e007      	b.n	8004900 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	2220      	movs	r2, #32
 80048f8:	4013      	ands	r3, r2
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d1cf      	bne.n	800489e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	0018      	movs	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	b004      	add	sp, #16
 8004906:	bd80      	pop	{r7, pc}

08004908 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	2210      	movs	r2, #16
 800491c:	4013      	ands	r3, r2
 800491e:	2b10      	cmp	r3, #16
 8004920:	d164      	bne.n	80049ec <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	2380      	movs	r3, #128	; 0x80
 800492a:	049b      	lsls	r3, r3, #18
 800492c:	401a      	ands	r2, r3
 800492e:	2380      	movs	r3, #128	; 0x80
 8004930:	049b      	lsls	r3, r3, #18
 8004932:	429a      	cmp	r2, r3
 8004934:	d02b      	beq.n	800498e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2180      	movs	r1, #128	; 0x80
 8004942:	01c9      	lsls	r1, r1, #7
 8004944:	430a      	orrs	r2, r1
 8004946:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004948:	e021      	b.n	800498e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	3301      	adds	r3, #1
 800494e:	d01e      	beq.n	800498e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004950:	f7fe faf8 	bl	8002f44 <HAL_GetTick>
 8004954:	0002      	movs	r2, r0
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	429a      	cmp	r2, r3
 800495e:	d302      	bcc.n	8004966 <I2C_IsAcknowledgeFailed+0x5e>
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d113      	bne.n	800498e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496a:	2220      	movs	r2, #32
 800496c:	431a      	orrs	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2241      	movs	r2, #65	; 0x41
 8004976:	2120      	movs	r1, #32
 8004978:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2242      	movs	r2, #66	; 0x42
 800497e:	2100      	movs	r1, #0
 8004980:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2240      	movs	r2, #64	; 0x40
 8004986:	2100      	movs	r1, #0
 8004988:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e02f      	b.n	80049ee <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	2220      	movs	r2, #32
 8004996:	4013      	ands	r3, r2
 8004998:	2b20      	cmp	r3, #32
 800499a:	d1d6      	bne.n	800494a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2210      	movs	r2, #16
 80049a2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2220      	movs	r2, #32
 80049aa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	0018      	movs	r0, r3
 80049b0:	f7ff fece 	bl	8004750 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	490e      	ldr	r1, [pc, #56]	; (80049f8 <I2C_IsAcknowledgeFailed+0xf0>)
 80049c0:	400a      	ands	r2, r1
 80049c2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c8:	2204      	movs	r2, #4
 80049ca:	431a      	orrs	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2241      	movs	r2, #65	; 0x41
 80049d4:	2120      	movs	r1, #32
 80049d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2242      	movs	r2, #66	; 0x42
 80049dc:	2100      	movs	r1, #0
 80049de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2240      	movs	r2, #64	; 0x40
 80049e4:	2100      	movs	r1, #0
 80049e6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	0018      	movs	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b004      	add	sp, #16
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	fe00e800 	.word	0xfe00e800

080049fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049fc:	b590      	push	{r4, r7, lr}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	0008      	movs	r0, r1
 8004a06:	0011      	movs	r1, r2
 8004a08:	607b      	str	r3, [r7, #4]
 8004a0a:	240a      	movs	r4, #10
 8004a0c:	193b      	adds	r3, r7, r4
 8004a0e:	1c02      	adds	r2, r0, #0
 8004a10:	801a      	strh	r2, [r3, #0]
 8004a12:	2009      	movs	r0, #9
 8004a14:	183b      	adds	r3, r7, r0
 8004a16:	1c0a      	adds	r2, r1, #0
 8004a18:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	6a3a      	ldr	r2, [r7, #32]
 8004a22:	0d51      	lsrs	r1, r2, #21
 8004a24:	2280      	movs	r2, #128	; 0x80
 8004a26:	00d2      	lsls	r2, r2, #3
 8004a28:	400a      	ands	r2, r1
 8004a2a:	490e      	ldr	r1, [pc, #56]	; (8004a64 <I2C_TransferConfig+0x68>)
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	43d2      	mvns	r2, r2
 8004a30:	401a      	ands	r2, r3
 8004a32:	0011      	movs	r1, r2
 8004a34:	193b      	adds	r3, r7, r4
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	059b      	lsls	r3, r3, #22
 8004a3a:	0d9a      	lsrs	r2, r3, #22
 8004a3c:	183b      	adds	r3, r7, r0
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	0418      	lsls	r0, r3, #16
 8004a42:	23ff      	movs	r3, #255	; 0xff
 8004a44:	041b      	lsls	r3, r3, #16
 8004a46:	4003      	ands	r3, r0
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b005      	add	sp, #20
 8004a60:	bd90      	pop	{r4, r7, pc}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	03ff63ff 	.word	0x03ff63ff

08004a68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2241      	movs	r2, #65	; 0x41
 8004a76:	5c9b      	ldrb	r3, [r3, r2]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	d138      	bne.n	8004af0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2240      	movs	r2, #64	; 0x40
 8004a82:	5c9b      	ldrb	r3, [r3, r2]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e032      	b.n	8004af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2240      	movs	r2, #64	; 0x40
 8004a90:	2101      	movs	r1, #1
 8004a92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2241      	movs	r2, #65	; 0x41
 8004a98:	2124      	movs	r1, #36	; 0x24
 8004a9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	438a      	bics	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4911      	ldr	r1, [pc, #68]	; (8004afc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004ab8:	400a      	ands	r2, r1
 8004aba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2241      	movs	r2, #65	; 0x41
 8004ae0:	2120      	movs	r1, #32
 8004ae2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2240      	movs	r2, #64	; 0x40
 8004ae8:	2100      	movs	r1, #0
 8004aea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e000      	b.n	8004af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004af0:	2302      	movs	r3, #2
  }
}
 8004af2:	0018      	movs	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	b002      	add	sp, #8
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	ffffefff 	.word	0xffffefff

08004b00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2241      	movs	r2, #65	; 0x41
 8004b0e:	5c9b      	ldrb	r3, [r3, r2]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	d139      	bne.n	8004b8a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2240      	movs	r2, #64	; 0x40
 8004b1a:	5c9b      	ldrb	r3, [r3, r2]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e033      	b.n	8004b8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2240      	movs	r2, #64	; 0x40
 8004b28:	2101      	movs	r1, #1
 8004b2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2241      	movs	r2, #65	; 0x41
 8004b30:	2124      	movs	r1, #36	; 0x24
 8004b32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2101      	movs	r1, #1
 8004b40:	438a      	bics	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4a11      	ldr	r2, [pc, #68]	; (8004b94 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2101      	movs	r1, #1
 8004b72:	430a      	orrs	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2241      	movs	r2, #65	; 0x41
 8004b7a:	2120      	movs	r1, #32
 8004b7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2240      	movs	r2, #64	; 0x40
 8004b82:	2100      	movs	r1, #0
 8004b84:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	e000      	b.n	8004b8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b8a:	2302      	movs	r3, #2
  }
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b004      	add	sp, #16
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	fffff0ff 	.word	0xfffff0ff

08004b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b98:	b5b0      	push	{r4, r5, r7, lr}
 8004b9a:	b08a      	sub	sp, #40	; 0x28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d102      	bne.n	8004bac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f000 fb6c 	bl	8005284 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bac:	4bc8      	ldr	r3, [pc, #800]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	220c      	movs	r2, #12
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bb6:	4bc6      	ldr	r3, [pc, #792]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	025b      	lsls	r3, r3, #9
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d100      	bne.n	8004bce <HAL_RCC_OscConfig+0x36>
 8004bcc:	e07d      	b.n	8004cca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d007      	beq.n	8004be4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	2b0c      	cmp	r3, #12
 8004bd8:	d112      	bne.n	8004c00 <HAL_RCC_OscConfig+0x68>
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	2380      	movs	r3, #128	; 0x80
 8004bde:	025b      	lsls	r3, r3, #9
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d10d      	bne.n	8004c00 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	4bba      	ldr	r3, [pc, #744]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	2380      	movs	r3, #128	; 0x80
 8004bea:	029b      	lsls	r3, r3, #10
 8004bec:	4013      	ands	r3, r2
 8004bee:	d100      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x5a>
 8004bf0:	e06a      	b.n	8004cc8 <HAL_RCC_OscConfig+0x130>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d166      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f000 fb42 	bl	8005284 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	2380      	movs	r3, #128	; 0x80
 8004c06:	025b      	lsls	r3, r3, #9
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d107      	bne.n	8004c1c <HAL_RCC_OscConfig+0x84>
 8004c0c:	4bb0      	ldr	r3, [pc, #704]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	4baf      	ldr	r3, [pc, #700]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004c12:	2180      	movs	r1, #128	; 0x80
 8004c14:	0249      	lsls	r1, r1, #9
 8004c16:	430a      	orrs	r2, r1
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	e027      	b.n	8004c6c <HAL_RCC_OscConfig+0xd4>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	23a0      	movs	r3, #160	; 0xa0
 8004c22:	02db      	lsls	r3, r3, #11
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d10e      	bne.n	8004c46 <HAL_RCC_OscConfig+0xae>
 8004c28:	4ba9      	ldr	r3, [pc, #676]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4ba8      	ldr	r3, [pc, #672]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004c2e:	2180      	movs	r1, #128	; 0x80
 8004c30:	02c9      	lsls	r1, r1, #11
 8004c32:	430a      	orrs	r2, r1
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	4ba6      	ldr	r3, [pc, #664]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4ba5      	ldr	r3, [pc, #660]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004c3c:	2180      	movs	r1, #128	; 0x80
 8004c3e:	0249      	lsls	r1, r1, #9
 8004c40:	430a      	orrs	r2, r1
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	e012      	b.n	8004c6c <HAL_RCC_OscConfig+0xd4>
 8004c46:	4ba2      	ldr	r3, [pc, #648]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	4ba1      	ldr	r3, [pc, #644]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004c4c:	49a1      	ldr	r1, [pc, #644]	; (8004ed4 <HAL_RCC_OscConfig+0x33c>)
 8004c4e:	400a      	ands	r2, r1
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	4b9f      	ldr	r3, [pc, #636]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	2380      	movs	r3, #128	; 0x80
 8004c58:	025b      	lsls	r3, r3, #9
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4b9b      	ldr	r3, [pc, #620]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b9a      	ldr	r3, [pc, #616]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004c66:	499c      	ldr	r1, [pc, #624]	; (8004ed8 <HAL_RCC_OscConfig+0x340>)
 8004c68:	400a      	ands	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d014      	beq.n	8004c9e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fe f966 	bl	8002f44 <HAL_GetTick>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c7e:	f7fe f961 	bl	8002f44 <HAL_GetTick>
 8004c82:	0002      	movs	r2, r0
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b64      	cmp	r3, #100	; 0x64
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e2f9      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c90:	4b8f      	ldr	r3, [pc, #572]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	2380      	movs	r3, #128	; 0x80
 8004c96:	029b      	lsls	r3, r3, #10
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0xe6>
 8004c9c:	e015      	b.n	8004cca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9e:	f7fe f951 	bl	8002f44 <HAL_GetTick>
 8004ca2:	0003      	movs	r3, r0
 8004ca4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca8:	f7fe f94c 	bl	8002f44 <HAL_GetTick>
 8004cac:	0002      	movs	r2, r0
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b64      	cmp	r3, #100	; 0x64
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e2e4      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cba:	4b85      	ldr	r3, [pc, #532]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	2380      	movs	r3, #128	; 0x80
 8004cc0:	029b      	lsls	r3, r3, #10
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d1f0      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x110>
 8004cc6:	e000      	b.n	8004cca <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d100      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x13e>
 8004cd4:	e099      	b.n	8004e0a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	2220      	movs	r2, #32
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	d009      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004ce4:	4b7a      	ldr	r3, [pc, #488]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	4b79      	ldr	r3, [pc, #484]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004cea:	2120      	movs	r1, #32
 8004cec:	430a      	orrs	r2, r1
 8004cee:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	4393      	bics	r3, r2
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d005      	beq.n	8004d0a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	2b0c      	cmp	r3, #12
 8004d02:	d13e      	bne.n	8004d82 <HAL_RCC_OscConfig+0x1ea>
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d13b      	bne.n	8004d82 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004d0a:	4b71      	ldr	r3, [pc, #452]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2204      	movs	r2, #4
 8004d10:	4013      	ands	r3, r2
 8004d12:	d004      	beq.n	8004d1e <HAL_RCC_OscConfig+0x186>
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e2b2      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1e:	4b6c      	ldr	r3, [pc, #432]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	4a6e      	ldr	r2, [pc, #440]	; (8004edc <HAL_RCC_OscConfig+0x344>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	0019      	movs	r1, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	021a      	lsls	r2, r3, #8
 8004d2e:	4b68      	ldr	r3, [pc, #416]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004d30:	430a      	orrs	r2, r1
 8004d32:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004d34:	4b66      	ldr	r3, [pc, #408]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2209      	movs	r2, #9
 8004d3a:	4393      	bics	r3, r2
 8004d3c:	0019      	movs	r1, r3
 8004d3e:	4b64      	ldr	r3, [pc, #400]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d42:	430a      	orrs	r2, r1
 8004d44:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d46:	f000 fbeb 	bl	8005520 <HAL_RCC_GetSysClockFreq>
 8004d4a:	0001      	movs	r1, r0
 8004d4c:	4b60      	ldr	r3, [pc, #384]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	091b      	lsrs	r3, r3, #4
 8004d52:	220f      	movs	r2, #15
 8004d54:	4013      	ands	r3, r2
 8004d56:	4a62      	ldr	r2, [pc, #392]	; (8004ee0 <HAL_RCC_OscConfig+0x348>)
 8004d58:	5cd3      	ldrb	r3, [r2, r3]
 8004d5a:	000a      	movs	r2, r1
 8004d5c:	40da      	lsrs	r2, r3
 8004d5e:	4b61      	ldr	r3, [pc, #388]	; (8004ee4 <HAL_RCC_OscConfig+0x34c>)
 8004d60:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004d62:	4b61      	ldr	r3, [pc, #388]	; (8004ee8 <HAL_RCC_OscConfig+0x350>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2513      	movs	r5, #19
 8004d68:	197c      	adds	r4, r7, r5
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f7fe f8a4 	bl	8002eb8 <HAL_InitTick>
 8004d70:	0003      	movs	r3, r0
 8004d72:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004d74:	197b      	adds	r3, r7, r5
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d046      	beq.n	8004e0a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004d7c:	197b      	adds	r3, r7, r5
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	e280      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d027      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004d88:	4b51      	ldr	r3, [pc, #324]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2209      	movs	r2, #9
 8004d8e:	4393      	bics	r3, r2
 8004d90:	0019      	movs	r1, r3
 8004d92:	4b4f      	ldr	r3, [pc, #316]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d96:	430a      	orrs	r2, r1
 8004d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9a:	f7fe f8d3 	bl	8002f44 <HAL_GetTick>
 8004d9e:	0003      	movs	r3, r0
 8004da0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da4:	f7fe f8ce 	bl	8002f44 <HAL_GetTick>
 8004da8:	0002      	movs	r2, r0
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e266      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004db6:	4b46      	ldr	r3, [pc, #280]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2204      	movs	r2, #4
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	d0f1      	beq.n	8004da4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc0:	4b43      	ldr	r3, [pc, #268]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	4a45      	ldr	r2, [pc, #276]	; (8004edc <HAL_RCC_OscConfig+0x344>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	0019      	movs	r1, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	021a      	lsls	r2, r3, #8
 8004dd0:	4b3f      	ldr	r3, [pc, #252]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
 8004dd6:	e018      	b.n	8004e0a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dd8:	4b3d      	ldr	r3, [pc, #244]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4b3c      	ldr	r3, [pc, #240]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004dde:	2101      	movs	r1, #1
 8004de0:	438a      	bics	r2, r1
 8004de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de4:	f7fe f8ae 	bl	8002f44 <HAL_GetTick>
 8004de8:	0003      	movs	r3, r0
 8004dea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dee:	f7fe f8a9 	bl	8002f44 <HAL_GetTick>
 8004df2:	0002      	movs	r2, r0
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e241      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e00:	4b33      	ldr	r3, [pc, #204]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2204      	movs	r2, #4
 8004e06:	4013      	ands	r3, r2
 8004e08:	d1f1      	bne.n	8004dee <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2210      	movs	r2, #16
 8004e10:	4013      	ands	r3, r2
 8004e12:	d100      	bne.n	8004e16 <HAL_RCC_OscConfig+0x27e>
 8004e14:	e0a1      	b.n	8004f5a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d140      	bne.n	8004e9e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e1c:	4b2c      	ldr	r3, [pc, #176]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	2380      	movs	r3, #128	; 0x80
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4013      	ands	r3, r2
 8004e26:	d005      	beq.n	8004e34 <HAL_RCC_OscConfig+0x29c>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e227      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e34:	4b26      	ldr	r3, [pc, #152]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	4a2c      	ldr	r2, [pc, #176]	; (8004eec <HAL_RCC_OscConfig+0x354>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	0019      	movs	r1, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1a      	ldr	r2, [r3, #32]
 8004e42:	4b23      	ldr	r3, [pc, #140]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004e44:	430a      	orrs	r2, r1
 8004e46:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e48:	4b21      	ldr	r3, [pc, #132]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	021b      	lsls	r3, r3, #8
 8004e4e:	0a19      	lsrs	r1, r3, #8
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	061a      	lsls	r2, r3, #24
 8004e56:	4b1e      	ldr	r3, [pc, #120]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	0b5b      	lsrs	r3, r3, #13
 8004e62:	3301      	adds	r3, #1
 8004e64:	2280      	movs	r2, #128	; 0x80
 8004e66:	0212      	lsls	r2, r2, #8
 8004e68:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004e6a:	4b19      	ldr	r3, [pc, #100]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	091b      	lsrs	r3, r3, #4
 8004e70:	210f      	movs	r1, #15
 8004e72:	400b      	ands	r3, r1
 8004e74:	491a      	ldr	r1, [pc, #104]	; (8004ee0 <HAL_RCC_OscConfig+0x348>)
 8004e76:	5ccb      	ldrb	r3, [r1, r3]
 8004e78:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004e7a:	4b1a      	ldr	r3, [pc, #104]	; (8004ee4 <HAL_RCC_OscConfig+0x34c>)
 8004e7c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004e7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ee8 <HAL_RCC_OscConfig+0x350>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2513      	movs	r5, #19
 8004e84:	197c      	adds	r4, r7, r5
 8004e86:	0018      	movs	r0, r3
 8004e88:	f7fe f816 	bl	8002eb8 <HAL_InitTick>
 8004e8c:	0003      	movs	r3, r0
 8004e8e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004e90:	197b      	adds	r3, r7, r5
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d060      	beq.n	8004f5a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8004e98:	197b      	adds	r3, r7, r5
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	e1f2      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d03f      	beq.n	8004f26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ea6:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <HAL_RCC_OscConfig+0x338>)
 8004eac:	2180      	movs	r1, #128	; 0x80
 8004eae:	0049      	lsls	r1, r1, #1
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb4:	f7fe f846 	bl	8002f44 <HAL_GetTick>
 8004eb8:	0003      	movs	r3, r0
 8004eba:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004ebc:	e018      	b.n	8004ef0 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ebe:	f7fe f841 	bl	8002f44 <HAL_GetTick>
 8004ec2:	0002      	movs	r2, r0
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d911      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e1d9      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	fffeffff 	.word	0xfffeffff
 8004ed8:	fffbffff 	.word	0xfffbffff
 8004edc:	ffffe0ff 	.word	0xffffe0ff
 8004ee0:	08008908 	.word	0x08008908
 8004ee4:	20000000 	.word	0x20000000
 8004ee8:	20000004 	.word	0x20000004
 8004eec:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004ef0:	4bc9      	ldr	r3, [pc, #804]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	2380      	movs	r3, #128	; 0x80
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d0e0      	beq.n	8004ebe <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004efc:	4bc6      	ldr	r3, [pc, #792]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	4ac6      	ldr	r2, [pc, #792]	; (800521c <HAL_RCC_OscConfig+0x684>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	0019      	movs	r1, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1a      	ldr	r2, [r3, #32]
 8004f0a:	4bc3      	ldr	r3, [pc, #780]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f10:	4bc1      	ldr	r3, [pc, #772]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	0a19      	lsrs	r1, r3, #8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	061a      	lsls	r2, r3, #24
 8004f1e:	4bbe      	ldr	r3, [pc, #760]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8004f20:	430a      	orrs	r2, r1
 8004f22:	605a      	str	r2, [r3, #4]
 8004f24:	e019      	b.n	8004f5a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f26:	4bbc      	ldr	r3, [pc, #752]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4bbb      	ldr	r3, [pc, #748]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8004f2c:	49bc      	ldr	r1, [pc, #752]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8004f2e:	400a      	ands	r2, r1
 8004f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f32:	f7fe f807 	bl	8002f44 <HAL_GetTick>
 8004f36:	0003      	movs	r3, r0
 8004f38:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f3c:	f7fe f802 	bl	8002f44 <HAL_GetTick>
 8004f40:	0002      	movs	r2, r0
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e19a      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004f4e:	4bb2      	ldr	r3, [pc, #712]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	2380      	movs	r3, #128	; 0x80
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4013      	ands	r3, r2
 8004f58:	d1f0      	bne.n	8004f3c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2208      	movs	r2, #8
 8004f60:	4013      	ands	r3, r2
 8004f62:	d036      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d019      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f6c:	4baa      	ldr	r3, [pc, #680]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8004f6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f70:	4ba9      	ldr	r3, [pc, #676]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8004f72:	2101      	movs	r1, #1
 8004f74:	430a      	orrs	r2, r1
 8004f76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f78:	f7fd ffe4 	bl	8002f44 <HAL_GetTick>
 8004f7c:	0003      	movs	r3, r0
 8004f7e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f82:	f7fd ffdf 	bl	8002f44 <HAL_GetTick>
 8004f86:	0002      	movs	r2, r0
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e177      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f94:	4ba0      	ldr	r3, [pc, #640]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8004f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f98:	2202      	movs	r2, #2
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d0f1      	beq.n	8004f82 <HAL_RCC_OscConfig+0x3ea>
 8004f9e:	e018      	b.n	8004fd2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fa0:	4b9d      	ldr	r3, [pc, #628]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8004fa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fa4:	4b9c      	ldr	r3, [pc, #624]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	438a      	bics	r2, r1
 8004faa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fac:	f7fd ffca 	bl	8002f44 <HAL_GetTick>
 8004fb0:	0003      	movs	r3, r0
 8004fb2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fb6:	f7fd ffc5 	bl	8002f44 <HAL_GetTick>
 8004fba:	0002      	movs	r2, r0
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e15d      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fc8:	4b93      	ldr	r3, [pc, #588]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8004fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fcc:	2202      	movs	r2, #2
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d1f1      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2204      	movs	r2, #4
 8004fd8:	4013      	ands	r3, r2
 8004fda:	d100      	bne.n	8004fde <HAL_RCC_OscConfig+0x446>
 8004fdc:	e0ae      	b.n	800513c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fde:	2023      	movs	r0, #35	; 0x23
 8004fe0:	183b      	adds	r3, r7, r0
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe6:	4b8c      	ldr	r3, [pc, #560]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8004fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fea:	2380      	movs	r3, #128	; 0x80
 8004fec:	055b      	lsls	r3, r3, #21
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d109      	bne.n	8005006 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff2:	4b89      	ldr	r3, [pc, #548]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8004ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff6:	4b88      	ldr	r3, [pc, #544]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8004ff8:	2180      	movs	r1, #128	; 0x80
 8004ffa:	0549      	lsls	r1, r1, #21
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005000:	183b      	adds	r3, r7, r0
 8005002:	2201      	movs	r2, #1
 8005004:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005006:	4b87      	ldr	r3, [pc, #540]	; (8005224 <HAL_RCC_OscConfig+0x68c>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	2380      	movs	r3, #128	; 0x80
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	4013      	ands	r3, r2
 8005010:	d11a      	bne.n	8005048 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005012:	4b84      	ldr	r3, [pc, #528]	; (8005224 <HAL_RCC_OscConfig+0x68c>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4b83      	ldr	r3, [pc, #524]	; (8005224 <HAL_RCC_OscConfig+0x68c>)
 8005018:	2180      	movs	r1, #128	; 0x80
 800501a:	0049      	lsls	r1, r1, #1
 800501c:	430a      	orrs	r2, r1
 800501e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005020:	f7fd ff90 	bl	8002f44 <HAL_GetTick>
 8005024:	0003      	movs	r3, r0
 8005026:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502a:	f7fd ff8b 	bl	8002f44 <HAL_GetTick>
 800502e:	0002      	movs	r2, r0
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b64      	cmp	r3, #100	; 0x64
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e123      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503c:	4b79      	ldr	r3, [pc, #484]	; (8005224 <HAL_RCC_OscConfig+0x68c>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	2380      	movs	r3, #128	; 0x80
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	4013      	ands	r3, r2
 8005046:	d0f0      	beq.n	800502a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	2380      	movs	r3, #128	; 0x80
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	429a      	cmp	r2, r3
 8005052:	d107      	bne.n	8005064 <HAL_RCC_OscConfig+0x4cc>
 8005054:	4b70      	ldr	r3, [pc, #448]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8005056:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005058:	4b6f      	ldr	r3, [pc, #444]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 800505a:	2180      	movs	r1, #128	; 0x80
 800505c:	0049      	lsls	r1, r1, #1
 800505e:	430a      	orrs	r2, r1
 8005060:	651a      	str	r2, [r3, #80]	; 0x50
 8005062:	e031      	b.n	80050c8 <HAL_RCC_OscConfig+0x530>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10c      	bne.n	8005086 <HAL_RCC_OscConfig+0x4ee>
 800506c:	4b6a      	ldr	r3, [pc, #424]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 800506e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005070:	4b69      	ldr	r3, [pc, #420]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8005072:	496b      	ldr	r1, [pc, #428]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 8005074:	400a      	ands	r2, r1
 8005076:	651a      	str	r2, [r3, #80]	; 0x50
 8005078:	4b67      	ldr	r3, [pc, #412]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 800507a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800507c:	4b66      	ldr	r3, [pc, #408]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 800507e:	496a      	ldr	r1, [pc, #424]	; (8005228 <HAL_RCC_OscConfig+0x690>)
 8005080:	400a      	ands	r2, r1
 8005082:	651a      	str	r2, [r3, #80]	; 0x50
 8005084:	e020      	b.n	80050c8 <HAL_RCC_OscConfig+0x530>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	23a0      	movs	r3, #160	; 0xa0
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	429a      	cmp	r2, r3
 8005090:	d10e      	bne.n	80050b0 <HAL_RCC_OscConfig+0x518>
 8005092:	4b61      	ldr	r3, [pc, #388]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8005094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005096:	4b60      	ldr	r3, [pc, #384]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8005098:	2180      	movs	r1, #128	; 0x80
 800509a:	00c9      	lsls	r1, r1, #3
 800509c:	430a      	orrs	r2, r1
 800509e:	651a      	str	r2, [r3, #80]	; 0x50
 80050a0:	4b5d      	ldr	r3, [pc, #372]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 80050a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050a4:	4b5c      	ldr	r3, [pc, #368]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 80050a6:	2180      	movs	r1, #128	; 0x80
 80050a8:	0049      	lsls	r1, r1, #1
 80050aa:	430a      	orrs	r2, r1
 80050ac:	651a      	str	r2, [r3, #80]	; 0x50
 80050ae:	e00b      	b.n	80050c8 <HAL_RCC_OscConfig+0x530>
 80050b0:	4b59      	ldr	r3, [pc, #356]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 80050b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050b4:	4b58      	ldr	r3, [pc, #352]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 80050b6:	495a      	ldr	r1, [pc, #360]	; (8005220 <HAL_RCC_OscConfig+0x688>)
 80050b8:	400a      	ands	r2, r1
 80050ba:	651a      	str	r2, [r3, #80]	; 0x50
 80050bc:	4b56      	ldr	r3, [pc, #344]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 80050be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050c0:	4b55      	ldr	r3, [pc, #340]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 80050c2:	4959      	ldr	r1, [pc, #356]	; (8005228 <HAL_RCC_OscConfig+0x690>)
 80050c4:	400a      	ands	r2, r1
 80050c6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d015      	beq.n	80050fc <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d0:	f7fd ff38 	bl	8002f44 <HAL_GetTick>
 80050d4:	0003      	movs	r3, r0
 80050d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050d8:	e009      	b.n	80050ee <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050da:	f7fd ff33 	bl	8002f44 <HAL_GetTick>
 80050de:	0002      	movs	r2, r0
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	4a51      	ldr	r2, [pc, #324]	; (800522c <HAL_RCC_OscConfig+0x694>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e0ca      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050ee:	4b4a      	ldr	r3, [pc, #296]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 80050f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050f2:	2380      	movs	r3, #128	; 0x80
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4013      	ands	r3, r2
 80050f8:	d0ef      	beq.n	80050da <HAL_RCC_OscConfig+0x542>
 80050fa:	e014      	b.n	8005126 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050fc:	f7fd ff22 	bl	8002f44 <HAL_GetTick>
 8005100:	0003      	movs	r3, r0
 8005102:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005104:	e009      	b.n	800511a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005106:	f7fd ff1d 	bl	8002f44 <HAL_GetTick>
 800510a:	0002      	movs	r2, r0
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	4a46      	ldr	r2, [pc, #280]	; (800522c <HAL_RCC_OscConfig+0x694>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e0b4      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800511a:	4b3f      	ldr	r3, [pc, #252]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 800511c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800511e:	2380      	movs	r3, #128	; 0x80
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4013      	ands	r3, r2
 8005124:	d1ef      	bne.n	8005106 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005126:	2323      	movs	r3, #35	; 0x23
 8005128:	18fb      	adds	r3, r7, r3
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d105      	bne.n	800513c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005130:	4b39      	ldr	r3, [pc, #228]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8005132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005134:	4b38      	ldr	r3, [pc, #224]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8005136:	493e      	ldr	r1, [pc, #248]	; (8005230 <HAL_RCC_OscConfig+0x698>)
 8005138:	400a      	ands	r2, r1
 800513a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	2b00      	cmp	r3, #0
 8005142:	d100      	bne.n	8005146 <HAL_RCC_OscConfig+0x5ae>
 8005144:	e09d      	b.n	8005282 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	2b0c      	cmp	r3, #12
 800514a:	d100      	bne.n	800514e <HAL_RCC_OscConfig+0x5b6>
 800514c:	e076      	b.n	800523c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	2b02      	cmp	r3, #2
 8005154:	d145      	bne.n	80051e2 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005156:	4b30      	ldr	r3, [pc, #192]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	4b2f      	ldr	r3, [pc, #188]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 800515c:	4935      	ldr	r1, [pc, #212]	; (8005234 <HAL_RCC_OscConfig+0x69c>)
 800515e:	400a      	ands	r2, r1
 8005160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005162:	f7fd feef 	bl	8002f44 <HAL_GetTick>
 8005166:	0003      	movs	r3, r0
 8005168:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800516c:	f7fd feea 	bl	8002f44 <HAL_GetTick>
 8005170:	0002      	movs	r2, r0
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e082      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800517e:	4b26      	ldr	r3, [pc, #152]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	2380      	movs	r3, #128	; 0x80
 8005184:	049b      	lsls	r3, r3, #18
 8005186:	4013      	ands	r3, r2
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800518a:	4b23      	ldr	r3, [pc, #140]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	4a2a      	ldr	r2, [pc, #168]	; (8005238 <HAL_RCC_OscConfig+0x6a0>)
 8005190:	4013      	ands	r3, r2
 8005192:	0019      	movs	r1, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a2:	431a      	orrs	r2, r3
 80051a4:	4b1c      	ldr	r3, [pc, #112]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 80051a6:	430a      	orrs	r2, r1
 80051a8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051aa:	4b1b      	ldr	r3, [pc, #108]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4b1a      	ldr	r3, [pc, #104]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 80051b0:	2180      	movs	r1, #128	; 0x80
 80051b2:	0449      	lsls	r1, r1, #17
 80051b4:	430a      	orrs	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b8:	f7fd fec4 	bl	8002f44 <HAL_GetTick>
 80051bc:	0003      	movs	r3, r0
 80051be:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051c2:	f7fd febf 	bl	8002f44 <HAL_GetTick>
 80051c6:	0002      	movs	r2, r0
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e057      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80051d4:	4b10      	ldr	r3, [pc, #64]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	2380      	movs	r3, #128	; 0x80
 80051da:	049b      	lsls	r3, r3, #18
 80051dc:	4013      	ands	r3, r2
 80051de:	d0f0      	beq.n	80051c2 <HAL_RCC_OscConfig+0x62a>
 80051e0:	e04f      	b.n	8005282 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e2:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 80051e8:	4912      	ldr	r1, [pc, #72]	; (8005234 <HAL_RCC_OscConfig+0x69c>)
 80051ea:	400a      	ands	r2, r1
 80051ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ee:	f7fd fea9 	bl	8002f44 <HAL_GetTick>
 80051f2:	0003      	movs	r3, r0
 80051f4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f8:	f7fd fea4 	bl	8002f44 <HAL_GetTick>
 80051fc:	0002      	movs	r2, r0
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e03c      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800520a:	4b03      	ldr	r3, [pc, #12]	; (8005218 <HAL_RCC_OscConfig+0x680>)
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	2380      	movs	r3, #128	; 0x80
 8005210:	049b      	lsls	r3, r3, #18
 8005212:	4013      	ands	r3, r2
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x660>
 8005216:	e034      	b.n	8005282 <HAL_RCC_OscConfig+0x6ea>
 8005218:	40021000 	.word	0x40021000
 800521c:	ffff1fff 	.word	0xffff1fff
 8005220:	fffffeff 	.word	0xfffffeff
 8005224:	40007000 	.word	0x40007000
 8005228:	fffffbff 	.word	0xfffffbff
 800522c:	00001388 	.word	0x00001388
 8005230:	efffffff 	.word	0xefffffff
 8005234:	feffffff 	.word	0xfeffffff
 8005238:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e01d      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005248:	4b10      	ldr	r3, [pc, #64]	; (800528c <HAL_RCC_OscConfig+0x6f4>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	025b      	lsls	r3, r3, #9
 8005254:	401a      	ands	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	429a      	cmp	r2, r3
 800525c:	d10f      	bne.n	800527e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	23f0      	movs	r3, #240	; 0xf0
 8005262:	039b      	lsls	r3, r3, #14
 8005264:	401a      	ands	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800526a:	429a      	cmp	r2, r3
 800526c:	d107      	bne.n	800527e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	23c0      	movs	r3, #192	; 0xc0
 8005272:	041b      	lsls	r3, r3, #16
 8005274:	401a      	ands	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800527a:	429a      	cmp	r2, r3
 800527c:	d001      	beq.n	8005282 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	0018      	movs	r0, r3
 8005286:	46bd      	mov	sp, r7
 8005288:	b00a      	add	sp, #40	; 0x28
 800528a:	bdb0      	pop	{r4, r5, r7, pc}
 800528c:	40021000 	.word	0x40021000

08005290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005290:	b5b0      	push	{r4, r5, r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e128      	b.n	80054f6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052a4:	4b96      	ldr	r3, [pc, #600]	; (8005500 <HAL_RCC_ClockConfig+0x270>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2201      	movs	r2, #1
 80052aa:	4013      	ands	r3, r2
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d91e      	bls.n	80052f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b2:	4b93      	ldr	r3, [pc, #588]	; (8005500 <HAL_RCC_ClockConfig+0x270>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2201      	movs	r2, #1
 80052b8:	4393      	bics	r3, r2
 80052ba:	0019      	movs	r1, r3
 80052bc:	4b90      	ldr	r3, [pc, #576]	; (8005500 <HAL_RCC_ClockConfig+0x270>)
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80052c4:	f7fd fe3e 	bl	8002f44 <HAL_GetTick>
 80052c8:	0003      	movs	r3, r0
 80052ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052cc:	e009      	b.n	80052e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ce:	f7fd fe39 	bl	8002f44 <HAL_GetTick>
 80052d2:	0002      	movs	r2, r0
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	4a8a      	ldr	r2, [pc, #552]	; (8005504 <HAL_RCC_ClockConfig+0x274>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e109      	b.n	80054f6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e2:	4b87      	ldr	r3, [pc, #540]	; (8005500 <HAL_RCC_ClockConfig+0x270>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2201      	movs	r2, #1
 80052e8:	4013      	ands	r3, r2
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d1ee      	bne.n	80052ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2202      	movs	r2, #2
 80052f6:	4013      	ands	r3, r2
 80052f8:	d009      	beq.n	800530e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052fa:	4b83      	ldr	r3, [pc, #524]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	22f0      	movs	r2, #240	; 0xf0
 8005300:	4393      	bics	r3, r2
 8005302:	0019      	movs	r1, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	4b7f      	ldr	r3, [pc, #508]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 800530a:	430a      	orrs	r2, r1
 800530c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2201      	movs	r2, #1
 8005314:	4013      	ands	r3, r2
 8005316:	d100      	bne.n	800531a <HAL_RCC_ClockConfig+0x8a>
 8005318:	e089      	b.n	800542e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d107      	bne.n	8005332 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005322:	4b79      	ldr	r3, [pc, #484]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	2380      	movs	r3, #128	; 0x80
 8005328:	029b      	lsls	r3, r3, #10
 800532a:	4013      	ands	r3, r2
 800532c:	d120      	bne.n	8005370 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e0e1      	b.n	80054f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b03      	cmp	r3, #3
 8005338:	d107      	bne.n	800534a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800533a:	4b73      	ldr	r3, [pc, #460]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	2380      	movs	r3, #128	; 0x80
 8005340:	049b      	lsls	r3, r3, #18
 8005342:	4013      	ands	r3, r2
 8005344:	d114      	bne.n	8005370 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e0d5      	b.n	80054f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d106      	bne.n	8005360 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005352:	4b6d      	ldr	r3, [pc, #436]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2204      	movs	r2, #4
 8005358:	4013      	ands	r3, r2
 800535a:	d109      	bne.n	8005370 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e0ca      	b.n	80054f6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005360:	4b69      	ldr	r3, [pc, #420]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	2380      	movs	r3, #128	; 0x80
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4013      	ands	r3, r2
 800536a:	d101      	bne.n	8005370 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e0c2      	b.n	80054f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005370:	4b65      	ldr	r3, [pc, #404]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	2203      	movs	r2, #3
 8005376:	4393      	bics	r3, r2
 8005378:	0019      	movs	r1, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	4b62      	ldr	r3, [pc, #392]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 8005380:	430a      	orrs	r2, r1
 8005382:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005384:	f7fd fdde 	bl	8002f44 <HAL_GetTick>
 8005388:	0003      	movs	r3, r0
 800538a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d111      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005394:	e009      	b.n	80053aa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005396:	f7fd fdd5 	bl	8002f44 <HAL_GetTick>
 800539a:	0002      	movs	r2, r0
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	4a58      	ldr	r2, [pc, #352]	; (8005504 <HAL_RCC_ClockConfig+0x274>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e0a5      	b.n	80054f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80053aa:	4b57      	ldr	r3, [pc, #348]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	220c      	movs	r2, #12
 80053b0:	4013      	ands	r3, r2
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d1ef      	bne.n	8005396 <HAL_RCC_ClockConfig+0x106>
 80053b6:	e03a      	b.n	800542e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d111      	bne.n	80053e4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053c0:	e009      	b.n	80053d6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c2:	f7fd fdbf 	bl	8002f44 <HAL_GetTick>
 80053c6:	0002      	movs	r2, r0
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	4a4d      	ldr	r2, [pc, #308]	; (8005504 <HAL_RCC_ClockConfig+0x274>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e08f      	b.n	80054f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053d6:	4b4c      	ldr	r3, [pc, #304]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	220c      	movs	r2, #12
 80053dc:	4013      	ands	r3, r2
 80053de:	2b0c      	cmp	r3, #12
 80053e0:	d1ef      	bne.n	80053c2 <HAL_RCC_ClockConfig+0x132>
 80053e2:	e024      	b.n	800542e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d11b      	bne.n	8005424 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80053ec:	e009      	b.n	8005402 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053ee:	f7fd fda9 	bl	8002f44 <HAL_GetTick>
 80053f2:	0002      	movs	r2, r0
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	4a42      	ldr	r2, [pc, #264]	; (8005504 <HAL_RCC_ClockConfig+0x274>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e079      	b.n	80054f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005402:	4b41      	ldr	r3, [pc, #260]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	220c      	movs	r2, #12
 8005408:	4013      	ands	r3, r2
 800540a:	2b04      	cmp	r3, #4
 800540c:	d1ef      	bne.n	80053ee <HAL_RCC_ClockConfig+0x15e>
 800540e:	e00e      	b.n	800542e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005410:	f7fd fd98 	bl	8002f44 <HAL_GetTick>
 8005414:	0002      	movs	r2, r0
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	4a3a      	ldr	r2, [pc, #232]	; (8005504 <HAL_RCC_ClockConfig+0x274>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e068      	b.n	80054f6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005424:	4b38      	ldr	r3, [pc, #224]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	220c      	movs	r2, #12
 800542a:	4013      	ands	r3, r2
 800542c:	d1f0      	bne.n	8005410 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800542e:	4b34      	ldr	r3, [pc, #208]	; (8005500 <HAL_RCC_ClockConfig+0x270>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2201      	movs	r2, #1
 8005434:	4013      	ands	r3, r2
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d21e      	bcs.n	800547a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543c:	4b30      	ldr	r3, [pc, #192]	; (8005500 <HAL_RCC_ClockConfig+0x270>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2201      	movs	r2, #1
 8005442:	4393      	bics	r3, r2
 8005444:	0019      	movs	r1, r3
 8005446:	4b2e      	ldr	r3, [pc, #184]	; (8005500 <HAL_RCC_ClockConfig+0x270>)
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800544e:	f7fd fd79 	bl	8002f44 <HAL_GetTick>
 8005452:	0003      	movs	r3, r0
 8005454:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005456:	e009      	b.n	800546c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005458:	f7fd fd74 	bl	8002f44 <HAL_GetTick>
 800545c:	0002      	movs	r2, r0
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	4a28      	ldr	r2, [pc, #160]	; (8005504 <HAL_RCC_ClockConfig+0x274>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d901      	bls.n	800546c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e044      	b.n	80054f6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800546c:	4b24      	ldr	r3, [pc, #144]	; (8005500 <HAL_RCC_ClockConfig+0x270>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2201      	movs	r2, #1
 8005472:	4013      	ands	r3, r2
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d1ee      	bne.n	8005458 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2204      	movs	r2, #4
 8005480:	4013      	ands	r3, r2
 8005482:	d009      	beq.n	8005498 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005484:	4b20      	ldr	r3, [pc, #128]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	4a20      	ldr	r2, [pc, #128]	; (800550c <HAL_RCC_ClockConfig+0x27c>)
 800548a:	4013      	ands	r3, r2
 800548c:	0019      	movs	r1, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	4b1d      	ldr	r3, [pc, #116]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 8005494:	430a      	orrs	r2, r1
 8005496:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2208      	movs	r2, #8
 800549e:	4013      	ands	r3, r2
 80054a0:	d00a      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054a2:	4b19      	ldr	r3, [pc, #100]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	4a1a      	ldr	r2, [pc, #104]	; (8005510 <HAL_RCC_ClockConfig+0x280>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	0019      	movs	r1, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	00da      	lsls	r2, r3, #3
 80054b2:	4b15      	ldr	r3, [pc, #84]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 80054b4:	430a      	orrs	r2, r1
 80054b6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054b8:	f000 f832 	bl	8005520 <HAL_RCC_GetSysClockFreq>
 80054bc:	0001      	movs	r1, r0
 80054be:	4b12      	ldr	r3, [pc, #72]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	091b      	lsrs	r3, r3, #4
 80054c4:	220f      	movs	r2, #15
 80054c6:	4013      	ands	r3, r2
 80054c8:	4a12      	ldr	r2, [pc, #72]	; (8005514 <HAL_RCC_ClockConfig+0x284>)
 80054ca:	5cd3      	ldrb	r3, [r2, r3]
 80054cc:	000a      	movs	r2, r1
 80054ce:	40da      	lsrs	r2, r3
 80054d0:	4b11      	ldr	r3, [pc, #68]	; (8005518 <HAL_RCC_ClockConfig+0x288>)
 80054d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054d4:	4b11      	ldr	r3, [pc, #68]	; (800551c <HAL_RCC_ClockConfig+0x28c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	250b      	movs	r5, #11
 80054da:	197c      	adds	r4, r7, r5
 80054dc:	0018      	movs	r0, r3
 80054de:	f7fd fceb 	bl	8002eb8 <HAL_InitTick>
 80054e2:	0003      	movs	r3, r0
 80054e4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80054e6:	197b      	adds	r3, r7, r5
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80054ee:	197b      	adds	r3, r7, r5
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	e000      	b.n	80054f6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	0018      	movs	r0, r3
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b004      	add	sp, #16
 80054fc:	bdb0      	pop	{r4, r5, r7, pc}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	40022000 	.word	0x40022000
 8005504:	00001388 	.word	0x00001388
 8005508:	40021000 	.word	0x40021000
 800550c:	fffff8ff 	.word	0xfffff8ff
 8005510:	ffffc7ff 	.word	0xffffc7ff
 8005514:	08008908 	.word	0x08008908
 8005518:	20000000 	.word	0x20000000
 800551c:	20000004 	.word	0x20000004

08005520 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005520:	b5b0      	push	{r4, r5, r7, lr}
 8005522:	b08e      	sub	sp, #56	; 0x38
 8005524:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005526:	4b4c      	ldr	r3, [pc, #304]	; (8005658 <HAL_RCC_GetSysClockFreq+0x138>)
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800552c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800552e:	230c      	movs	r3, #12
 8005530:	4013      	ands	r3, r2
 8005532:	2b0c      	cmp	r3, #12
 8005534:	d014      	beq.n	8005560 <HAL_RCC_GetSysClockFreq+0x40>
 8005536:	d900      	bls.n	800553a <HAL_RCC_GetSysClockFreq+0x1a>
 8005538:	e07b      	b.n	8005632 <HAL_RCC_GetSysClockFreq+0x112>
 800553a:	2b04      	cmp	r3, #4
 800553c:	d002      	beq.n	8005544 <HAL_RCC_GetSysClockFreq+0x24>
 800553e:	2b08      	cmp	r3, #8
 8005540:	d00b      	beq.n	800555a <HAL_RCC_GetSysClockFreq+0x3a>
 8005542:	e076      	b.n	8005632 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005544:	4b44      	ldr	r3, [pc, #272]	; (8005658 <HAL_RCC_GetSysClockFreq+0x138>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2210      	movs	r2, #16
 800554a:	4013      	ands	r3, r2
 800554c:	d002      	beq.n	8005554 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800554e:	4b43      	ldr	r3, [pc, #268]	; (800565c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005550:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005552:	e07c      	b.n	800564e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005554:	4b42      	ldr	r3, [pc, #264]	; (8005660 <HAL_RCC_GetSysClockFreq+0x140>)
 8005556:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005558:	e079      	b.n	800564e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800555a:	4b42      	ldr	r3, [pc, #264]	; (8005664 <HAL_RCC_GetSysClockFreq+0x144>)
 800555c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800555e:	e076      	b.n	800564e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	0c9a      	lsrs	r2, r3, #18
 8005564:	230f      	movs	r3, #15
 8005566:	401a      	ands	r2, r3
 8005568:	4b3f      	ldr	r3, [pc, #252]	; (8005668 <HAL_RCC_GetSysClockFreq+0x148>)
 800556a:	5c9b      	ldrb	r3, [r3, r2]
 800556c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	0d9a      	lsrs	r2, r3, #22
 8005572:	2303      	movs	r3, #3
 8005574:	4013      	ands	r3, r2
 8005576:	3301      	adds	r3, #1
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800557a:	4b37      	ldr	r3, [pc, #220]	; (8005658 <HAL_RCC_GetSysClockFreq+0x138>)
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	2380      	movs	r3, #128	; 0x80
 8005580:	025b      	lsls	r3, r3, #9
 8005582:	4013      	ands	r3, r2
 8005584:	d01a      	beq.n	80055bc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005588:	61bb      	str	r3, [r7, #24]
 800558a:	2300      	movs	r3, #0
 800558c:	61fb      	str	r3, [r7, #28]
 800558e:	4a35      	ldr	r2, [pc, #212]	; (8005664 <HAL_RCC_GetSysClockFreq+0x144>)
 8005590:	2300      	movs	r3, #0
 8005592:	69b8      	ldr	r0, [r7, #24]
 8005594:	69f9      	ldr	r1, [r7, #28]
 8005596:	f7fa ffa7 	bl	80004e8 <__aeabi_lmul>
 800559a:	0002      	movs	r2, r0
 800559c:	000b      	movs	r3, r1
 800559e:	0010      	movs	r0, r2
 80055a0:	0019      	movs	r1, r3
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f7fa ff7b 	bl	80004a8 <__aeabi_uldivmod>
 80055b2:	0002      	movs	r2, r0
 80055b4:	000b      	movs	r3, r1
 80055b6:	0013      	movs	r3, r2
 80055b8:	637b      	str	r3, [r7, #52]	; 0x34
 80055ba:	e037      	b.n	800562c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80055bc:	4b26      	ldr	r3, [pc, #152]	; (8005658 <HAL_RCC_GetSysClockFreq+0x138>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2210      	movs	r2, #16
 80055c2:	4013      	ands	r3, r2
 80055c4:	d01a      	beq.n	80055fc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80055c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c8:	60bb      	str	r3, [r7, #8]
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	4a23      	ldr	r2, [pc, #140]	; (800565c <HAL_RCC_GetSysClockFreq+0x13c>)
 80055d0:	2300      	movs	r3, #0
 80055d2:	68b8      	ldr	r0, [r7, #8]
 80055d4:	68f9      	ldr	r1, [r7, #12]
 80055d6:	f7fa ff87 	bl	80004e8 <__aeabi_lmul>
 80055da:	0002      	movs	r2, r0
 80055dc:	000b      	movs	r3, r1
 80055de:	0010      	movs	r0, r2
 80055e0:	0019      	movs	r1, r3
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	603b      	str	r3, [r7, #0]
 80055e6:	2300      	movs	r3, #0
 80055e8:	607b      	str	r3, [r7, #4]
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f7fa ff5b 	bl	80004a8 <__aeabi_uldivmod>
 80055f2:	0002      	movs	r2, r0
 80055f4:	000b      	movs	r3, r1
 80055f6:	0013      	movs	r3, r2
 80055f8:	637b      	str	r3, [r7, #52]	; 0x34
 80055fa:	e017      	b.n	800562c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	0018      	movs	r0, r3
 8005600:	2300      	movs	r3, #0
 8005602:	0019      	movs	r1, r3
 8005604:	4a16      	ldr	r2, [pc, #88]	; (8005660 <HAL_RCC_GetSysClockFreq+0x140>)
 8005606:	2300      	movs	r3, #0
 8005608:	f7fa ff6e 	bl	80004e8 <__aeabi_lmul>
 800560c:	0002      	movs	r2, r0
 800560e:	000b      	movs	r3, r1
 8005610:	0010      	movs	r0, r2
 8005612:	0019      	movs	r1, r3
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	001c      	movs	r4, r3
 8005618:	2300      	movs	r3, #0
 800561a:	001d      	movs	r5, r3
 800561c:	0022      	movs	r2, r4
 800561e:	002b      	movs	r3, r5
 8005620:	f7fa ff42 	bl	80004a8 <__aeabi_uldivmod>
 8005624:	0002      	movs	r2, r0
 8005626:	000b      	movs	r3, r1
 8005628:	0013      	movs	r3, r2
 800562a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800562c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005630:	e00d      	b.n	800564e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005632:	4b09      	ldr	r3, [pc, #36]	; (8005658 <HAL_RCC_GetSysClockFreq+0x138>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	0b5b      	lsrs	r3, r3, #13
 8005638:	2207      	movs	r2, #7
 800563a:	4013      	ands	r3, r2
 800563c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	3301      	adds	r3, #1
 8005642:	2280      	movs	r2, #128	; 0x80
 8005644:	0212      	lsls	r2, r2, #8
 8005646:	409a      	lsls	r2, r3
 8005648:	0013      	movs	r3, r2
 800564a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800564c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005650:	0018      	movs	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	b00e      	add	sp, #56	; 0x38
 8005656:	bdb0      	pop	{r4, r5, r7, pc}
 8005658:	40021000 	.word	0x40021000
 800565c:	003d0900 	.word	0x003d0900
 8005660:	00f42400 	.word	0x00f42400
 8005664:	007a1200 	.word	0x007a1200
 8005668:	08008918 	.word	0x08008918

0800566c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005674:	2017      	movs	r0, #23
 8005676:	183b      	adds	r3, r7, r0
 8005678:	2200      	movs	r2, #0
 800567a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2220      	movs	r2, #32
 8005682:	4013      	ands	r3, r2
 8005684:	d100      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005686:	e0c2      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005688:	4b81      	ldr	r3, [pc, #516]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800568a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800568c:	2380      	movs	r3, #128	; 0x80
 800568e:	055b      	lsls	r3, r3, #21
 8005690:	4013      	ands	r3, r2
 8005692:	d109      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005694:	4b7e      	ldr	r3, [pc, #504]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005698:	4b7d      	ldr	r3, [pc, #500]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800569a:	2180      	movs	r1, #128	; 0x80
 800569c:	0549      	lsls	r1, r1, #21
 800569e:	430a      	orrs	r2, r1
 80056a0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80056a2:	183b      	adds	r3, r7, r0
 80056a4:	2201      	movs	r2, #1
 80056a6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a8:	4b7a      	ldr	r3, [pc, #488]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	2380      	movs	r3, #128	; 0x80
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	4013      	ands	r3, r2
 80056b2:	d11a      	bne.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056b4:	4b77      	ldr	r3, [pc, #476]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	4b76      	ldr	r3, [pc, #472]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80056ba:	2180      	movs	r1, #128	; 0x80
 80056bc:	0049      	lsls	r1, r1, #1
 80056be:	430a      	orrs	r2, r1
 80056c0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c2:	f7fd fc3f 	bl	8002f44 <HAL_GetTick>
 80056c6:	0003      	movs	r3, r0
 80056c8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ca:	e008      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056cc:	f7fd fc3a 	bl	8002f44 <HAL_GetTick>
 80056d0:	0002      	movs	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b64      	cmp	r3, #100	; 0x64
 80056d8:	d901      	bls.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e0d4      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056de:	4b6d      	ldr	r3, [pc, #436]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	2380      	movs	r3, #128	; 0x80
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	4013      	ands	r3, r2
 80056e8:	d0f0      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80056ea:	4b69      	ldr	r3, [pc, #420]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	23c0      	movs	r3, #192	; 0xc0
 80056f0:	039b      	lsls	r3, r3, #14
 80056f2:	4013      	ands	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	23c0      	movs	r3, #192	; 0xc0
 80056fc:	039b      	lsls	r3, r3, #14
 80056fe:	4013      	ands	r3, r2
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	429a      	cmp	r2, r3
 8005704:	d013      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	23c0      	movs	r3, #192	; 0xc0
 800570c:	029b      	lsls	r3, r3, #10
 800570e:	401a      	ands	r2, r3
 8005710:	23c0      	movs	r3, #192	; 0xc0
 8005712:	029b      	lsls	r3, r3, #10
 8005714:	429a      	cmp	r2, r3
 8005716:	d10a      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005718:	4b5d      	ldr	r3, [pc, #372]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	2380      	movs	r3, #128	; 0x80
 800571e:	029b      	lsls	r3, r3, #10
 8005720:	401a      	ands	r2, r3
 8005722:	2380      	movs	r3, #128	; 0x80
 8005724:	029b      	lsls	r3, r3, #10
 8005726:	429a      	cmp	r2, r3
 8005728:	d101      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e0ac      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800572e:	4b58      	ldr	r3, [pc, #352]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005730:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005732:	23c0      	movs	r3, #192	; 0xc0
 8005734:	029b      	lsls	r3, r3, #10
 8005736:	4013      	ands	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d03b      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	23c0      	movs	r3, #192	; 0xc0
 8005746:	029b      	lsls	r3, r3, #10
 8005748:	4013      	ands	r3, r2
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	429a      	cmp	r2, r3
 800574e:	d033      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2220      	movs	r2, #32
 8005756:	4013      	ands	r3, r2
 8005758:	d02e      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800575a:	4b4d      	ldr	r3, [pc, #308]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800575c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800575e:	4a4e      	ldr	r2, [pc, #312]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005760:	4013      	ands	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005764:	4b4a      	ldr	r3, [pc, #296]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005766:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005768:	4b49      	ldr	r3, [pc, #292]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800576a:	2180      	movs	r1, #128	; 0x80
 800576c:	0309      	lsls	r1, r1, #12
 800576e:	430a      	orrs	r2, r1
 8005770:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005772:	4b47      	ldr	r3, [pc, #284]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005774:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005776:	4b46      	ldr	r3, [pc, #280]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005778:	4948      	ldr	r1, [pc, #288]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800577a:	400a      	ands	r2, r1
 800577c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800577e:	4b44      	ldr	r3, [pc, #272]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	2380      	movs	r3, #128	; 0x80
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	4013      	ands	r3, r2
 800578c:	d014      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578e:	f7fd fbd9 	bl	8002f44 <HAL_GetTick>
 8005792:	0003      	movs	r3, r0
 8005794:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005796:	e009      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005798:	f7fd fbd4 	bl	8002f44 <HAL_GetTick>
 800579c:	0002      	movs	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	4a3f      	ldr	r2, [pc, #252]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d901      	bls.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e06d      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057ac:	4b38      	ldr	r3, [pc, #224]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80057ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057b0:	2380      	movs	r3, #128	; 0x80
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4013      	ands	r3, r2
 80057b6:	d0ef      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	23c0      	movs	r3, #192	; 0xc0
 80057be:	029b      	lsls	r3, r3, #10
 80057c0:	401a      	ands	r2, r3
 80057c2:	23c0      	movs	r3, #192	; 0xc0
 80057c4:	029b      	lsls	r3, r3, #10
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d10c      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80057ca:	4b31      	ldr	r3, [pc, #196]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a35      	ldr	r2, [pc, #212]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	0019      	movs	r1, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	23c0      	movs	r3, #192	; 0xc0
 80057da:	039b      	lsls	r3, r3, #14
 80057dc:	401a      	ands	r2, r3
 80057de:	4b2c      	ldr	r3, [pc, #176]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80057e0:	430a      	orrs	r2, r1
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	4b2a      	ldr	r3, [pc, #168]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80057e6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	23c0      	movs	r3, #192	; 0xc0
 80057ee:	029b      	lsls	r3, r3, #10
 80057f0:	401a      	ands	r2, r3
 80057f2:	4b27      	ldr	r3, [pc, #156]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80057f4:	430a      	orrs	r2, r1
 80057f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057f8:	2317      	movs	r3, #23
 80057fa:	18fb      	adds	r3, r7, r3
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d105      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005802:	4b23      	ldr	r3, [pc, #140]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005806:	4b22      	ldr	r3, [pc, #136]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005808:	4927      	ldr	r1, [pc, #156]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800580a:	400a      	ands	r2, r1
 800580c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2202      	movs	r2, #2
 8005814:	4013      	ands	r3, r2
 8005816:	d009      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005818:	4b1d      	ldr	r3, [pc, #116]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800581a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581c:	220c      	movs	r2, #12
 800581e:	4393      	bics	r3, r2
 8005820:	0019      	movs	r1, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	4b1a      	ldr	r3, [pc, #104]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005828:	430a      	orrs	r2, r1
 800582a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2204      	movs	r2, #4
 8005832:	4013      	ands	r3, r2
 8005834:	d009      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005836:	4b16      	ldr	r3, [pc, #88]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800583a:	4a1c      	ldr	r2, [pc, #112]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800583c:	4013      	ands	r3, r2
 800583e:	0019      	movs	r1, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	4b12      	ldr	r3, [pc, #72]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005846:	430a      	orrs	r2, r1
 8005848:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2208      	movs	r2, #8
 8005850:	4013      	ands	r3, r2
 8005852:	d009      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005854:	4b0e      	ldr	r3, [pc, #56]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005858:	4a15      	ldr	r2, [pc, #84]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800585a:	4013      	ands	r3, r2
 800585c:	0019      	movs	r1, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	691a      	ldr	r2, [r3, #16]
 8005862:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005864:	430a      	orrs	r2, r1
 8005866:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2280      	movs	r2, #128	; 0x80
 800586e:	4013      	ands	r3, r2
 8005870:	d009      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005872:	4b07      	ldr	r3, [pc, #28]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005876:	4a0f      	ldr	r2, [pc, #60]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005878:	4013      	ands	r3, r2
 800587a:	0019      	movs	r1, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	695a      	ldr	r2, [r3, #20]
 8005880:	4b03      	ldr	r3, [pc, #12]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005882:	430a      	orrs	r2, r1
 8005884:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	0018      	movs	r0, r3
 800588a:	46bd      	mov	sp, r7
 800588c:	b006      	add	sp, #24
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40021000 	.word	0x40021000
 8005894:	40007000 	.word	0x40007000
 8005898:	fffcffff 	.word	0xfffcffff
 800589c:	fff7ffff 	.word	0xfff7ffff
 80058a0:	00001388 	.word	0x00001388
 80058a4:	ffcfffff 	.word	0xffcfffff
 80058a8:	efffffff 	.word	0xefffffff
 80058ac:	fffff3ff 	.word	0xfffff3ff
 80058b0:	ffffcfff 	.word	0xffffcfff
 80058b4:	fff3ffff 	.word	0xfff3ffff

080058b8 <__errno>:
 80058b8:	4b01      	ldr	r3, [pc, #4]	; (80058c0 <__errno+0x8>)
 80058ba:	6818      	ldr	r0, [r3, #0]
 80058bc:	4770      	bx	lr
 80058be:	46c0      	nop			; (mov r8, r8)
 80058c0:	2000000c 	.word	0x2000000c

080058c4 <__libc_init_array>:
 80058c4:	b570      	push	{r4, r5, r6, lr}
 80058c6:	2600      	movs	r6, #0
 80058c8:	4d0c      	ldr	r5, [pc, #48]	; (80058fc <__libc_init_array+0x38>)
 80058ca:	4c0d      	ldr	r4, [pc, #52]	; (8005900 <__libc_init_array+0x3c>)
 80058cc:	1b64      	subs	r4, r4, r5
 80058ce:	10a4      	asrs	r4, r4, #2
 80058d0:	42a6      	cmp	r6, r4
 80058d2:	d109      	bne.n	80058e8 <__libc_init_array+0x24>
 80058d4:	2600      	movs	r6, #0
 80058d6:	f002 ffb9 	bl	800884c <_init>
 80058da:	4d0a      	ldr	r5, [pc, #40]	; (8005904 <__libc_init_array+0x40>)
 80058dc:	4c0a      	ldr	r4, [pc, #40]	; (8005908 <__libc_init_array+0x44>)
 80058de:	1b64      	subs	r4, r4, r5
 80058e0:	10a4      	asrs	r4, r4, #2
 80058e2:	42a6      	cmp	r6, r4
 80058e4:	d105      	bne.n	80058f2 <__libc_init_array+0x2e>
 80058e6:	bd70      	pop	{r4, r5, r6, pc}
 80058e8:	00b3      	lsls	r3, r6, #2
 80058ea:	58eb      	ldr	r3, [r5, r3]
 80058ec:	4798      	blx	r3
 80058ee:	3601      	adds	r6, #1
 80058f0:	e7ee      	b.n	80058d0 <__libc_init_array+0xc>
 80058f2:	00b3      	lsls	r3, r6, #2
 80058f4:	58eb      	ldr	r3, [r5, r3]
 80058f6:	4798      	blx	r3
 80058f8:	3601      	adds	r6, #1
 80058fa:	e7f2      	b.n	80058e2 <__libc_init_array+0x1e>
 80058fc:	08008d04 	.word	0x08008d04
 8005900:	08008d04 	.word	0x08008d04
 8005904:	08008d04 	.word	0x08008d04
 8005908:	08008d08 	.word	0x08008d08

0800590c <malloc>:
 800590c:	b510      	push	{r4, lr}
 800590e:	4b03      	ldr	r3, [pc, #12]	; (800591c <malloc+0x10>)
 8005910:	0001      	movs	r1, r0
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	f000 f878 	bl	8005a08 <_malloc_r>
 8005918:	bd10      	pop	{r4, pc}
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	2000000c 	.word	0x2000000c

08005920 <memset>:
 8005920:	0003      	movs	r3, r0
 8005922:	1882      	adds	r2, r0, r2
 8005924:	4293      	cmp	r3, r2
 8005926:	d100      	bne.n	800592a <memset+0xa>
 8005928:	4770      	bx	lr
 800592a:	7019      	strb	r1, [r3, #0]
 800592c:	3301      	adds	r3, #1
 800592e:	e7f9      	b.n	8005924 <memset+0x4>

08005930 <_free_r>:
 8005930:	b570      	push	{r4, r5, r6, lr}
 8005932:	0005      	movs	r5, r0
 8005934:	2900      	cmp	r1, #0
 8005936:	d010      	beq.n	800595a <_free_r+0x2a>
 8005938:	1f0c      	subs	r4, r1, #4
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	da00      	bge.n	8005942 <_free_r+0x12>
 8005940:	18e4      	adds	r4, r4, r3
 8005942:	0028      	movs	r0, r5
 8005944:	f001 fc34 	bl	80071b0 <__malloc_lock>
 8005948:	4a1d      	ldr	r2, [pc, #116]	; (80059c0 <_free_r+0x90>)
 800594a:	6813      	ldr	r3, [r2, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d105      	bne.n	800595c <_free_r+0x2c>
 8005950:	6063      	str	r3, [r4, #4]
 8005952:	6014      	str	r4, [r2, #0]
 8005954:	0028      	movs	r0, r5
 8005956:	f001 fc33 	bl	80071c0 <__malloc_unlock>
 800595a:	bd70      	pop	{r4, r5, r6, pc}
 800595c:	42a3      	cmp	r3, r4
 800595e:	d908      	bls.n	8005972 <_free_r+0x42>
 8005960:	6821      	ldr	r1, [r4, #0]
 8005962:	1860      	adds	r0, r4, r1
 8005964:	4283      	cmp	r3, r0
 8005966:	d1f3      	bne.n	8005950 <_free_r+0x20>
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	1841      	adds	r1, r0, r1
 800596e:	6021      	str	r1, [r4, #0]
 8005970:	e7ee      	b.n	8005950 <_free_r+0x20>
 8005972:	001a      	movs	r2, r3
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <_free_r+0x4e>
 800597a:	42a3      	cmp	r3, r4
 800597c:	d9f9      	bls.n	8005972 <_free_r+0x42>
 800597e:	6811      	ldr	r1, [r2, #0]
 8005980:	1850      	adds	r0, r2, r1
 8005982:	42a0      	cmp	r0, r4
 8005984:	d10b      	bne.n	800599e <_free_r+0x6e>
 8005986:	6820      	ldr	r0, [r4, #0]
 8005988:	1809      	adds	r1, r1, r0
 800598a:	1850      	adds	r0, r2, r1
 800598c:	6011      	str	r1, [r2, #0]
 800598e:	4283      	cmp	r3, r0
 8005990:	d1e0      	bne.n	8005954 <_free_r+0x24>
 8005992:	6818      	ldr	r0, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	1841      	adds	r1, r0, r1
 8005998:	6011      	str	r1, [r2, #0]
 800599a:	6053      	str	r3, [r2, #4]
 800599c:	e7da      	b.n	8005954 <_free_r+0x24>
 800599e:	42a0      	cmp	r0, r4
 80059a0:	d902      	bls.n	80059a8 <_free_r+0x78>
 80059a2:	230c      	movs	r3, #12
 80059a4:	602b      	str	r3, [r5, #0]
 80059a6:	e7d5      	b.n	8005954 <_free_r+0x24>
 80059a8:	6821      	ldr	r1, [r4, #0]
 80059aa:	1860      	adds	r0, r4, r1
 80059ac:	4283      	cmp	r3, r0
 80059ae:	d103      	bne.n	80059b8 <_free_r+0x88>
 80059b0:	6818      	ldr	r0, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	1841      	adds	r1, r0, r1
 80059b6:	6021      	str	r1, [r4, #0]
 80059b8:	6063      	str	r3, [r4, #4]
 80059ba:	6054      	str	r4, [r2, #4]
 80059bc:	e7ca      	b.n	8005954 <_free_r+0x24>
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	200002f8 	.word	0x200002f8

080059c4 <sbrk_aligned>:
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	4e0f      	ldr	r6, [pc, #60]	; (8005a04 <sbrk_aligned+0x40>)
 80059c8:	000d      	movs	r5, r1
 80059ca:	6831      	ldr	r1, [r6, #0]
 80059cc:	0004      	movs	r4, r0
 80059ce:	2900      	cmp	r1, #0
 80059d0:	d102      	bne.n	80059d8 <sbrk_aligned+0x14>
 80059d2:	f000 fcfd 	bl	80063d0 <_sbrk_r>
 80059d6:	6030      	str	r0, [r6, #0]
 80059d8:	0029      	movs	r1, r5
 80059da:	0020      	movs	r0, r4
 80059dc:	f000 fcf8 	bl	80063d0 <_sbrk_r>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d00a      	beq.n	80059fa <sbrk_aligned+0x36>
 80059e4:	2303      	movs	r3, #3
 80059e6:	1cc5      	adds	r5, r0, #3
 80059e8:	439d      	bics	r5, r3
 80059ea:	42a8      	cmp	r0, r5
 80059ec:	d007      	beq.n	80059fe <sbrk_aligned+0x3a>
 80059ee:	1a29      	subs	r1, r5, r0
 80059f0:	0020      	movs	r0, r4
 80059f2:	f000 fced 	bl	80063d0 <_sbrk_r>
 80059f6:	1c43      	adds	r3, r0, #1
 80059f8:	d101      	bne.n	80059fe <sbrk_aligned+0x3a>
 80059fa:	2501      	movs	r5, #1
 80059fc:	426d      	negs	r5, r5
 80059fe:	0028      	movs	r0, r5
 8005a00:	bd70      	pop	{r4, r5, r6, pc}
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	200002fc 	.word	0x200002fc

08005a08 <_malloc_r>:
 8005a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	1ccb      	adds	r3, r1, #3
 8005a0e:	4393      	bics	r3, r2
 8005a10:	3308      	adds	r3, #8
 8005a12:	0006      	movs	r6, r0
 8005a14:	001f      	movs	r7, r3
 8005a16:	2b0c      	cmp	r3, #12
 8005a18:	d232      	bcs.n	8005a80 <_malloc_r+0x78>
 8005a1a:	270c      	movs	r7, #12
 8005a1c:	42b9      	cmp	r1, r7
 8005a1e:	d831      	bhi.n	8005a84 <_malloc_r+0x7c>
 8005a20:	0030      	movs	r0, r6
 8005a22:	f001 fbc5 	bl	80071b0 <__malloc_lock>
 8005a26:	4d32      	ldr	r5, [pc, #200]	; (8005af0 <_malloc_r+0xe8>)
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	001c      	movs	r4, r3
 8005a2c:	2c00      	cmp	r4, #0
 8005a2e:	d12e      	bne.n	8005a8e <_malloc_r+0x86>
 8005a30:	0039      	movs	r1, r7
 8005a32:	0030      	movs	r0, r6
 8005a34:	f7ff ffc6 	bl	80059c4 <sbrk_aligned>
 8005a38:	0004      	movs	r4, r0
 8005a3a:	1c43      	adds	r3, r0, #1
 8005a3c:	d11e      	bne.n	8005a7c <_malloc_r+0x74>
 8005a3e:	682c      	ldr	r4, [r5, #0]
 8005a40:	0025      	movs	r5, r4
 8005a42:	2d00      	cmp	r5, #0
 8005a44:	d14a      	bne.n	8005adc <_malloc_r+0xd4>
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	0029      	movs	r1, r5
 8005a4a:	18e3      	adds	r3, r4, r3
 8005a4c:	0030      	movs	r0, r6
 8005a4e:	9301      	str	r3, [sp, #4]
 8005a50:	f000 fcbe 	bl	80063d0 <_sbrk_r>
 8005a54:	9b01      	ldr	r3, [sp, #4]
 8005a56:	4283      	cmp	r3, r0
 8005a58:	d143      	bne.n	8005ae2 <_malloc_r+0xda>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	3703      	adds	r7, #3
 8005a5e:	1aff      	subs	r7, r7, r3
 8005a60:	2303      	movs	r3, #3
 8005a62:	439f      	bics	r7, r3
 8005a64:	3708      	adds	r7, #8
 8005a66:	2f0c      	cmp	r7, #12
 8005a68:	d200      	bcs.n	8005a6c <_malloc_r+0x64>
 8005a6a:	270c      	movs	r7, #12
 8005a6c:	0039      	movs	r1, r7
 8005a6e:	0030      	movs	r0, r6
 8005a70:	f7ff ffa8 	bl	80059c4 <sbrk_aligned>
 8005a74:	1c43      	adds	r3, r0, #1
 8005a76:	d034      	beq.n	8005ae2 <_malloc_r+0xda>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	19df      	adds	r7, r3, r7
 8005a7c:	6027      	str	r7, [r4, #0]
 8005a7e:	e013      	b.n	8005aa8 <_malloc_r+0xa0>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	dacb      	bge.n	8005a1c <_malloc_r+0x14>
 8005a84:	230c      	movs	r3, #12
 8005a86:	2500      	movs	r5, #0
 8005a88:	6033      	str	r3, [r6, #0]
 8005a8a:	0028      	movs	r0, r5
 8005a8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a8e:	6822      	ldr	r2, [r4, #0]
 8005a90:	1bd1      	subs	r1, r2, r7
 8005a92:	d420      	bmi.n	8005ad6 <_malloc_r+0xce>
 8005a94:	290b      	cmp	r1, #11
 8005a96:	d917      	bls.n	8005ac8 <_malloc_r+0xc0>
 8005a98:	19e2      	adds	r2, r4, r7
 8005a9a:	6027      	str	r7, [r4, #0]
 8005a9c:	42a3      	cmp	r3, r4
 8005a9e:	d111      	bne.n	8005ac4 <_malloc_r+0xbc>
 8005aa0:	602a      	str	r2, [r5, #0]
 8005aa2:	6863      	ldr	r3, [r4, #4]
 8005aa4:	6011      	str	r1, [r2, #0]
 8005aa6:	6053      	str	r3, [r2, #4]
 8005aa8:	0030      	movs	r0, r6
 8005aaa:	0025      	movs	r5, r4
 8005aac:	f001 fb88 	bl	80071c0 <__malloc_unlock>
 8005ab0:	2207      	movs	r2, #7
 8005ab2:	350b      	adds	r5, #11
 8005ab4:	1d23      	adds	r3, r4, #4
 8005ab6:	4395      	bics	r5, r2
 8005ab8:	1aea      	subs	r2, r5, r3
 8005aba:	429d      	cmp	r5, r3
 8005abc:	d0e5      	beq.n	8005a8a <_malloc_r+0x82>
 8005abe:	1b5b      	subs	r3, r3, r5
 8005ac0:	50a3      	str	r3, [r4, r2]
 8005ac2:	e7e2      	b.n	8005a8a <_malloc_r+0x82>
 8005ac4:	605a      	str	r2, [r3, #4]
 8005ac6:	e7ec      	b.n	8005aa2 <_malloc_r+0x9a>
 8005ac8:	6862      	ldr	r2, [r4, #4]
 8005aca:	42a3      	cmp	r3, r4
 8005acc:	d101      	bne.n	8005ad2 <_malloc_r+0xca>
 8005ace:	602a      	str	r2, [r5, #0]
 8005ad0:	e7ea      	b.n	8005aa8 <_malloc_r+0xa0>
 8005ad2:	605a      	str	r2, [r3, #4]
 8005ad4:	e7e8      	b.n	8005aa8 <_malloc_r+0xa0>
 8005ad6:	0023      	movs	r3, r4
 8005ad8:	6864      	ldr	r4, [r4, #4]
 8005ada:	e7a7      	b.n	8005a2c <_malloc_r+0x24>
 8005adc:	002c      	movs	r4, r5
 8005ade:	686d      	ldr	r5, [r5, #4]
 8005ae0:	e7af      	b.n	8005a42 <_malloc_r+0x3a>
 8005ae2:	230c      	movs	r3, #12
 8005ae4:	0030      	movs	r0, r6
 8005ae6:	6033      	str	r3, [r6, #0]
 8005ae8:	f001 fb6a 	bl	80071c0 <__malloc_unlock>
 8005aec:	e7cd      	b.n	8005a8a <_malloc_r+0x82>
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	200002f8 	.word	0x200002f8

08005af4 <__cvt>:
 8005af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005af6:	001e      	movs	r6, r3
 8005af8:	2300      	movs	r3, #0
 8005afa:	0014      	movs	r4, r2
 8005afc:	b08b      	sub	sp, #44	; 0x2c
 8005afe:	429e      	cmp	r6, r3
 8005b00:	da04      	bge.n	8005b0c <__cvt+0x18>
 8005b02:	2180      	movs	r1, #128	; 0x80
 8005b04:	0609      	lsls	r1, r1, #24
 8005b06:	1873      	adds	r3, r6, r1
 8005b08:	001e      	movs	r6, r3
 8005b0a:	232d      	movs	r3, #45	; 0x2d
 8005b0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b0e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005b10:	7013      	strb	r3, [r2, #0]
 8005b12:	2320      	movs	r3, #32
 8005b14:	2203      	movs	r2, #3
 8005b16:	439f      	bics	r7, r3
 8005b18:	2f46      	cmp	r7, #70	; 0x46
 8005b1a:	d007      	beq.n	8005b2c <__cvt+0x38>
 8005b1c:	003b      	movs	r3, r7
 8005b1e:	3b45      	subs	r3, #69	; 0x45
 8005b20:	4259      	negs	r1, r3
 8005b22:	414b      	adcs	r3, r1
 8005b24:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005b26:	3a01      	subs	r2, #1
 8005b28:	18cb      	adds	r3, r1, r3
 8005b2a:	9310      	str	r3, [sp, #64]	; 0x40
 8005b2c:	ab09      	add	r3, sp, #36	; 0x24
 8005b2e:	9304      	str	r3, [sp, #16]
 8005b30:	ab08      	add	r3, sp, #32
 8005b32:	9303      	str	r3, [sp, #12]
 8005b34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b36:	9200      	str	r2, [sp, #0]
 8005b38:	9302      	str	r3, [sp, #8]
 8005b3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b3c:	0022      	movs	r2, r4
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	0033      	movs	r3, r6
 8005b42:	f000 fd03 	bl	800654c <_dtoa_r>
 8005b46:	0005      	movs	r5, r0
 8005b48:	2f47      	cmp	r7, #71	; 0x47
 8005b4a:	d102      	bne.n	8005b52 <__cvt+0x5e>
 8005b4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b4e:	07db      	lsls	r3, r3, #31
 8005b50:	d528      	bpl.n	8005ba4 <__cvt+0xb0>
 8005b52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b54:	18eb      	adds	r3, r5, r3
 8005b56:	9307      	str	r3, [sp, #28]
 8005b58:	2f46      	cmp	r7, #70	; 0x46
 8005b5a:	d114      	bne.n	8005b86 <__cvt+0x92>
 8005b5c:	782b      	ldrb	r3, [r5, #0]
 8005b5e:	2b30      	cmp	r3, #48	; 0x30
 8005b60:	d10c      	bne.n	8005b7c <__cvt+0x88>
 8005b62:	2200      	movs	r2, #0
 8005b64:	2300      	movs	r3, #0
 8005b66:	0020      	movs	r0, r4
 8005b68:	0031      	movs	r1, r6
 8005b6a:	f7fa fc6f 	bl	800044c <__aeabi_dcmpeq>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	d104      	bne.n	8005b7c <__cvt+0x88>
 8005b72:	2301      	movs	r3, #1
 8005b74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b76:	1a9b      	subs	r3, r3, r2
 8005b78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b7e:	9a07      	ldr	r2, [sp, #28]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	18d3      	adds	r3, r2, r3
 8005b84:	9307      	str	r3, [sp, #28]
 8005b86:	2200      	movs	r2, #0
 8005b88:	2300      	movs	r3, #0
 8005b8a:	0020      	movs	r0, r4
 8005b8c:	0031      	movs	r1, r6
 8005b8e:	f7fa fc5d 	bl	800044c <__aeabi_dcmpeq>
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d001      	beq.n	8005b9a <__cvt+0xa6>
 8005b96:	9b07      	ldr	r3, [sp, #28]
 8005b98:	9309      	str	r3, [sp, #36]	; 0x24
 8005b9a:	2230      	movs	r2, #48	; 0x30
 8005b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b9e:	9907      	ldr	r1, [sp, #28]
 8005ba0:	428b      	cmp	r3, r1
 8005ba2:	d306      	bcc.n	8005bb2 <__cvt+0xbe>
 8005ba4:	0028      	movs	r0, r5
 8005ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005baa:	1b5b      	subs	r3, r3, r5
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	b00b      	add	sp, #44	; 0x2c
 8005bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bb2:	1c59      	adds	r1, r3, #1
 8005bb4:	9109      	str	r1, [sp, #36]	; 0x24
 8005bb6:	701a      	strb	r2, [r3, #0]
 8005bb8:	e7f0      	b.n	8005b9c <__cvt+0xa8>

08005bba <__exponent>:
 8005bba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bbc:	1c83      	adds	r3, r0, #2
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	9303      	str	r3, [sp, #12]
 8005bc2:	0005      	movs	r5, r0
 8005bc4:	000c      	movs	r4, r1
 8005bc6:	232b      	movs	r3, #43	; 0x2b
 8005bc8:	7002      	strb	r2, [r0, #0]
 8005bca:	2900      	cmp	r1, #0
 8005bcc:	da01      	bge.n	8005bd2 <__exponent+0x18>
 8005bce:	424c      	negs	r4, r1
 8005bd0:	3302      	adds	r3, #2
 8005bd2:	706b      	strb	r3, [r5, #1]
 8005bd4:	2c09      	cmp	r4, #9
 8005bd6:	dd31      	ble.n	8005c3c <__exponent+0x82>
 8005bd8:	270a      	movs	r7, #10
 8005bda:	ab04      	add	r3, sp, #16
 8005bdc:	1dde      	adds	r6, r3, #7
 8005bde:	0020      	movs	r0, r4
 8005be0:	0039      	movs	r1, r7
 8005be2:	9601      	str	r6, [sp, #4]
 8005be4:	f7fa fc1c 	bl	8000420 <__aeabi_idivmod>
 8005be8:	3e01      	subs	r6, #1
 8005bea:	3130      	adds	r1, #48	; 0x30
 8005bec:	0020      	movs	r0, r4
 8005bee:	7031      	strb	r1, [r6, #0]
 8005bf0:	0039      	movs	r1, r7
 8005bf2:	9402      	str	r4, [sp, #8]
 8005bf4:	f7fa fb2e 	bl	8000254 <__divsi3>
 8005bf8:	9b02      	ldr	r3, [sp, #8]
 8005bfa:	0004      	movs	r4, r0
 8005bfc:	2b63      	cmp	r3, #99	; 0x63
 8005bfe:	dcee      	bgt.n	8005bde <__exponent+0x24>
 8005c00:	9b01      	ldr	r3, [sp, #4]
 8005c02:	3430      	adds	r4, #48	; 0x30
 8005c04:	1e9a      	subs	r2, r3, #2
 8005c06:	0013      	movs	r3, r2
 8005c08:	9903      	ldr	r1, [sp, #12]
 8005c0a:	7014      	strb	r4, [r2, #0]
 8005c0c:	a804      	add	r0, sp, #16
 8005c0e:	3007      	adds	r0, #7
 8005c10:	4298      	cmp	r0, r3
 8005c12:	d80e      	bhi.n	8005c32 <__exponent+0x78>
 8005c14:	ab04      	add	r3, sp, #16
 8005c16:	3307      	adds	r3, #7
 8005c18:	2000      	movs	r0, #0
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d804      	bhi.n	8005c28 <__exponent+0x6e>
 8005c1e:	ab04      	add	r3, sp, #16
 8005c20:	3009      	adds	r0, #9
 8005c22:	18c0      	adds	r0, r0, r3
 8005c24:	9b01      	ldr	r3, [sp, #4]
 8005c26:	1ac0      	subs	r0, r0, r3
 8005c28:	9b03      	ldr	r3, [sp, #12]
 8005c2a:	1818      	adds	r0, r3, r0
 8005c2c:	1b40      	subs	r0, r0, r5
 8005c2e:	b007      	add	sp, #28
 8005c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c32:	7818      	ldrb	r0, [r3, #0]
 8005c34:	3301      	adds	r3, #1
 8005c36:	7008      	strb	r0, [r1, #0]
 8005c38:	3101      	adds	r1, #1
 8005c3a:	e7e7      	b.n	8005c0c <__exponent+0x52>
 8005c3c:	2330      	movs	r3, #48	; 0x30
 8005c3e:	18e4      	adds	r4, r4, r3
 8005c40:	70ab      	strb	r3, [r5, #2]
 8005c42:	1d28      	adds	r0, r5, #4
 8005c44:	70ec      	strb	r4, [r5, #3]
 8005c46:	e7f1      	b.n	8005c2c <__exponent+0x72>

08005c48 <_printf_float>:
 8005c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c4a:	b095      	sub	sp, #84	; 0x54
 8005c4c:	000c      	movs	r4, r1
 8005c4e:	9209      	str	r2, [sp, #36]	; 0x24
 8005c50:	001e      	movs	r6, r3
 8005c52:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005c54:	0007      	movs	r7, r0
 8005c56:	f001 fa93 	bl	8007180 <_localeconv_r>
 8005c5a:	6803      	ldr	r3, [r0, #0]
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	930c      	str	r3, [sp, #48]	; 0x30
 8005c60:	f7fa fa52 	bl	8000108 <strlen>
 8005c64:	2300      	movs	r3, #0
 8005c66:	9312      	str	r3, [sp, #72]	; 0x48
 8005c68:	7e23      	ldrb	r3, [r4, #24]
 8005c6a:	2207      	movs	r2, #7
 8005c6c:	930a      	str	r3, [sp, #40]	; 0x28
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	900e      	str	r0, [sp, #56]	; 0x38
 8005c72:	930d      	str	r3, [sp, #52]	; 0x34
 8005c74:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c76:	682b      	ldr	r3, [r5, #0]
 8005c78:	05c9      	lsls	r1, r1, #23
 8005c7a:	d547      	bpl.n	8005d0c <_printf_float+0xc4>
 8005c7c:	189b      	adds	r3, r3, r2
 8005c7e:	4393      	bics	r3, r2
 8005c80:	001a      	movs	r2, r3
 8005c82:	3208      	adds	r2, #8
 8005c84:	602a      	str	r2, [r5, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	64a2      	str	r2, [r4, #72]	; 0x48
 8005c8c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005c8e:	2201      	movs	r2, #1
 8005c90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005c92:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005c94:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c96:	006b      	lsls	r3, r5, #1
 8005c98:	085b      	lsrs	r3, r3, #1
 8005c9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c9c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005c9e:	4ba7      	ldr	r3, [pc, #668]	; (8005f3c <_printf_float+0x2f4>)
 8005ca0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005ca2:	4252      	negs	r2, r2
 8005ca4:	f7fc fa56 	bl	8002154 <__aeabi_dcmpun>
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	d131      	bne.n	8005d10 <_printf_float+0xc8>
 8005cac:	2201      	movs	r2, #1
 8005cae:	4ba3      	ldr	r3, [pc, #652]	; (8005f3c <_printf_float+0x2f4>)
 8005cb0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005cb2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005cb4:	4252      	negs	r2, r2
 8005cb6:	f7fa fbd9 	bl	800046c <__aeabi_dcmple>
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d128      	bne.n	8005d10 <_printf_float+0xc8>
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	0029      	movs	r1, r5
 8005cc4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005cc6:	f7fa fbc7 	bl	8000458 <__aeabi_dcmplt>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	d003      	beq.n	8005cd6 <_printf_float+0x8e>
 8005cce:	0023      	movs	r3, r4
 8005cd0:	222d      	movs	r2, #45	; 0x2d
 8005cd2:	3343      	adds	r3, #67	; 0x43
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cd8:	4d99      	ldr	r5, [pc, #612]	; (8005f40 <_printf_float+0x2f8>)
 8005cda:	2b47      	cmp	r3, #71	; 0x47
 8005cdc:	d900      	bls.n	8005ce0 <_printf_float+0x98>
 8005cde:	4d99      	ldr	r5, [pc, #612]	; (8005f44 <_printf_float+0x2fc>)
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ce4:	6123      	str	r3, [r4, #16]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	439a      	bics	r2, r3
 8005cea:	2300      	movs	r3, #0
 8005cec:	6022      	str	r2, [r4, #0]
 8005cee:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf2:	0021      	movs	r1, r4
 8005cf4:	0038      	movs	r0, r7
 8005cf6:	9600      	str	r6, [sp, #0]
 8005cf8:	aa13      	add	r2, sp, #76	; 0x4c
 8005cfa:	f000 f9e7 	bl	80060cc <_printf_common>
 8005cfe:	1c43      	adds	r3, r0, #1
 8005d00:	d000      	beq.n	8005d04 <_printf_float+0xbc>
 8005d02:	e0a2      	b.n	8005e4a <_printf_float+0x202>
 8005d04:	2001      	movs	r0, #1
 8005d06:	4240      	negs	r0, r0
 8005d08:	b015      	add	sp, #84	; 0x54
 8005d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d0c:	3307      	adds	r3, #7
 8005d0e:	e7b6      	b.n	8005c7e <_printf_float+0x36>
 8005d10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d12:	002b      	movs	r3, r5
 8005d14:	0010      	movs	r0, r2
 8005d16:	0029      	movs	r1, r5
 8005d18:	f7fc fa1c 	bl	8002154 <__aeabi_dcmpun>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d00b      	beq.n	8005d38 <_printf_float+0xf0>
 8005d20:	2d00      	cmp	r5, #0
 8005d22:	da03      	bge.n	8005d2c <_printf_float+0xe4>
 8005d24:	0023      	movs	r3, r4
 8005d26:	222d      	movs	r2, #45	; 0x2d
 8005d28:	3343      	adds	r3, #67	; 0x43
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d2e:	4d86      	ldr	r5, [pc, #536]	; (8005f48 <_printf_float+0x300>)
 8005d30:	2b47      	cmp	r3, #71	; 0x47
 8005d32:	d9d5      	bls.n	8005ce0 <_printf_float+0x98>
 8005d34:	4d85      	ldr	r5, [pc, #532]	; (8005f4c <_printf_float+0x304>)
 8005d36:	e7d3      	b.n	8005ce0 <_printf_float+0x98>
 8005d38:	2220      	movs	r2, #32
 8005d3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d3c:	6863      	ldr	r3, [r4, #4]
 8005d3e:	4391      	bics	r1, r2
 8005d40:	910f      	str	r1, [sp, #60]	; 0x3c
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	d149      	bne.n	8005dda <_printf_float+0x192>
 8005d46:	3307      	adds	r3, #7
 8005d48:	6063      	str	r3, [r4, #4]
 8005d4a:	2380      	movs	r3, #128	; 0x80
 8005d4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	4313      	orrs	r3, r2
 8005d52:	2200      	movs	r2, #0
 8005d54:	9206      	str	r2, [sp, #24]
 8005d56:	aa12      	add	r2, sp, #72	; 0x48
 8005d58:	9205      	str	r2, [sp, #20]
 8005d5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d5c:	a908      	add	r1, sp, #32
 8005d5e:	9204      	str	r2, [sp, #16]
 8005d60:	aa11      	add	r2, sp, #68	; 0x44
 8005d62:	9203      	str	r2, [sp, #12]
 8005d64:	2223      	movs	r2, #35	; 0x23
 8005d66:	6023      	str	r3, [r4, #0]
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	6863      	ldr	r3, [r4, #4]
 8005d6c:	1852      	adds	r2, r2, r1
 8005d6e:	9202      	str	r2, [sp, #8]
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	0038      	movs	r0, r7
 8005d74:	002b      	movs	r3, r5
 8005d76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d78:	f7ff febc 	bl	8005af4 <__cvt>
 8005d7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d7e:	0005      	movs	r5, r0
 8005d80:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005d82:	2b47      	cmp	r3, #71	; 0x47
 8005d84:	d108      	bne.n	8005d98 <_printf_float+0x150>
 8005d86:	1ccb      	adds	r3, r1, #3
 8005d88:	db02      	blt.n	8005d90 <_printf_float+0x148>
 8005d8a:	6863      	ldr	r3, [r4, #4]
 8005d8c:	4299      	cmp	r1, r3
 8005d8e:	dd48      	ble.n	8005e22 <_printf_float+0x1da>
 8005d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d92:	3b02      	subs	r3, #2
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	930a      	str	r3, [sp, #40]	; 0x28
 8005d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d9a:	2b65      	cmp	r3, #101	; 0x65
 8005d9c:	d824      	bhi.n	8005de8 <_printf_float+0x1a0>
 8005d9e:	0020      	movs	r0, r4
 8005da0:	001a      	movs	r2, r3
 8005da2:	3901      	subs	r1, #1
 8005da4:	3050      	adds	r0, #80	; 0x50
 8005da6:	9111      	str	r1, [sp, #68]	; 0x44
 8005da8:	f7ff ff07 	bl	8005bba <__exponent>
 8005dac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005dae:	900b      	str	r0, [sp, #44]	; 0x2c
 8005db0:	1813      	adds	r3, r2, r0
 8005db2:	6123      	str	r3, [r4, #16]
 8005db4:	2a01      	cmp	r2, #1
 8005db6:	dc02      	bgt.n	8005dbe <_printf_float+0x176>
 8005db8:	6822      	ldr	r2, [r4, #0]
 8005dba:	07d2      	lsls	r2, r2, #31
 8005dbc:	d501      	bpl.n	8005dc2 <_printf_float+0x17a>
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	6123      	str	r3, [r4, #16]
 8005dc2:	2323      	movs	r3, #35	; 0x23
 8005dc4:	aa08      	add	r2, sp, #32
 8005dc6:	189b      	adds	r3, r3, r2
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d100      	bne.n	8005dd0 <_printf_float+0x188>
 8005dce:	e78f      	b.n	8005cf0 <_printf_float+0xa8>
 8005dd0:	0023      	movs	r3, r4
 8005dd2:	222d      	movs	r2, #45	; 0x2d
 8005dd4:	3343      	adds	r3, #67	; 0x43
 8005dd6:	701a      	strb	r2, [r3, #0]
 8005dd8:	e78a      	b.n	8005cf0 <_printf_float+0xa8>
 8005dda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ddc:	2a47      	cmp	r2, #71	; 0x47
 8005dde:	d1b4      	bne.n	8005d4a <_printf_float+0x102>
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1b2      	bne.n	8005d4a <_printf_float+0x102>
 8005de4:	3301      	adds	r3, #1
 8005de6:	e7af      	b.n	8005d48 <_printf_float+0x100>
 8005de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dea:	2b66      	cmp	r3, #102	; 0x66
 8005dec:	d11b      	bne.n	8005e26 <_printf_float+0x1de>
 8005dee:	6863      	ldr	r3, [r4, #4]
 8005df0:	2900      	cmp	r1, #0
 8005df2:	dd0d      	ble.n	8005e10 <_printf_float+0x1c8>
 8005df4:	6121      	str	r1, [r4, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d102      	bne.n	8005e00 <_printf_float+0x1b8>
 8005dfa:	6822      	ldr	r2, [r4, #0]
 8005dfc:	07d2      	lsls	r2, r2, #31
 8005dfe:	d502      	bpl.n	8005e06 <_printf_float+0x1be>
 8005e00:	3301      	adds	r3, #1
 8005e02:	1859      	adds	r1, r3, r1
 8005e04:	6121      	str	r1, [r4, #16]
 8005e06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e08:	65a3      	str	r3, [r4, #88]	; 0x58
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e0e:	e7d8      	b.n	8005dc2 <_printf_float+0x17a>
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d103      	bne.n	8005e1c <_printf_float+0x1d4>
 8005e14:	2201      	movs	r2, #1
 8005e16:	6821      	ldr	r1, [r4, #0]
 8005e18:	4211      	tst	r1, r2
 8005e1a:	d000      	beq.n	8005e1e <_printf_float+0x1d6>
 8005e1c:	1c9a      	adds	r2, r3, #2
 8005e1e:	6122      	str	r2, [r4, #16]
 8005e20:	e7f1      	b.n	8005e06 <_printf_float+0x1be>
 8005e22:	2367      	movs	r3, #103	; 0x67
 8005e24:	930a      	str	r3, [sp, #40]	; 0x28
 8005e26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	db06      	blt.n	8005e3c <_printf_float+0x1f4>
 8005e2e:	6822      	ldr	r2, [r4, #0]
 8005e30:	6123      	str	r3, [r4, #16]
 8005e32:	07d2      	lsls	r2, r2, #31
 8005e34:	d5e7      	bpl.n	8005e06 <_printf_float+0x1be>
 8005e36:	3301      	adds	r3, #1
 8005e38:	6123      	str	r3, [r4, #16]
 8005e3a:	e7e4      	b.n	8005e06 <_printf_float+0x1be>
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	dc01      	bgt.n	8005e46 <_printf_float+0x1fe>
 8005e42:	1849      	adds	r1, r1, r1
 8005e44:	1ac9      	subs	r1, r1, r3
 8005e46:	1852      	adds	r2, r2, r1
 8005e48:	e7e9      	b.n	8005e1e <_printf_float+0x1d6>
 8005e4a:	6822      	ldr	r2, [r4, #0]
 8005e4c:	0553      	lsls	r3, r2, #21
 8005e4e:	d407      	bmi.n	8005e60 <_printf_float+0x218>
 8005e50:	6923      	ldr	r3, [r4, #16]
 8005e52:	002a      	movs	r2, r5
 8005e54:	0038      	movs	r0, r7
 8005e56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e58:	47b0      	blx	r6
 8005e5a:	1c43      	adds	r3, r0, #1
 8005e5c:	d128      	bne.n	8005eb0 <_printf_float+0x268>
 8005e5e:	e751      	b.n	8005d04 <_printf_float+0xbc>
 8005e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e62:	2b65      	cmp	r3, #101	; 0x65
 8005e64:	d800      	bhi.n	8005e68 <_printf_float+0x220>
 8005e66:	e0e1      	b.n	800602c <_printf_float+0x3e4>
 8005e68:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005e6a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f7fa faec 	bl	800044c <__aeabi_dcmpeq>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	d031      	beq.n	8005edc <_printf_float+0x294>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	0038      	movs	r0, r7
 8005e7c:	4a34      	ldr	r2, [pc, #208]	; (8005f50 <_printf_float+0x308>)
 8005e7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e80:	47b0      	blx	r6
 8005e82:	1c43      	adds	r3, r0, #1
 8005e84:	d100      	bne.n	8005e88 <_printf_float+0x240>
 8005e86:	e73d      	b.n	8005d04 <_printf_float+0xbc>
 8005e88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	db02      	blt.n	8005e96 <_printf_float+0x24e>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	07db      	lsls	r3, r3, #31
 8005e94:	d50c      	bpl.n	8005eb0 <_printf_float+0x268>
 8005e96:	0038      	movs	r0, r7
 8005e98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e9e:	47b0      	blx	r6
 8005ea0:	2500      	movs	r5, #0
 8005ea2:	1c43      	adds	r3, r0, #1
 8005ea4:	d100      	bne.n	8005ea8 <_printf_float+0x260>
 8005ea6:	e72d      	b.n	8005d04 <_printf_float+0xbc>
 8005ea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	42ab      	cmp	r3, r5
 8005eae:	dc0a      	bgt.n	8005ec6 <_printf_float+0x27e>
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	079b      	lsls	r3, r3, #30
 8005eb4:	d500      	bpl.n	8005eb8 <_printf_float+0x270>
 8005eb6:	e106      	b.n	80060c6 <_printf_float+0x47e>
 8005eb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005eba:	68e0      	ldr	r0, [r4, #12]
 8005ebc:	4298      	cmp	r0, r3
 8005ebe:	db00      	blt.n	8005ec2 <_printf_float+0x27a>
 8005ec0:	e722      	b.n	8005d08 <_printf_float+0xc0>
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	e720      	b.n	8005d08 <_printf_float+0xc0>
 8005ec6:	0022      	movs	r2, r4
 8005ec8:	2301      	movs	r3, #1
 8005eca:	0038      	movs	r0, r7
 8005ecc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ece:	321a      	adds	r2, #26
 8005ed0:	47b0      	blx	r6
 8005ed2:	1c43      	adds	r3, r0, #1
 8005ed4:	d100      	bne.n	8005ed8 <_printf_float+0x290>
 8005ed6:	e715      	b.n	8005d04 <_printf_float+0xbc>
 8005ed8:	3501      	adds	r5, #1
 8005eda:	e7e5      	b.n	8005ea8 <_printf_float+0x260>
 8005edc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	dc38      	bgt.n	8005f54 <_printf_float+0x30c>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	0038      	movs	r0, r7
 8005ee6:	4a1a      	ldr	r2, [pc, #104]	; (8005f50 <_printf_float+0x308>)
 8005ee8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005eea:	47b0      	blx	r6
 8005eec:	1c43      	adds	r3, r0, #1
 8005eee:	d100      	bne.n	8005ef2 <_printf_float+0x2aa>
 8005ef0:	e708      	b.n	8005d04 <_printf_float+0xbc>
 8005ef2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ef4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	d102      	bne.n	8005f00 <_printf_float+0x2b8>
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	07db      	lsls	r3, r3, #31
 8005efe:	d5d7      	bpl.n	8005eb0 <_printf_float+0x268>
 8005f00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f02:	0038      	movs	r0, r7
 8005f04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f08:	47b0      	blx	r6
 8005f0a:	1c43      	adds	r3, r0, #1
 8005f0c:	d100      	bne.n	8005f10 <_printf_float+0x2c8>
 8005f0e:	e6f9      	b.n	8005d04 <_printf_float+0xbc>
 8005f10:	2300      	movs	r3, #0
 8005f12:	930a      	str	r3, [sp, #40]	; 0x28
 8005f14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f18:	425b      	negs	r3, r3
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	dc01      	bgt.n	8005f22 <_printf_float+0x2da>
 8005f1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f20:	e797      	b.n	8005e52 <_printf_float+0x20a>
 8005f22:	0022      	movs	r2, r4
 8005f24:	2301      	movs	r3, #1
 8005f26:	0038      	movs	r0, r7
 8005f28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f2a:	321a      	adds	r2, #26
 8005f2c:	47b0      	blx	r6
 8005f2e:	1c43      	adds	r3, r0, #1
 8005f30:	d100      	bne.n	8005f34 <_printf_float+0x2ec>
 8005f32:	e6e7      	b.n	8005d04 <_printf_float+0xbc>
 8005f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f36:	3301      	adds	r3, #1
 8005f38:	e7eb      	b.n	8005f12 <_printf_float+0x2ca>
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	7fefffff 	.word	0x7fefffff
 8005f40:	08008928 	.word	0x08008928
 8005f44:	0800892c 	.word	0x0800892c
 8005f48:	08008930 	.word	0x08008930
 8005f4c:	08008934 	.word	0x08008934
 8005f50:	08008938 	.word	0x08008938
 8005f54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f58:	920a      	str	r2, [sp, #40]	; 0x28
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	dd00      	ble.n	8005f60 <_printf_float+0x318>
 8005f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	dc3c      	bgt.n	8005fe0 <_printf_float+0x398>
 8005f66:	2300      	movs	r3, #0
 8005f68:	930d      	str	r3, [sp, #52]	; 0x34
 8005f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f6c:	43db      	mvns	r3, r3
 8005f6e:	17db      	asrs	r3, r3, #31
 8005f70:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f76:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f82:	4293      	cmp	r3, r2
 8005f84:	dc34      	bgt.n	8005ff0 <_printf_float+0x3a8>
 8005f86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	db3d      	blt.n	800600a <_printf_float+0x3c2>
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	07db      	lsls	r3, r3, #31
 8005f92:	d43a      	bmi.n	800600a <_printf_float+0x3c2>
 8005f94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f98:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	1a52      	subs	r2, r2, r1
 8005f9e:	920a      	str	r2, [sp, #40]	; 0x28
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	dd00      	ble.n	8005fa6 <_printf_float+0x35e>
 8005fa4:	930a      	str	r3, [sp, #40]	; 0x28
 8005fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	dc36      	bgt.n	800601a <_printf_float+0x3d2>
 8005fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fae:	2500      	movs	r5, #0
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	17db      	asrs	r3, r3, #31
 8005fb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005fb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fbc:	1a9b      	subs	r3, r3, r2
 8005fbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fc0:	400a      	ands	r2, r1
 8005fc2:	1a9b      	subs	r3, r3, r2
 8005fc4:	42ab      	cmp	r3, r5
 8005fc6:	dc00      	bgt.n	8005fca <_printf_float+0x382>
 8005fc8:	e772      	b.n	8005eb0 <_printf_float+0x268>
 8005fca:	0022      	movs	r2, r4
 8005fcc:	2301      	movs	r3, #1
 8005fce:	0038      	movs	r0, r7
 8005fd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fd2:	321a      	adds	r2, #26
 8005fd4:	47b0      	blx	r6
 8005fd6:	1c43      	adds	r3, r0, #1
 8005fd8:	d100      	bne.n	8005fdc <_printf_float+0x394>
 8005fda:	e693      	b.n	8005d04 <_printf_float+0xbc>
 8005fdc:	3501      	adds	r5, #1
 8005fde:	e7ea      	b.n	8005fb6 <_printf_float+0x36e>
 8005fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fe2:	002a      	movs	r2, r5
 8005fe4:	0038      	movs	r0, r7
 8005fe6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fe8:	47b0      	blx	r6
 8005fea:	1c43      	adds	r3, r0, #1
 8005fec:	d1bb      	bne.n	8005f66 <_printf_float+0x31e>
 8005fee:	e689      	b.n	8005d04 <_printf_float+0xbc>
 8005ff0:	0022      	movs	r2, r4
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	0038      	movs	r0, r7
 8005ff6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ff8:	321a      	adds	r2, #26
 8005ffa:	47b0      	blx	r6
 8005ffc:	1c43      	adds	r3, r0, #1
 8005ffe:	d100      	bne.n	8006002 <_printf_float+0x3ba>
 8006000:	e680      	b.n	8005d04 <_printf_float+0xbc>
 8006002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006004:	3301      	adds	r3, #1
 8006006:	930d      	str	r3, [sp, #52]	; 0x34
 8006008:	e7b3      	b.n	8005f72 <_printf_float+0x32a>
 800600a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800600c:	0038      	movs	r0, r7
 800600e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006010:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006012:	47b0      	blx	r6
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	d1bd      	bne.n	8005f94 <_printf_float+0x34c>
 8006018:	e674      	b.n	8005d04 <_printf_float+0xbc>
 800601a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800601c:	0038      	movs	r0, r7
 800601e:	18ea      	adds	r2, r5, r3
 8006020:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006024:	47b0      	blx	r6
 8006026:	1c43      	adds	r3, r0, #1
 8006028:	d1c0      	bne.n	8005fac <_printf_float+0x364>
 800602a:	e66b      	b.n	8005d04 <_printf_float+0xbc>
 800602c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800602e:	2b01      	cmp	r3, #1
 8006030:	dc02      	bgt.n	8006038 <_printf_float+0x3f0>
 8006032:	2301      	movs	r3, #1
 8006034:	421a      	tst	r2, r3
 8006036:	d034      	beq.n	80060a2 <_printf_float+0x45a>
 8006038:	2301      	movs	r3, #1
 800603a:	002a      	movs	r2, r5
 800603c:	0038      	movs	r0, r7
 800603e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006040:	47b0      	blx	r6
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	d100      	bne.n	8006048 <_printf_float+0x400>
 8006046:	e65d      	b.n	8005d04 <_printf_float+0xbc>
 8006048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800604a:	0038      	movs	r0, r7
 800604c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800604e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006050:	47b0      	blx	r6
 8006052:	1c43      	adds	r3, r0, #1
 8006054:	d100      	bne.n	8006058 <_printf_float+0x410>
 8006056:	e655      	b.n	8005d04 <_printf_float+0xbc>
 8006058:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800605a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800605c:	2200      	movs	r2, #0
 800605e:	2300      	movs	r3, #0
 8006060:	f7fa f9f4 	bl	800044c <__aeabi_dcmpeq>
 8006064:	2800      	cmp	r0, #0
 8006066:	d11a      	bne.n	800609e <_printf_float+0x456>
 8006068:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800606a:	1c6a      	adds	r2, r5, #1
 800606c:	3b01      	subs	r3, #1
 800606e:	0038      	movs	r0, r7
 8006070:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006072:	47b0      	blx	r6
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d10e      	bne.n	8006096 <_printf_float+0x44e>
 8006078:	e644      	b.n	8005d04 <_printf_float+0xbc>
 800607a:	0022      	movs	r2, r4
 800607c:	2301      	movs	r3, #1
 800607e:	0038      	movs	r0, r7
 8006080:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006082:	321a      	adds	r2, #26
 8006084:	47b0      	blx	r6
 8006086:	1c43      	adds	r3, r0, #1
 8006088:	d100      	bne.n	800608c <_printf_float+0x444>
 800608a:	e63b      	b.n	8005d04 <_printf_float+0xbc>
 800608c:	3501      	adds	r5, #1
 800608e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006090:	3b01      	subs	r3, #1
 8006092:	42ab      	cmp	r3, r5
 8006094:	dcf1      	bgt.n	800607a <_printf_float+0x432>
 8006096:	0022      	movs	r2, r4
 8006098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800609a:	3250      	adds	r2, #80	; 0x50
 800609c:	e6da      	b.n	8005e54 <_printf_float+0x20c>
 800609e:	2500      	movs	r5, #0
 80060a0:	e7f5      	b.n	800608e <_printf_float+0x446>
 80060a2:	002a      	movs	r2, r5
 80060a4:	e7e3      	b.n	800606e <_printf_float+0x426>
 80060a6:	0022      	movs	r2, r4
 80060a8:	2301      	movs	r3, #1
 80060aa:	0038      	movs	r0, r7
 80060ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060ae:	3219      	adds	r2, #25
 80060b0:	47b0      	blx	r6
 80060b2:	1c43      	adds	r3, r0, #1
 80060b4:	d100      	bne.n	80060b8 <_printf_float+0x470>
 80060b6:	e625      	b.n	8005d04 <_printf_float+0xbc>
 80060b8:	3501      	adds	r5, #1
 80060ba:	68e3      	ldr	r3, [r4, #12]
 80060bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80060be:	1a9b      	subs	r3, r3, r2
 80060c0:	42ab      	cmp	r3, r5
 80060c2:	dcf0      	bgt.n	80060a6 <_printf_float+0x45e>
 80060c4:	e6f8      	b.n	8005eb8 <_printf_float+0x270>
 80060c6:	2500      	movs	r5, #0
 80060c8:	e7f7      	b.n	80060ba <_printf_float+0x472>
 80060ca:	46c0      	nop			; (mov r8, r8)

080060cc <_printf_common>:
 80060cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060ce:	0015      	movs	r5, r2
 80060d0:	9301      	str	r3, [sp, #4]
 80060d2:	688a      	ldr	r2, [r1, #8]
 80060d4:	690b      	ldr	r3, [r1, #16]
 80060d6:	000c      	movs	r4, r1
 80060d8:	9000      	str	r0, [sp, #0]
 80060da:	4293      	cmp	r3, r2
 80060dc:	da00      	bge.n	80060e0 <_printf_common+0x14>
 80060de:	0013      	movs	r3, r2
 80060e0:	0022      	movs	r2, r4
 80060e2:	602b      	str	r3, [r5, #0]
 80060e4:	3243      	adds	r2, #67	; 0x43
 80060e6:	7812      	ldrb	r2, [r2, #0]
 80060e8:	2a00      	cmp	r2, #0
 80060ea:	d001      	beq.n	80060f0 <_printf_common+0x24>
 80060ec:	3301      	adds	r3, #1
 80060ee:	602b      	str	r3, [r5, #0]
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	069b      	lsls	r3, r3, #26
 80060f4:	d502      	bpl.n	80060fc <_printf_common+0x30>
 80060f6:	682b      	ldr	r3, [r5, #0]
 80060f8:	3302      	adds	r3, #2
 80060fa:	602b      	str	r3, [r5, #0]
 80060fc:	6822      	ldr	r2, [r4, #0]
 80060fe:	2306      	movs	r3, #6
 8006100:	0017      	movs	r7, r2
 8006102:	401f      	ands	r7, r3
 8006104:	421a      	tst	r2, r3
 8006106:	d027      	beq.n	8006158 <_printf_common+0x8c>
 8006108:	0023      	movs	r3, r4
 800610a:	3343      	adds	r3, #67	; 0x43
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	1e5a      	subs	r2, r3, #1
 8006110:	4193      	sbcs	r3, r2
 8006112:	6822      	ldr	r2, [r4, #0]
 8006114:	0692      	lsls	r2, r2, #26
 8006116:	d430      	bmi.n	800617a <_printf_common+0xae>
 8006118:	0022      	movs	r2, r4
 800611a:	9901      	ldr	r1, [sp, #4]
 800611c:	9800      	ldr	r0, [sp, #0]
 800611e:	9e08      	ldr	r6, [sp, #32]
 8006120:	3243      	adds	r2, #67	; 0x43
 8006122:	47b0      	blx	r6
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d025      	beq.n	8006174 <_printf_common+0xa8>
 8006128:	2306      	movs	r3, #6
 800612a:	6820      	ldr	r0, [r4, #0]
 800612c:	682a      	ldr	r2, [r5, #0]
 800612e:	68e1      	ldr	r1, [r4, #12]
 8006130:	2500      	movs	r5, #0
 8006132:	4003      	ands	r3, r0
 8006134:	2b04      	cmp	r3, #4
 8006136:	d103      	bne.n	8006140 <_printf_common+0x74>
 8006138:	1a8d      	subs	r5, r1, r2
 800613a:	43eb      	mvns	r3, r5
 800613c:	17db      	asrs	r3, r3, #31
 800613e:	401d      	ands	r5, r3
 8006140:	68a3      	ldr	r3, [r4, #8]
 8006142:	6922      	ldr	r2, [r4, #16]
 8006144:	4293      	cmp	r3, r2
 8006146:	dd01      	ble.n	800614c <_printf_common+0x80>
 8006148:	1a9b      	subs	r3, r3, r2
 800614a:	18ed      	adds	r5, r5, r3
 800614c:	2700      	movs	r7, #0
 800614e:	42bd      	cmp	r5, r7
 8006150:	d120      	bne.n	8006194 <_printf_common+0xc8>
 8006152:	2000      	movs	r0, #0
 8006154:	e010      	b.n	8006178 <_printf_common+0xac>
 8006156:	3701      	adds	r7, #1
 8006158:	68e3      	ldr	r3, [r4, #12]
 800615a:	682a      	ldr	r2, [r5, #0]
 800615c:	1a9b      	subs	r3, r3, r2
 800615e:	42bb      	cmp	r3, r7
 8006160:	ddd2      	ble.n	8006108 <_printf_common+0x3c>
 8006162:	0022      	movs	r2, r4
 8006164:	2301      	movs	r3, #1
 8006166:	9901      	ldr	r1, [sp, #4]
 8006168:	9800      	ldr	r0, [sp, #0]
 800616a:	9e08      	ldr	r6, [sp, #32]
 800616c:	3219      	adds	r2, #25
 800616e:	47b0      	blx	r6
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d1f0      	bne.n	8006156 <_printf_common+0x8a>
 8006174:	2001      	movs	r0, #1
 8006176:	4240      	negs	r0, r0
 8006178:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800617a:	2030      	movs	r0, #48	; 0x30
 800617c:	18e1      	adds	r1, r4, r3
 800617e:	3143      	adds	r1, #67	; 0x43
 8006180:	7008      	strb	r0, [r1, #0]
 8006182:	0021      	movs	r1, r4
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	3145      	adds	r1, #69	; 0x45
 8006188:	7809      	ldrb	r1, [r1, #0]
 800618a:	18a2      	adds	r2, r4, r2
 800618c:	3243      	adds	r2, #67	; 0x43
 800618e:	3302      	adds	r3, #2
 8006190:	7011      	strb	r1, [r2, #0]
 8006192:	e7c1      	b.n	8006118 <_printf_common+0x4c>
 8006194:	0022      	movs	r2, r4
 8006196:	2301      	movs	r3, #1
 8006198:	9901      	ldr	r1, [sp, #4]
 800619a:	9800      	ldr	r0, [sp, #0]
 800619c:	9e08      	ldr	r6, [sp, #32]
 800619e:	321a      	adds	r2, #26
 80061a0:	47b0      	blx	r6
 80061a2:	1c43      	adds	r3, r0, #1
 80061a4:	d0e6      	beq.n	8006174 <_printf_common+0xa8>
 80061a6:	3701      	adds	r7, #1
 80061a8:	e7d1      	b.n	800614e <_printf_common+0x82>
	...

080061ac <_printf_i>:
 80061ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ae:	b08b      	sub	sp, #44	; 0x2c
 80061b0:	9206      	str	r2, [sp, #24]
 80061b2:	000a      	movs	r2, r1
 80061b4:	3243      	adds	r2, #67	; 0x43
 80061b6:	9307      	str	r3, [sp, #28]
 80061b8:	9005      	str	r0, [sp, #20]
 80061ba:	9204      	str	r2, [sp, #16]
 80061bc:	7e0a      	ldrb	r2, [r1, #24]
 80061be:	000c      	movs	r4, r1
 80061c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061c2:	2a78      	cmp	r2, #120	; 0x78
 80061c4:	d807      	bhi.n	80061d6 <_printf_i+0x2a>
 80061c6:	2a62      	cmp	r2, #98	; 0x62
 80061c8:	d809      	bhi.n	80061de <_printf_i+0x32>
 80061ca:	2a00      	cmp	r2, #0
 80061cc:	d100      	bne.n	80061d0 <_printf_i+0x24>
 80061ce:	e0c1      	b.n	8006354 <_printf_i+0x1a8>
 80061d0:	2a58      	cmp	r2, #88	; 0x58
 80061d2:	d100      	bne.n	80061d6 <_printf_i+0x2a>
 80061d4:	e08c      	b.n	80062f0 <_printf_i+0x144>
 80061d6:	0026      	movs	r6, r4
 80061d8:	3642      	adds	r6, #66	; 0x42
 80061da:	7032      	strb	r2, [r6, #0]
 80061dc:	e022      	b.n	8006224 <_printf_i+0x78>
 80061de:	0010      	movs	r0, r2
 80061e0:	3863      	subs	r0, #99	; 0x63
 80061e2:	2815      	cmp	r0, #21
 80061e4:	d8f7      	bhi.n	80061d6 <_printf_i+0x2a>
 80061e6:	f7f9 ffa1 	bl	800012c <__gnu_thumb1_case_shi>
 80061ea:	0016      	.short	0x0016
 80061ec:	fff6001f 	.word	0xfff6001f
 80061f0:	fff6fff6 	.word	0xfff6fff6
 80061f4:	001ffff6 	.word	0x001ffff6
 80061f8:	fff6fff6 	.word	0xfff6fff6
 80061fc:	fff6fff6 	.word	0xfff6fff6
 8006200:	003600a8 	.word	0x003600a8
 8006204:	fff6009a 	.word	0xfff6009a
 8006208:	00b9fff6 	.word	0x00b9fff6
 800620c:	0036fff6 	.word	0x0036fff6
 8006210:	fff6fff6 	.word	0xfff6fff6
 8006214:	009e      	.short	0x009e
 8006216:	0026      	movs	r6, r4
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	3642      	adds	r6, #66	; 0x42
 800621c:	1d11      	adds	r1, r2, #4
 800621e:	6019      	str	r1, [r3, #0]
 8006220:	6813      	ldr	r3, [r2, #0]
 8006222:	7033      	strb	r3, [r6, #0]
 8006224:	2301      	movs	r3, #1
 8006226:	e0a7      	b.n	8006378 <_printf_i+0x1cc>
 8006228:	6808      	ldr	r0, [r1, #0]
 800622a:	6819      	ldr	r1, [r3, #0]
 800622c:	1d0a      	adds	r2, r1, #4
 800622e:	0605      	lsls	r5, r0, #24
 8006230:	d50b      	bpl.n	800624a <_printf_i+0x9e>
 8006232:	680d      	ldr	r5, [r1, #0]
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	2d00      	cmp	r5, #0
 8006238:	da03      	bge.n	8006242 <_printf_i+0x96>
 800623a:	232d      	movs	r3, #45	; 0x2d
 800623c:	9a04      	ldr	r2, [sp, #16]
 800623e:	426d      	negs	r5, r5
 8006240:	7013      	strb	r3, [r2, #0]
 8006242:	4b61      	ldr	r3, [pc, #388]	; (80063c8 <_printf_i+0x21c>)
 8006244:	270a      	movs	r7, #10
 8006246:	9303      	str	r3, [sp, #12]
 8006248:	e01b      	b.n	8006282 <_printf_i+0xd6>
 800624a:	680d      	ldr	r5, [r1, #0]
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	0641      	lsls	r1, r0, #25
 8006250:	d5f1      	bpl.n	8006236 <_printf_i+0x8a>
 8006252:	b22d      	sxth	r5, r5
 8006254:	e7ef      	b.n	8006236 <_printf_i+0x8a>
 8006256:	680d      	ldr	r5, [r1, #0]
 8006258:	6819      	ldr	r1, [r3, #0]
 800625a:	1d08      	adds	r0, r1, #4
 800625c:	6018      	str	r0, [r3, #0]
 800625e:	062e      	lsls	r6, r5, #24
 8006260:	d501      	bpl.n	8006266 <_printf_i+0xba>
 8006262:	680d      	ldr	r5, [r1, #0]
 8006264:	e003      	b.n	800626e <_printf_i+0xc2>
 8006266:	066d      	lsls	r5, r5, #25
 8006268:	d5fb      	bpl.n	8006262 <_printf_i+0xb6>
 800626a:	680d      	ldr	r5, [r1, #0]
 800626c:	b2ad      	uxth	r5, r5
 800626e:	4b56      	ldr	r3, [pc, #344]	; (80063c8 <_printf_i+0x21c>)
 8006270:	2708      	movs	r7, #8
 8006272:	9303      	str	r3, [sp, #12]
 8006274:	2a6f      	cmp	r2, #111	; 0x6f
 8006276:	d000      	beq.n	800627a <_printf_i+0xce>
 8006278:	3702      	adds	r7, #2
 800627a:	0023      	movs	r3, r4
 800627c:	2200      	movs	r2, #0
 800627e:	3343      	adds	r3, #67	; 0x43
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	6863      	ldr	r3, [r4, #4]
 8006284:	60a3      	str	r3, [r4, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	db03      	blt.n	8006292 <_printf_i+0xe6>
 800628a:	2204      	movs	r2, #4
 800628c:	6821      	ldr	r1, [r4, #0]
 800628e:	4391      	bics	r1, r2
 8006290:	6021      	str	r1, [r4, #0]
 8006292:	2d00      	cmp	r5, #0
 8006294:	d102      	bne.n	800629c <_printf_i+0xf0>
 8006296:	9e04      	ldr	r6, [sp, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00c      	beq.n	80062b6 <_printf_i+0x10a>
 800629c:	9e04      	ldr	r6, [sp, #16]
 800629e:	0028      	movs	r0, r5
 80062a0:	0039      	movs	r1, r7
 80062a2:	f7f9 ffd3 	bl	800024c <__aeabi_uidivmod>
 80062a6:	9b03      	ldr	r3, [sp, #12]
 80062a8:	3e01      	subs	r6, #1
 80062aa:	5c5b      	ldrb	r3, [r3, r1]
 80062ac:	7033      	strb	r3, [r6, #0]
 80062ae:	002b      	movs	r3, r5
 80062b0:	0005      	movs	r5, r0
 80062b2:	429f      	cmp	r7, r3
 80062b4:	d9f3      	bls.n	800629e <_printf_i+0xf2>
 80062b6:	2f08      	cmp	r7, #8
 80062b8:	d109      	bne.n	80062ce <_printf_i+0x122>
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	07db      	lsls	r3, r3, #31
 80062be:	d506      	bpl.n	80062ce <_printf_i+0x122>
 80062c0:	6863      	ldr	r3, [r4, #4]
 80062c2:	6922      	ldr	r2, [r4, #16]
 80062c4:	4293      	cmp	r3, r2
 80062c6:	dc02      	bgt.n	80062ce <_printf_i+0x122>
 80062c8:	2330      	movs	r3, #48	; 0x30
 80062ca:	3e01      	subs	r6, #1
 80062cc:	7033      	strb	r3, [r6, #0]
 80062ce:	9b04      	ldr	r3, [sp, #16]
 80062d0:	1b9b      	subs	r3, r3, r6
 80062d2:	6123      	str	r3, [r4, #16]
 80062d4:	9b07      	ldr	r3, [sp, #28]
 80062d6:	0021      	movs	r1, r4
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	9805      	ldr	r0, [sp, #20]
 80062dc:	9b06      	ldr	r3, [sp, #24]
 80062de:	aa09      	add	r2, sp, #36	; 0x24
 80062e0:	f7ff fef4 	bl	80060cc <_printf_common>
 80062e4:	1c43      	adds	r3, r0, #1
 80062e6:	d14c      	bne.n	8006382 <_printf_i+0x1d6>
 80062e8:	2001      	movs	r0, #1
 80062ea:	4240      	negs	r0, r0
 80062ec:	b00b      	add	sp, #44	; 0x2c
 80062ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062f0:	3145      	adds	r1, #69	; 0x45
 80062f2:	700a      	strb	r2, [r1, #0]
 80062f4:	4a34      	ldr	r2, [pc, #208]	; (80063c8 <_printf_i+0x21c>)
 80062f6:	9203      	str	r2, [sp, #12]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	6821      	ldr	r1, [r4, #0]
 80062fc:	ca20      	ldmia	r2!, {r5}
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	0608      	lsls	r0, r1, #24
 8006302:	d516      	bpl.n	8006332 <_printf_i+0x186>
 8006304:	07cb      	lsls	r3, r1, #31
 8006306:	d502      	bpl.n	800630e <_printf_i+0x162>
 8006308:	2320      	movs	r3, #32
 800630a:	4319      	orrs	r1, r3
 800630c:	6021      	str	r1, [r4, #0]
 800630e:	2710      	movs	r7, #16
 8006310:	2d00      	cmp	r5, #0
 8006312:	d1b2      	bne.n	800627a <_printf_i+0xce>
 8006314:	2320      	movs	r3, #32
 8006316:	6822      	ldr	r2, [r4, #0]
 8006318:	439a      	bics	r2, r3
 800631a:	6022      	str	r2, [r4, #0]
 800631c:	e7ad      	b.n	800627a <_printf_i+0xce>
 800631e:	2220      	movs	r2, #32
 8006320:	6809      	ldr	r1, [r1, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	6022      	str	r2, [r4, #0]
 8006326:	0022      	movs	r2, r4
 8006328:	2178      	movs	r1, #120	; 0x78
 800632a:	3245      	adds	r2, #69	; 0x45
 800632c:	7011      	strb	r1, [r2, #0]
 800632e:	4a27      	ldr	r2, [pc, #156]	; (80063cc <_printf_i+0x220>)
 8006330:	e7e1      	b.n	80062f6 <_printf_i+0x14a>
 8006332:	0648      	lsls	r0, r1, #25
 8006334:	d5e6      	bpl.n	8006304 <_printf_i+0x158>
 8006336:	b2ad      	uxth	r5, r5
 8006338:	e7e4      	b.n	8006304 <_printf_i+0x158>
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	680d      	ldr	r5, [r1, #0]
 800633e:	1d10      	adds	r0, r2, #4
 8006340:	6949      	ldr	r1, [r1, #20]
 8006342:	6018      	str	r0, [r3, #0]
 8006344:	6813      	ldr	r3, [r2, #0]
 8006346:	062e      	lsls	r6, r5, #24
 8006348:	d501      	bpl.n	800634e <_printf_i+0x1a2>
 800634a:	6019      	str	r1, [r3, #0]
 800634c:	e002      	b.n	8006354 <_printf_i+0x1a8>
 800634e:	066d      	lsls	r5, r5, #25
 8006350:	d5fb      	bpl.n	800634a <_printf_i+0x19e>
 8006352:	8019      	strh	r1, [r3, #0]
 8006354:	2300      	movs	r3, #0
 8006356:	9e04      	ldr	r6, [sp, #16]
 8006358:	6123      	str	r3, [r4, #16]
 800635a:	e7bb      	b.n	80062d4 <_printf_i+0x128>
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	1d11      	adds	r1, r2, #4
 8006360:	6019      	str	r1, [r3, #0]
 8006362:	6816      	ldr	r6, [r2, #0]
 8006364:	2100      	movs	r1, #0
 8006366:	0030      	movs	r0, r6
 8006368:	6862      	ldr	r2, [r4, #4]
 800636a:	f000 ff0d 	bl	8007188 <memchr>
 800636e:	2800      	cmp	r0, #0
 8006370:	d001      	beq.n	8006376 <_printf_i+0x1ca>
 8006372:	1b80      	subs	r0, r0, r6
 8006374:	6060      	str	r0, [r4, #4]
 8006376:	6863      	ldr	r3, [r4, #4]
 8006378:	6123      	str	r3, [r4, #16]
 800637a:	2300      	movs	r3, #0
 800637c:	9a04      	ldr	r2, [sp, #16]
 800637e:	7013      	strb	r3, [r2, #0]
 8006380:	e7a8      	b.n	80062d4 <_printf_i+0x128>
 8006382:	6923      	ldr	r3, [r4, #16]
 8006384:	0032      	movs	r2, r6
 8006386:	9906      	ldr	r1, [sp, #24]
 8006388:	9805      	ldr	r0, [sp, #20]
 800638a:	9d07      	ldr	r5, [sp, #28]
 800638c:	47a8      	blx	r5
 800638e:	1c43      	adds	r3, r0, #1
 8006390:	d0aa      	beq.n	80062e8 <_printf_i+0x13c>
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	079b      	lsls	r3, r3, #30
 8006396:	d415      	bmi.n	80063c4 <_printf_i+0x218>
 8006398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800639a:	68e0      	ldr	r0, [r4, #12]
 800639c:	4298      	cmp	r0, r3
 800639e:	daa5      	bge.n	80062ec <_printf_i+0x140>
 80063a0:	0018      	movs	r0, r3
 80063a2:	e7a3      	b.n	80062ec <_printf_i+0x140>
 80063a4:	0022      	movs	r2, r4
 80063a6:	2301      	movs	r3, #1
 80063a8:	9906      	ldr	r1, [sp, #24]
 80063aa:	9805      	ldr	r0, [sp, #20]
 80063ac:	9e07      	ldr	r6, [sp, #28]
 80063ae:	3219      	adds	r2, #25
 80063b0:	47b0      	blx	r6
 80063b2:	1c43      	adds	r3, r0, #1
 80063b4:	d098      	beq.n	80062e8 <_printf_i+0x13c>
 80063b6:	3501      	adds	r5, #1
 80063b8:	68e3      	ldr	r3, [r4, #12]
 80063ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063bc:	1a9b      	subs	r3, r3, r2
 80063be:	42ab      	cmp	r3, r5
 80063c0:	dcf0      	bgt.n	80063a4 <_printf_i+0x1f8>
 80063c2:	e7e9      	b.n	8006398 <_printf_i+0x1ec>
 80063c4:	2500      	movs	r5, #0
 80063c6:	e7f7      	b.n	80063b8 <_printf_i+0x20c>
 80063c8:	0800893a 	.word	0x0800893a
 80063cc:	0800894b 	.word	0x0800894b

080063d0 <_sbrk_r>:
 80063d0:	2300      	movs	r3, #0
 80063d2:	b570      	push	{r4, r5, r6, lr}
 80063d4:	4d06      	ldr	r5, [pc, #24]	; (80063f0 <_sbrk_r+0x20>)
 80063d6:	0004      	movs	r4, r0
 80063d8:	0008      	movs	r0, r1
 80063da:	602b      	str	r3, [r5, #0]
 80063dc:	f7fc fcce 	bl	8002d7c <_sbrk>
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	d103      	bne.n	80063ec <_sbrk_r+0x1c>
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d000      	beq.n	80063ec <_sbrk_r+0x1c>
 80063ea:	6023      	str	r3, [r4, #0]
 80063ec:	bd70      	pop	{r4, r5, r6, pc}
 80063ee:	46c0      	nop			; (mov r8, r8)
 80063f0:	20000300 	.word	0x20000300

080063f4 <siprintf>:
 80063f4:	b40e      	push	{r1, r2, r3}
 80063f6:	b500      	push	{lr}
 80063f8:	490b      	ldr	r1, [pc, #44]	; (8006428 <siprintf+0x34>)
 80063fa:	b09c      	sub	sp, #112	; 0x70
 80063fc:	ab1d      	add	r3, sp, #116	; 0x74
 80063fe:	9002      	str	r0, [sp, #8]
 8006400:	9006      	str	r0, [sp, #24]
 8006402:	9107      	str	r1, [sp, #28]
 8006404:	9104      	str	r1, [sp, #16]
 8006406:	4809      	ldr	r0, [pc, #36]	; (800642c <siprintf+0x38>)
 8006408:	4909      	ldr	r1, [pc, #36]	; (8006430 <siprintf+0x3c>)
 800640a:	cb04      	ldmia	r3!, {r2}
 800640c:	9105      	str	r1, [sp, #20]
 800640e:	6800      	ldr	r0, [r0, #0]
 8006410:	a902      	add	r1, sp, #8
 8006412:	9301      	str	r3, [sp, #4]
 8006414:	f001 fb06 	bl	8007a24 <_svfiprintf_r>
 8006418:	2300      	movs	r3, #0
 800641a:	9a02      	ldr	r2, [sp, #8]
 800641c:	7013      	strb	r3, [r2, #0]
 800641e:	b01c      	add	sp, #112	; 0x70
 8006420:	bc08      	pop	{r3}
 8006422:	b003      	add	sp, #12
 8006424:	4718      	bx	r3
 8006426:	46c0      	nop			; (mov r8, r8)
 8006428:	7fffffff 	.word	0x7fffffff
 800642c:	2000000c 	.word	0x2000000c
 8006430:	ffff0208 	.word	0xffff0208

08006434 <quorem>:
 8006434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006436:	0006      	movs	r6, r0
 8006438:	690b      	ldr	r3, [r1, #16]
 800643a:	6932      	ldr	r2, [r6, #16]
 800643c:	b087      	sub	sp, #28
 800643e:	2000      	movs	r0, #0
 8006440:	9103      	str	r1, [sp, #12]
 8006442:	429a      	cmp	r2, r3
 8006444:	db65      	blt.n	8006512 <quorem+0xde>
 8006446:	3b01      	subs	r3, #1
 8006448:	009c      	lsls	r4, r3, #2
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	000b      	movs	r3, r1
 800644e:	3314      	adds	r3, #20
 8006450:	9305      	str	r3, [sp, #20]
 8006452:	191b      	adds	r3, r3, r4
 8006454:	9304      	str	r3, [sp, #16]
 8006456:	0033      	movs	r3, r6
 8006458:	3314      	adds	r3, #20
 800645a:	9302      	str	r3, [sp, #8]
 800645c:	191c      	adds	r4, r3, r4
 800645e:	9b04      	ldr	r3, [sp, #16]
 8006460:	6827      	ldr	r7, [r4, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	0038      	movs	r0, r7
 8006466:	1c5d      	adds	r5, r3, #1
 8006468:	0029      	movs	r1, r5
 800646a:	9301      	str	r3, [sp, #4]
 800646c:	f7f9 fe68 	bl	8000140 <__udivsi3>
 8006470:	9001      	str	r0, [sp, #4]
 8006472:	42af      	cmp	r7, r5
 8006474:	d324      	bcc.n	80064c0 <quorem+0x8c>
 8006476:	2500      	movs	r5, #0
 8006478:	46ac      	mov	ip, r5
 800647a:	9802      	ldr	r0, [sp, #8]
 800647c:	9f05      	ldr	r7, [sp, #20]
 800647e:	cf08      	ldmia	r7!, {r3}
 8006480:	9a01      	ldr	r2, [sp, #4]
 8006482:	b299      	uxth	r1, r3
 8006484:	4351      	muls	r1, r2
 8006486:	0c1b      	lsrs	r3, r3, #16
 8006488:	4353      	muls	r3, r2
 800648a:	1949      	adds	r1, r1, r5
 800648c:	0c0a      	lsrs	r2, r1, #16
 800648e:	189b      	adds	r3, r3, r2
 8006490:	6802      	ldr	r2, [r0, #0]
 8006492:	b289      	uxth	r1, r1
 8006494:	b292      	uxth	r2, r2
 8006496:	4462      	add	r2, ip
 8006498:	1a52      	subs	r2, r2, r1
 800649a:	6801      	ldr	r1, [r0, #0]
 800649c:	0c1d      	lsrs	r5, r3, #16
 800649e:	0c09      	lsrs	r1, r1, #16
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	1acb      	subs	r3, r1, r3
 80064a4:	1411      	asrs	r1, r2, #16
 80064a6:	185b      	adds	r3, r3, r1
 80064a8:	1419      	asrs	r1, r3, #16
 80064aa:	b292      	uxth	r2, r2
 80064ac:	041b      	lsls	r3, r3, #16
 80064ae:	431a      	orrs	r2, r3
 80064b0:	9b04      	ldr	r3, [sp, #16]
 80064b2:	468c      	mov	ip, r1
 80064b4:	c004      	stmia	r0!, {r2}
 80064b6:	42bb      	cmp	r3, r7
 80064b8:	d2e1      	bcs.n	800647e <quorem+0x4a>
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d030      	beq.n	8006522 <quorem+0xee>
 80064c0:	0030      	movs	r0, r6
 80064c2:	9903      	ldr	r1, [sp, #12]
 80064c4:	f001 f908 	bl	80076d8 <__mcmp>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	db21      	blt.n	8006510 <quorem+0xdc>
 80064cc:	0030      	movs	r0, r6
 80064ce:	2400      	movs	r4, #0
 80064d0:	9b01      	ldr	r3, [sp, #4]
 80064d2:	9903      	ldr	r1, [sp, #12]
 80064d4:	3301      	adds	r3, #1
 80064d6:	9301      	str	r3, [sp, #4]
 80064d8:	3014      	adds	r0, #20
 80064da:	3114      	adds	r1, #20
 80064dc:	6803      	ldr	r3, [r0, #0]
 80064de:	c920      	ldmia	r1!, {r5}
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	1914      	adds	r4, r2, r4
 80064e4:	b2aa      	uxth	r2, r5
 80064e6:	1aa2      	subs	r2, r4, r2
 80064e8:	0c1b      	lsrs	r3, r3, #16
 80064ea:	0c2d      	lsrs	r5, r5, #16
 80064ec:	1414      	asrs	r4, r2, #16
 80064ee:	1b5b      	subs	r3, r3, r5
 80064f0:	191b      	adds	r3, r3, r4
 80064f2:	141c      	asrs	r4, r3, #16
 80064f4:	b292      	uxth	r2, r2
 80064f6:	041b      	lsls	r3, r3, #16
 80064f8:	4313      	orrs	r3, r2
 80064fa:	c008      	stmia	r0!, {r3}
 80064fc:	9b04      	ldr	r3, [sp, #16]
 80064fe:	428b      	cmp	r3, r1
 8006500:	d2ec      	bcs.n	80064dc <quorem+0xa8>
 8006502:	9b00      	ldr	r3, [sp, #0]
 8006504:	9a02      	ldr	r2, [sp, #8]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	18d3      	adds	r3, r2, r3
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	2a00      	cmp	r2, #0
 800650e:	d015      	beq.n	800653c <quorem+0x108>
 8006510:	9801      	ldr	r0, [sp, #4]
 8006512:	b007      	add	sp, #28
 8006514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d106      	bne.n	800652a <quorem+0xf6>
 800651c:	9b00      	ldr	r3, [sp, #0]
 800651e:	3b01      	subs	r3, #1
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	9b02      	ldr	r3, [sp, #8]
 8006524:	3c04      	subs	r4, #4
 8006526:	42a3      	cmp	r3, r4
 8006528:	d3f5      	bcc.n	8006516 <quorem+0xe2>
 800652a:	9b00      	ldr	r3, [sp, #0]
 800652c:	6133      	str	r3, [r6, #16]
 800652e:	e7c7      	b.n	80064c0 <quorem+0x8c>
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	2a00      	cmp	r2, #0
 8006534:	d106      	bne.n	8006544 <quorem+0x110>
 8006536:	9a00      	ldr	r2, [sp, #0]
 8006538:	3a01      	subs	r2, #1
 800653a:	9200      	str	r2, [sp, #0]
 800653c:	9a02      	ldr	r2, [sp, #8]
 800653e:	3b04      	subs	r3, #4
 8006540:	429a      	cmp	r2, r3
 8006542:	d3f5      	bcc.n	8006530 <quorem+0xfc>
 8006544:	9b00      	ldr	r3, [sp, #0]
 8006546:	6133      	str	r3, [r6, #16]
 8006548:	e7e2      	b.n	8006510 <quorem+0xdc>
	...

0800654c <_dtoa_r>:
 800654c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800654e:	b09d      	sub	sp, #116	; 0x74
 8006550:	9202      	str	r2, [sp, #8]
 8006552:	9303      	str	r3, [sp, #12]
 8006554:	9b02      	ldr	r3, [sp, #8]
 8006556:	9c03      	ldr	r4, [sp, #12]
 8006558:	9308      	str	r3, [sp, #32]
 800655a:	9409      	str	r4, [sp, #36]	; 0x24
 800655c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800655e:	0007      	movs	r7, r0
 8006560:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8006562:	2c00      	cmp	r4, #0
 8006564:	d10e      	bne.n	8006584 <_dtoa_r+0x38>
 8006566:	2010      	movs	r0, #16
 8006568:	f7ff f9d0 	bl	800590c <malloc>
 800656c:	1e02      	subs	r2, r0, #0
 800656e:	6278      	str	r0, [r7, #36]	; 0x24
 8006570:	d104      	bne.n	800657c <_dtoa_r+0x30>
 8006572:	21ea      	movs	r1, #234	; 0xea
 8006574:	4bc7      	ldr	r3, [pc, #796]	; (8006894 <_dtoa_r+0x348>)
 8006576:	48c8      	ldr	r0, [pc, #800]	; (8006898 <_dtoa_r+0x34c>)
 8006578:	f001 fb54 	bl	8007c24 <__assert_func>
 800657c:	6044      	str	r4, [r0, #4]
 800657e:	6084      	str	r4, [r0, #8]
 8006580:	6004      	str	r4, [r0, #0]
 8006582:	60c4      	str	r4, [r0, #12]
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	6819      	ldr	r1, [r3, #0]
 8006588:	2900      	cmp	r1, #0
 800658a:	d00a      	beq.n	80065a2 <_dtoa_r+0x56>
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	2301      	movs	r3, #1
 8006590:	4093      	lsls	r3, r2
 8006592:	604a      	str	r2, [r1, #4]
 8006594:	608b      	str	r3, [r1, #8]
 8006596:	0038      	movs	r0, r7
 8006598:	f000 fe5e 	bl	8007258 <_Bfree>
 800659c:	2200      	movs	r2, #0
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	9b03      	ldr	r3, [sp, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	da20      	bge.n	80065ea <_dtoa_r+0x9e>
 80065a8:	2301      	movs	r3, #1
 80065aa:	602b      	str	r3, [r5, #0]
 80065ac:	9b03      	ldr	r3, [sp, #12]
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	085b      	lsrs	r3, r3, #1
 80065b2:	9309      	str	r3, [sp, #36]	; 0x24
 80065b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80065b6:	4bb9      	ldr	r3, [pc, #740]	; (800689c <_dtoa_r+0x350>)
 80065b8:	4ab8      	ldr	r2, [pc, #736]	; (800689c <_dtoa_r+0x350>)
 80065ba:	402b      	ands	r3, r5
 80065bc:	4293      	cmp	r3, r2
 80065be:	d117      	bne.n	80065f0 <_dtoa_r+0xa4>
 80065c0:	4bb7      	ldr	r3, [pc, #732]	; (80068a0 <_dtoa_r+0x354>)
 80065c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80065c4:	0328      	lsls	r0, r5, #12
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	9b02      	ldr	r3, [sp, #8]
 80065ca:	0b00      	lsrs	r0, r0, #12
 80065cc:	4318      	orrs	r0, r3
 80065ce:	d101      	bne.n	80065d4 <_dtoa_r+0x88>
 80065d0:	f000 fdbf 	bl	8007152 <_dtoa_r+0xc06>
 80065d4:	48b3      	ldr	r0, [pc, #716]	; (80068a4 <_dtoa_r+0x358>)
 80065d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80065d8:	9006      	str	r0, [sp, #24]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <_dtoa_r+0x98>
 80065de:	4bb2      	ldr	r3, [pc, #712]	; (80068a8 <_dtoa_r+0x35c>)
 80065e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	9806      	ldr	r0, [sp, #24]
 80065e6:	b01d      	add	sp, #116	; 0x74
 80065e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ea:	2300      	movs	r3, #0
 80065ec:	602b      	str	r3, [r5, #0]
 80065ee:	e7e1      	b.n	80065b4 <_dtoa_r+0x68>
 80065f0:	9b08      	ldr	r3, [sp, #32]
 80065f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80065f4:	9312      	str	r3, [sp, #72]	; 0x48
 80065f6:	9413      	str	r4, [sp, #76]	; 0x4c
 80065f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80065fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80065fc:	2200      	movs	r2, #0
 80065fe:	2300      	movs	r3, #0
 8006600:	f7f9 ff24 	bl	800044c <__aeabi_dcmpeq>
 8006604:	1e04      	subs	r4, r0, #0
 8006606:	d009      	beq.n	800661c <_dtoa_r+0xd0>
 8006608:	2301      	movs	r3, #1
 800660a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	4ba7      	ldr	r3, [pc, #668]	; (80068ac <_dtoa_r+0x360>)
 8006610:	9306      	str	r3, [sp, #24]
 8006612:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0e5      	beq.n	80065e4 <_dtoa_r+0x98>
 8006618:	4ba5      	ldr	r3, [pc, #660]	; (80068b0 <_dtoa_r+0x364>)
 800661a:	e7e1      	b.n	80065e0 <_dtoa_r+0x94>
 800661c:	ab1a      	add	r3, sp, #104	; 0x68
 800661e:	9301      	str	r3, [sp, #4]
 8006620:	ab1b      	add	r3, sp, #108	; 0x6c
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	0038      	movs	r0, r7
 8006626:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006628:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800662a:	f001 f909 	bl	8007840 <__d2b>
 800662e:	006e      	lsls	r6, r5, #1
 8006630:	9005      	str	r0, [sp, #20]
 8006632:	0d76      	lsrs	r6, r6, #21
 8006634:	d100      	bne.n	8006638 <_dtoa_r+0xec>
 8006636:	e07c      	b.n	8006732 <_dtoa_r+0x1e6>
 8006638:	9812      	ldr	r0, [sp, #72]	; 0x48
 800663a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800663c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800663e:	4a9d      	ldr	r2, [pc, #628]	; (80068b4 <_dtoa_r+0x368>)
 8006640:	031b      	lsls	r3, r3, #12
 8006642:	0b1b      	lsrs	r3, r3, #12
 8006644:	431a      	orrs	r2, r3
 8006646:	0011      	movs	r1, r2
 8006648:	4b9b      	ldr	r3, [pc, #620]	; (80068b8 <_dtoa_r+0x36c>)
 800664a:	9418      	str	r4, [sp, #96]	; 0x60
 800664c:	18f6      	adds	r6, r6, r3
 800664e:	2200      	movs	r2, #0
 8006650:	4b9a      	ldr	r3, [pc, #616]	; (80068bc <_dtoa_r+0x370>)
 8006652:	f7fb f9ed 	bl	8001a30 <__aeabi_dsub>
 8006656:	4a9a      	ldr	r2, [pc, #616]	; (80068c0 <_dtoa_r+0x374>)
 8006658:	4b9a      	ldr	r3, [pc, #616]	; (80068c4 <_dtoa_r+0x378>)
 800665a:	f7fa ff7d 	bl	8001558 <__aeabi_dmul>
 800665e:	4a9a      	ldr	r2, [pc, #616]	; (80068c8 <_dtoa_r+0x37c>)
 8006660:	4b9a      	ldr	r3, [pc, #616]	; (80068cc <_dtoa_r+0x380>)
 8006662:	f7fa f83b 	bl	80006dc <__aeabi_dadd>
 8006666:	0004      	movs	r4, r0
 8006668:	0030      	movs	r0, r6
 800666a:	000d      	movs	r5, r1
 800666c:	f7fb fdc6 	bl	80021fc <__aeabi_i2d>
 8006670:	4a97      	ldr	r2, [pc, #604]	; (80068d0 <_dtoa_r+0x384>)
 8006672:	4b98      	ldr	r3, [pc, #608]	; (80068d4 <_dtoa_r+0x388>)
 8006674:	f7fa ff70 	bl	8001558 <__aeabi_dmul>
 8006678:	0002      	movs	r2, r0
 800667a:	000b      	movs	r3, r1
 800667c:	0020      	movs	r0, r4
 800667e:	0029      	movs	r1, r5
 8006680:	f7fa f82c 	bl	80006dc <__aeabi_dadd>
 8006684:	0004      	movs	r4, r0
 8006686:	000d      	movs	r5, r1
 8006688:	f7fb fd82 	bl	8002190 <__aeabi_d2iz>
 800668c:	2200      	movs	r2, #0
 800668e:	9002      	str	r0, [sp, #8]
 8006690:	2300      	movs	r3, #0
 8006692:	0020      	movs	r0, r4
 8006694:	0029      	movs	r1, r5
 8006696:	f7f9 fedf 	bl	8000458 <__aeabi_dcmplt>
 800669a:	2800      	cmp	r0, #0
 800669c:	d00b      	beq.n	80066b6 <_dtoa_r+0x16a>
 800669e:	9802      	ldr	r0, [sp, #8]
 80066a0:	f7fb fdac 	bl	80021fc <__aeabi_i2d>
 80066a4:	002b      	movs	r3, r5
 80066a6:	0022      	movs	r2, r4
 80066a8:	f7f9 fed0 	bl	800044c <__aeabi_dcmpeq>
 80066ac:	4243      	negs	r3, r0
 80066ae:	4158      	adcs	r0, r3
 80066b0:	9b02      	ldr	r3, [sp, #8]
 80066b2:	1a1b      	subs	r3, r3, r0
 80066b4:	9302      	str	r3, [sp, #8]
 80066b6:	2301      	movs	r3, #1
 80066b8:	9316      	str	r3, [sp, #88]	; 0x58
 80066ba:	9b02      	ldr	r3, [sp, #8]
 80066bc:	2b16      	cmp	r3, #22
 80066be:	d80f      	bhi.n	80066e0 <_dtoa_r+0x194>
 80066c0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80066c2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80066c4:	00da      	lsls	r2, r3, #3
 80066c6:	4b84      	ldr	r3, [pc, #528]	; (80068d8 <_dtoa_r+0x38c>)
 80066c8:	189b      	adds	r3, r3, r2
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f7f9 fec3 	bl	8000458 <__aeabi_dcmplt>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d049      	beq.n	800676a <_dtoa_r+0x21e>
 80066d6:	9b02      	ldr	r3, [sp, #8]
 80066d8:	3b01      	subs	r3, #1
 80066da:	9302      	str	r3, [sp, #8]
 80066dc:	2300      	movs	r3, #0
 80066de:	9316      	str	r3, [sp, #88]	; 0x58
 80066e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80066e2:	1b9e      	subs	r6, r3, r6
 80066e4:	2300      	movs	r3, #0
 80066e6:	930a      	str	r3, [sp, #40]	; 0x28
 80066e8:	0033      	movs	r3, r6
 80066ea:	3b01      	subs	r3, #1
 80066ec:	930d      	str	r3, [sp, #52]	; 0x34
 80066ee:	d504      	bpl.n	80066fa <_dtoa_r+0x1ae>
 80066f0:	2301      	movs	r3, #1
 80066f2:	1b9b      	subs	r3, r3, r6
 80066f4:	930a      	str	r3, [sp, #40]	; 0x28
 80066f6:	2300      	movs	r3, #0
 80066f8:	930d      	str	r3, [sp, #52]	; 0x34
 80066fa:	9b02      	ldr	r3, [sp, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	db36      	blt.n	800676e <_dtoa_r+0x222>
 8006700:	9a02      	ldr	r2, [sp, #8]
 8006702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006704:	4694      	mov	ip, r2
 8006706:	4463      	add	r3, ip
 8006708:	930d      	str	r3, [sp, #52]	; 0x34
 800670a:	2300      	movs	r3, #0
 800670c:	9215      	str	r2, [sp, #84]	; 0x54
 800670e:	930e      	str	r3, [sp, #56]	; 0x38
 8006710:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006712:	2401      	movs	r4, #1
 8006714:	2b09      	cmp	r3, #9
 8006716:	d864      	bhi.n	80067e2 <_dtoa_r+0x296>
 8006718:	2b05      	cmp	r3, #5
 800671a:	dd02      	ble.n	8006722 <_dtoa_r+0x1d6>
 800671c:	2400      	movs	r4, #0
 800671e:	3b04      	subs	r3, #4
 8006720:	9322      	str	r3, [sp, #136]	; 0x88
 8006722:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006724:	1e98      	subs	r0, r3, #2
 8006726:	2803      	cmp	r0, #3
 8006728:	d864      	bhi.n	80067f4 <_dtoa_r+0x2a8>
 800672a:	f7f9 fcf5 	bl	8000118 <__gnu_thumb1_case_uqi>
 800672e:	3829      	.short	0x3829
 8006730:	5836      	.short	0x5836
 8006732:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006734:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006736:	189e      	adds	r6, r3, r2
 8006738:	4b68      	ldr	r3, [pc, #416]	; (80068dc <_dtoa_r+0x390>)
 800673a:	18f2      	adds	r2, r6, r3
 800673c:	2a20      	cmp	r2, #32
 800673e:	dd0f      	ble.n	8006760 <_dtoa_r+0x214>
 8006740:	2340      	movs	r3, #64	; 0x40
 8006742:	1a9b      	subs	r3, r3, r2
 8006744:	409d      	lsls	r5, r3
 8006746:	4b66      	ldr	r3, [pc, #408]	; (80068e0 <_dtoa_r+0x394>)
 8006748:	9802      	ldr	r0, [sp, #8]
 800674a:	18f3      	adds	r3, r6, r3
 800674c:	40d8      	lsrs	r0, r3
 800674e:	4328      	orrs	r0, r5
 8006750:	f7fb fd84 	bl	800225c <__aeabi_ui2d>
 8006754:	2301      	movs	r3, #1
 8006756:	4c63      	ldr	r4, [pc, #396]	; (80068e4 <_dtoa_r+0x398>)
 8006758:	3e01      	subs	r6, #1
 800675a:	1909      	adds	r1, r1, r4
 800675c:	9318      	str	r3, [sp, #96]	; 0x60
 800675e:	e776      	b.n	800664e <_dtoa_r+0x102>
 8006760:	2320      	movs	r3, #32
 8006762:	9802      	ldr	r0, [sp, #8]
 8006764:	1a9b      	subs	r3, r3, r2
 8006766:	4098      	lsls	r0, r3
 8006768:	e7f2      	b.n	8006750 <_dtoa_r+0x204>
 800676a:	9016      	str	r0, [sp, #88]	; 0x58
 800676c:	e7b8      	b.n	80066e0 <_dtoa_r+0x194>
 800676e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006770:	9a02      	ldr	r2, [sp, #8]
 8006772:	1a9b      	subs	r3, r3, r2
 8006774:	930a      	str	r3, [sp, #40]	; 0x28
 8006776:	4253      	negs	r3, r2
 8006778:	930e      	str	r3, [sp, #56]	; 0x38
 800677a:	2300      	movs	r3, #0
 800677c:	9315      	str	r3, [sp, #84]	; 0x54
 800677e:	e7c7      	b.n	8006710 <_dtoa_r+0x1c4>
 8006780:	2300      	movs	r3, #0
 8006782:	930f      	str	r3, [sp, #60]	; 0x3c
 8006784:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006786:	930c      	str	r3, [sp, #48]	; 0x30
 8006788:	9307      	str	r3, [sp, #28]
 800678a:	2b00      	cmp	r3, #0
 800678c:	dc13      	bgt.n	80067b6 <_dtoa_r+0x26a>
 800678e:	2301      	movs	r3, #1
 8006790:	001a      	movs	r2, r3
 8006792:	930c      	str	r3, [sp, #48]	; 0x30
 8006794:	9307      	str	r3, [sp, #28]
 8006796:	9223      	str	r2, [sp, #140]	; 0x8c
 8006798:	e00d      	b.n	80067b6 <_dtoa_r+0x26a>
 800679a:	2301      	movs	r3, #1
 800679c:	e7f1      	b.n	8006782 <_dtoa_r+0x236>
 800679e:	2300      	movs	r3, #0
 80067a0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80067a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80067a4:	4694      	mov	ip, r2
 80067a6:	9b02      	ldr	r3, [sp, #8]
 80067a8:	4463      	add	r3, ip
 80067aa:	930c      	str	r3, [sp, #48]	; 0x30
 80067ac:	3301      	adds	r3, #1
 80067ae:	9307      	str	r3, [sp, #28]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	dc00      	bgt.n	80067b6 <_dtoa_r+0x26a>
 80067b4:	2301      	movs	r3, #1
 80067b6:	2200      	movs	r2, #0
 80067b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067ba:	6042      	str	r2, [r0, #4]
 80067bc:	3204      	adds	r2, #4
 80067be:	0015      	movs	r5, r2
 80067c0:	3514      	adds	r5, #20
 80067c2:	6841      	ldr	r1, [r0, #4]
 80067c4:	429d      	cmp	r5, r3
 80067c6:	d919      	bls.n	80067fc <_dtoa_r+0x2b0>
 80067c8:	0038      	movs	r0, r7
 80067ca:	f000 fd01 	bl	80071d0 <_Balloc>
 80067ce:	9006      	str	r0, [sp, #24]
 80067d0:	2800      	cmp	r0, #0
 80067d2:	d117      	bne.n	8006804 <_dtoa_r+0x2b8>
 80067d4:	21d5      	movs	r1, #213	; 0xd5
 80067d6:	0002      	movs	r2, r0
 80067d8:	4b43      	ldr	r3, [pc, #268]	; (80068e8 <_dtoa_r+0x39c>)
 80067da:	0049      	lsls	r1, r1, #1
 80067dc:	e6cb      	b.n	8006576 <_dtoa_r+0x2a>
 80067de:	2301      	movs	r3, #1
 80067e0:	e7de      	b.n	80067a0 <_dtoa_r+0x254>
 80067e2:	2300      	movs	r3, #0
 80067e4:	940f      	str	r4, [sp, #60]	; 0x3c
 80067e6:	9322      	str	r3, [sp, #136]	; 0x88
 80067e8:	3b01      	subs	r3, #1
 80067ea:	930c      	str	r3, [sp, #48]	; 0x30
 80067ec:	9307      	str	r3, [sp, #28]
 80067ee:	2200      	movs	r2, #0
 80067f0:	3313      	adds	r3, #19
 80067f2:	e7d0      	b.n	8006796 <_dtoa_r+0x24a>
 80067f4:	2301      	movs	r3, #1
 80067f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80067f8:	3b02      	subs	r3, #2
 80067fa:	e7f6      	b.n	80067ea <_dtoa_r+0x29e>
 80067fc:	3101      	adds	r1, #1
 80067fe:	6041      	str	r1, [r0, #4]
 8006800:	0052      	lsls	r2, r2, #1
 8006802:	e7dc      	b.n	80067be <_dtoa_r+0x272>
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	9a06      	ldr	r2, [sp, #24]
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	9b07      	ldr	r3, [sp, #28]
 800680c:	2b0e      	cmp	r3, #14
 800680e:	d900      	bls.n	8006812 <_dtoa_r+0x2c6>
 8006810:	e0eb      	b.n	80069ea <_dtoa_r+0x49e>
 8006812:	2c00      	cmp	r4, #0
 8006814:	d100      	bne.n	8006818 <_dtoa_r+0x2cc>
 8006816:	e0e8      	b.n	80069ea <_dtoa_r+0x49e>
 8006818:	9b02      	ldr	r3, [sp, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	dd68      	ble.n	80068f0 <_dtoa_r+0x3a4>
 800681e:	001a      	movs	r2, r3
 8006820:	210f      	movs	r1, #15
 8006822:	4b2d      	ldr	r3, [pc, #180]	; (80068d8 <_dtoa_r+0x38c>)
 8006824:	400a      	ands	r2, r1
 8006826:	00d2      	lsls	r2, r2, #3
 8006828:	189b      	adds	r3, r3, r2
 800682a:	681d      	ldr	r5, [r3, #0]
 800682c:	685e      	ldr	r6, [r3, #4]
 800682e:	9b02      	ldr	r3, [sp, #8]
 8006830:	111c      	asrs	r4, r3, #4
 8006832:	2302      	movs	r3, #2
 8006834:	9310      	str	r3, [sp, #64]	; 0x40
 8006836:	9b02      	ldr	r3, [sp, #8]
 8006838:	05db      	lsls	r3, r3, #23
 800683a:	d50b      	bpl.n	8006854 <_dtoa_r+0x308>
 800683c:	4b2b      	ldr	r3, [pc, #172]	; (80068ec <_dtoa_r+0x3a0>)
 800683e:	400c      	ands	r4, r1
 8006840:	6a1a      	ldr	r2, [r3, #32]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006846:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006848:	f7fa fa84 	bl	8000d54 <__aeabi_ddiv>
 800684c:	2303      	movs	r3, #3
 800684e:	9008      	str	r0, [sp, #32]
 8006850:	9109      	str	r1, [sp, #36]	; 0x24
 8006852:	9310      	str	r3, [sp, #64]	; 0x40
 8006854:	4b25      	ldr	r3, [pc, #148]	; (80068ec <_dtoa_r+0x3a0>)
 8006856:	9314      	str	r3, [sp, #80]	; 0x50
 8006858:	2c00      	cmp	r4, #0
 800685a:	d108      	bne.n	800686e <_dtoa_r+0x322>
 800685c:	9808      	ldr	r0, [sp, #32]
 800685e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006860:	002a      	movs	r2, r5
 8006862:	0033      	movs	r3, r6
 8006864:	f7fa fa76 	bl	8000d54 <__aeabi_ddiv>
 8006868:	9008      	str	r0, [sp, #32]
 800686a:	9109      	str	r1, [sp, #36]	; 0x24
 800686c:	e05c      	b.n	8006928 <_dtoa_r+0x3dc>
 800686e:	2301      	movs	r3, #1
 8006870:	421c      	tst	r4, r3
 8006872:	d00b      	beq.n	800688c <_dtoa_r+0x340>
 8006874:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006876:	0028      	movs	r0, r5
 8006878:	3301      	adds	r3, #1
 800687a:	9310      	str	r3, [sp, #64]	; 0x40
 800687c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800687e:	0031      	movs	r1, r6
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f7fa fe68 	bl	8001558 <__aeabi_dmul>
 8006888:	0005      	movs	r5, r0
 800688a:	000e      	movs	r6, r1
 800688c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800688e:	1064      	asrs	r4, r4, #1
 8006890:	3308      	adds	r3, #8
 8006892:	e7e0      	b.n	8006856 <_dtoa_r+0x30a>
 8006894:	08008969 	.word	0x08008969
 8006898:	08008980 	.word	0x08008980
 800689c:	7ff00000 	.word	0x7ff00000
 80068a0:	0000270f 	.word	0x0000270f
 80068a4:	08008965 	.word	0x08008965
 80068a8:	08008968 	.word	0x08008968
 80068ac:	08008938 	.word	0x08008938
 80068b0:	08008939 	.word	0x08008939
 80068b4:	3ff00000 	.word	0x3ff00000
 80068b8:	fffffc01 	.word	0xfffffc01
 80068bc:	3ff80000 	.word	0x3ff80000
 80068c0:	636f4361 	.word	0x636f4361
 80068c4:	3fd287a7 	.word	0x3fd287a7
 80068c8:	8b60c8b3 	.word	0x8b60c8b3
 80068cc:	3fc68a28 	.word	0x3fc68a28
 80068d0:	509f79fb 	.word	0x509f79fb
 80068d4:	3fd34413 	.word	0x3fd34413
 80068d8:	08008a70 	.word	0x08008a70
 80068dc:	00000432 	.word	0x00000432
 80068e0:	00000412 	.word	0x00000412
 80068e4:	fe100000 	.word	0xfe100000
 80068e8:	080089db 	.word	0x080089db
 80068ec:	08008a48 	.word	0x08008a48
 80068f0:	2302      	movs	r3, #2
 80068f2:	9310      	str	r3, [sp, #64]	; 0x40
 80068f4:	9b02      	ldr	r3, [sp, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d016      	beq.n	8006928 <_dtoa_r+0x3dc>
 80068fa:	9812      	ldr	r0, [sp, #72]	; 0x48
 80068fc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80068fe:	425c      	negs	r4, r3
 8006900:	230f      	movs	r3, #15
 8006902:	4ab6      	ldr	r2, [pc, #728]	; (8006bdc <_dtoa_r+0x690>)
 8006904:	4023      	ands	r3, r4
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	18d3      	adds	r3, r2, r3
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f7fa fe23 	bl	8001558 <__aeabi_dmul>
 8006912:	2601      	movs	r6, #1
 8006914:	2300      	movs	r3, #0
 8006916:	9008      	str	r0, [sp, #32]
 8006918:	9109      	str	r1, [sp, #36]	; 0x24
 800691a:	4db1      	ldr	r5, [pc, #708]	; (8006be0 <_dtoa_r+0x694>)
 800691c:	1124      	asrs	r4, r4, #4
 800691e:	2c00      	cmp	r4, #0
 8006920:	d000      	beq.n	8006924 <_dtoa_r+0x3d8>
 8006922:	e094      	b.n	8006a4e <_dtoa_r+0x502>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d19f      	bne.n	8006868 <_dtoa_r+0x31c>
 8006928:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800692a:	2b00      	cmp	r3, #0
 800692c:	d100      	bne.n	8006930 <_dtoa_r+0x3e4>
 800692e:	e09b      	b.n	8006a68 <_dtoa_r+0x51c>
 8006930:	9c08      	ldr	r4, [sp, #32]
 8006932:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006934:	2200      	movs	r2, #0
 8006936:	0020      	movs	r0, r4
 8006938:	0029      	movs	r1, r5
 800693a:	4baa      	ldr	r3, [pc, #680]	; (8006be4 <_dtoa_r+0x698>)
 800693c:	f7f9 fd8c 	bl	8000458 <__aeabi_dcmplt>
 8006940:	2800      	cmp	r0, #0
 8006942:	d100      	bne.n	8006946 <_dtoa_r+0x3fa>
 8006944:	e090      	b.n	8006a68 <_dtoa_r+0x51c>
 8006946:	9b07      	ldr	r3, [sp, #28]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d100      	bne.n	800694e <_dtoa_r+0x402>
 800694c:	e08c      	b.n	8006a68 <_dtoa_r+0x51c>
 800694e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006950:	2b00      	cmp	r3, #0
 8006952:	dd46      	ble.n	80069e2 <_dtoa_r+0x496>
 8006954:	9b02      	ldr	r3, [sp, #8]
 8006956:	2200      	movs	r2, #0
 8006958:	0020      	movs	r0, r4
 800695a:	0029      	movs	r1, r5
 800695c:	1e5e      	subs	r6, r3, #1
 800695e:	4ba2      	ldr	r3, [pc, #648]	; (8006be8 <_dtoa_r+0x69c>)
 8006960:	f7fa fdfa 	bl	8001558 <__aeabi_dmul>
 8006964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006966:	9008      	str	r0, [sp, #32]
 8006968:	9109      	str	r1, [sp, #36]	; 0x24
 800696a:	3301      	adds	r3, #1
 800696c:	9310      	str	r3, [sp, #64]	; 0x40
 800696e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006970:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006972:	9c08      	ldr	r4, [sp, #32]
 8006974:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006976:	9314      	str	r3, [sp, #80]	; 0x50
 8006978:	f7fb fc40 	bl	80021fc <__aeabi_i2d>
 800697c:	0022      	movs	r2, r4
 800697e:	002b      	movs	r3, r5
 8006980:	f7fa fdea 	bl	8001558 <__aeabi_dmul>
 8006984:	2200      	movs	r2, #0
 8006986:	4b99      	ldr	r3, [pc, #612]	; (8006bec <_dtoa_r+0x6a0>)
 8006988:	f7f9 fea8 	bl	80006dc <__aeabi_dadd>
 800698c:	9010      	str	r0, [sp, #64]	; 0x40
 800698e:	9111      	str	r1, [sp, #68]	; 0x44
 8006990:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006992:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006994:	9208      	str	r2, [sp, #32]
 8006996:	9309      	str	r3, [sp, #36]	; 0x24
 8006998:	4a95      	ldr	r2, [pc, #596]	; (8006bf0 <_dtoa_r+0x6a4>)
 800699a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800699c:	4694      	mov	ip, r2
 800699e:	4463      	add	r3, ip
 80069a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80069a2:	9309      	str	r3, [sp, #36]	; 0x24
 80069a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d161      	bne.n	8006a6e <_dtoa_r+0x522>
 80069aa:	2200      	movs	r2, #0
 80069ac:	0020      	movs	r0, r4
 80069ae:	0029      	movs	r1, r5
 80069b0:	4b90      	ldr	r3, [pc, #576]	; (8006bf4 <_dtoa_r+0x6a8>)
 80069b2:	f7fb f83d 	bl	8001a30 <__aeabi_dsub>
 80069b6:	9a08      	ldr	r2, [sp, #32]
 80069b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80069ba:	0004      	movs	r4, r0
 80069bc:	000d      	movs	r5, r1
 80069be:	f7f9 fd5f 	bl	8000480 <__aeabi_dcmpgt>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d000      	beq.n	80069c8 <_dtoa_r+0x47c>
 80069c6:	e2af      	b.n	8006f28 <_dtoa_r+0x9dc>
 80069c8:	488b      	ldr	r0, [pc, #556]	; (8006bf8 <_dtoa_r+0x6ac>)
 80069ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 80069cc:	4684      	mov	ip, r0
 80069ce:	4461      	add	r1, ip
 80069d0:	000b      	movs	r3, r1
 80069d2:	0020      	movs	r0, r4
 80069d4:	0029      	movs	r1, r5
 80069d6:	9a08      	ldr	r2, [sp, #32]
 80069d8:	f7f9 fd3e 	bl	8000458 <__aeabi_dcmplt>
 80069dc:	2800      	cmp	r0, #0
 80069de:	d000      	beq.n	80069e2 <_dtoa_r+0x496>
 80069e0:	e29f      	b.n	8006f22 <_dtoa_r+0x9d6>
 80069e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80069e6:	9308      	str	r3, [sp, #32]
 80069e8:	9409      	str	r4, [sp, #36]	; 0x24
 80069ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	da00      	bge.n	80069f2 <_dtoa_r+0x4a6>
 80069f0:	e172      	b.n	8006cd8 <_dtoa_r+0x78c>
 80069f2:	9a02      	ldr	r2, [sp, #8]
 80069f4:	2a0e      	cmp	r2, #14
 80069f6:	dd00      	ble.n	80069fa <_dtoa_r+0x4ae>
 80069f8:	e16e      	b.n	8006cd8 <_dtoa_r+0x78c>
 80069fa:	4b78      	ldr	r3, [pc, #480]	; (8006bdc <_dtoa_r+0x690>)
 80069fc:	00d2      	lsls	r2, r2, #3
 80069fe:	189b      	adds	r3, r3, r2
 8006a00:	685c      	ldr	r4, [r3, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	930a      	str	r3, [sp, #40]	; 0x28
 8006a06:	940b      	str	r4, [sp, #44]	; 0x2c
 8006a08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	db00      	blt.n	8006a10 <_dtoa_r+0x4c4>
 8006a0e:	e0f7      	b.n	8006c00 <_dtoa_r+0x6b4>
 8006a10:	9b07      	ldr	r3, [sp, #28]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	dd00      	ble.n	8006a18 <_dtoa_r+0x4cc>
 8006a16:	e0f3      	b.n	8006c00 <_dtoa_r+0x6b4>
 8006a18:	d000      	beq.n	8006a1c <_dtoa_r+0x4d0>
 8006a1a:	e282      	b.n	8006f22 <_dtoa_r+0x9d6>
 8006a1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006a1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a20:	2200      	movs	r2, #0
 8006a22:	4b74      	ldr	r3, [pc, #464]	; (8006bf4 <_dtoa_r+0x6a8>)
 8006a24:	f7fa fd98 	bl	8001558 <__aeabi_dmul>
 8006a28:	9a08      	ldr	r2, [sp, #32]
 8006a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2c:	f7f9 fd32 	bl	8000494 <__aeabi_dcmpge>
 8006a30:	9e07      	ldr	r6, [sp, #28]
 8006a32:	0035      	movs	r5, r6
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d000      	beq.n	8006a3a <_dtoa_r+0x4ee>
 8006a38:	e259      	b.n	8006eee <_dtoa_r+0x9a2>
 8006a3a:	9b06      	ldr	r3, [sp, #24]
 8006a3c:	9a06      	ldr	r2, [sp, #24]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	9308      	str	r3, [sp, #32]
 8006a42:	2331      	movs	r3, #49	; 0x31
 8006a44:	7013      	strb	r3, [r2, #0]
 8006a46:	9b02      	ldr	r3, [sp, #8]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	9302      	str	r3, [sp, #8]
 8006a4c:	e254      	b.n	8006ef8 <_dtoa_r+0x9ac>
 8006a4e:	4234      	tst	r4, r6
 8006a50:	d007      	beq.n	8006a62 <_dtoa_r+0x516>
 8006a52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a54:	3301      	adds	r3, #1
 8006a56:	9310      	str	r3, [sp, #64]	; 0x40
 8006a58:	682a      	ldr	r2, [r5, #0]
 8006a5a:	686b      	ldr	r3, [r5, #4]
 8006a5c:	f7fa fd7c 	bl	8001558 <__aeabi_dmul>
 8006a60:	0033      	movs	r3, r6
 8006a62:	1064      	asrs	r4, r4, #1
 8006a64:	3508      	adds	r5, #8
 8006a66:	e75a      	b.n	800691e <_dtoa_r+0x3d2>
 8006a68:	9e02      	ldr	r6, [sp, #8]
 8006a6a:	9b07      	ldr	r3, [sp, #28]
 8006a6c:	e780      	b.n	8006970 <_dtoa_r+0x424>
 8006a6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006a72:	1e5a      	subs	r2, r3, #1
 8006a74:	4b59      	ldr	r3, [pc, #356]	; (8006bdc <_dtoa_r+0x690>)
 8006a76:	00d2      	lsls	r2, r2, #3
 8006a78:	189b      	adds	r3, r3, r2
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2900      	cmp	r1, #0
 8006a80:	d051      	beq.n	8006b26 <_dtoa_r+0x5da>
 8006a82:	2000      	movs	r0, #0
 8006a84:	495d      	ldr	r1, [pc, #372]	; (8006bfc <_dtoa_r+0x6b0>)
 8006a86:	f7fa f965 	bl	8000d54 <__aeabi_ddiv>
 8006a8a:	9a08      	ldr	r2, [sp, #32]
 8006a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a8e:	f7fa ffcf 	bl	8001a30 <__aeabi_dsub>
 8006a92:	9a06      	ldr	r2, [sp, #24]
 8006a94:	9b06      	ldr	r3, [sp, #24]
 8006a96:	4694      	mov	ip, r2
 8006a98:	9317      	str	r3, [sp, #92]	; 0x5c
 8006a9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a9c:	9010      	str	r0, [sp, #64]	; 0x40
 8006a9e:	9111      	str	r1, [sp, #68]	; 0x44
 8006aa0:	4463      	add	r3, ip
 8006aa2:	9319      	str	r3, [sp, #100]	; 0x64
 8006aa4:	0029      	movs	r1, r5
 8006aa6:	0020      	movs	r0, r4
 8006aa8:	f7fb fb72 	bl	8002190 <__aeabi_d2iz>
 8006aac:	9014      	str	r0, [sp, #80]	; 0x50
 8006aae:	f7fb fba5 	bl	80021fc <__aeabi_i2d>
 8006ab2:	0002      	movs	r2, r0
 8006ab4:	000b      	movs	r3, r1
 8006ab6:	0020      	movs	r0, r4
 8006ab8:	0029      	movs	r1, r5
 8006aba:	f7fa ffb9 	bl	8001a30 <__aeabi_dsub>
 8006abe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ac0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	9308      	str	r3, [sp, #32]
 8006ac6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ac8:	0004      	movs	r4, r0
 8006aca:	3330      	adds	r3, #48	; 0x30
 8006acc:	7013      	strb	r3, [r2, #0]
 8006ace:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ad0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ad2:	000d      	movs	r5, r1
 8006ad4:	f7f9 fcc0 	bl	8000458 <__aeabi_dcmplt>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d175      	bne.n	8006bc8 <_dtoa_r+0x67c>
 8006adc:	0022      	movs	r2, r4
 8006ade:	002b      	movs	r3, r5
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	4940      	ldr	r1, [pc, #256]	; (8006be4 <_dtoa_r+0x698>)
 8006ae4:	f7fa ffa4 	bl	8001a30 <__aeabi_dsub>
 8006ae8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006aea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006aec:	f7f9 fcb4 	bl	8000458 <__aeabi_dcmplt>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d000      	beq.n	8006af6 <_dtoa_r+0x5aa>
 8006af4:	e0d2      	b.n	8006c9c <_dtoa_r+0x750>
 8006af6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006af8:	9a08      	ldr	r2, [sp, #32]
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d100      	bne.n	8006b00 <_dtoa_r+0x5b4>
 8006afe:	e770      	b.n	80069e2 <_dtoa_r+0x496>
 8006b00:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006b02:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006b04:	2200      	movs	r2, #0
 8006b06:	4b38      	ldr	r3, [pc, #224]	; (8006be8 <_dtoa_r+0x69c>)
 8006b08:	f7fa fd26 	bl	8001558 <__aeabi_dmul>
 8006b0c:	4b36      	ldr	r3, [pc, #216]	; (8006be8 <_dtoa_r+0x69c>)
 8006b0e:	9010      	str	r0, [sp, #64]	; 0x40
 8006b10:	9111      	str	r1, [sp, #68]	; 0x44
 8006b12:	2200      	movs	r2, #0
 8006b14:	0020      	movs	r0, r4
 8006b16:	0029      	movs	r1, r5
 8006b18:	f7fa fd1e 	bl	8001558 <__aeabi_dmul>
 8006b1c:	9b08      	ldr	r3, [sp, #32]
 8006b1e:	0004      	movs	r4, r0
 8006b20:	000d      	movs	r5, r1
 8006b22:	9317      	str	r3, [sp, #92]	; 0x5c
 8006b24:	e7be      	b.n	8006aa4 <_dtoa_r+0x558>
 8006b26:	9808      	ldr	r0, [sp, #32]
 8006b28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b2a:	f7fa fd15 	bl	8001558 <__aeabi_dmul>
 8006b2e:	9a06      	ldr	r2, [sp, #24]
 8006b30:	9b06      	ldr	r3, [sp, #24]
 8006b32:	4694      	mov	ip, r2
 8006b34:	9308      	str	r3, [sp, #32]
 8006b36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b38:	9010      	str	r0, [sp, #64]	; 0x40
 8006b3a:	9111      	str	r1, [sp, #68]	; 0x44
 8006b3c:	4463      	add	r3, ip
 8006b3e:	9319      	str	r3, [sp, #100]	; 0x64
 8006b40:	0029      	movs	r1, r5
 8006b42:	0020      	movs	r0, r4
 8006b44:	f7fb fb24 	bl	8002190 <__aeabi_d2iz>
 8006b48:	9017      	str	r0, [sp, #92]	; 0x5c
 8006b4a:	f7fb fb57 	bl	80021fc <__aeabi_i2d>
 8006b4e:	0002      	movs	r2, r0
 8006b50:	000b      	movs	r3, r1
 8006b52:	0020      	movs	r0, r4
 8006b54:	0029      	movs	r1, r5
 8006b56:	f7fa ff6b 	bl	8001a30 <__aeabi_dsub>
 8006b5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b5c:	9a08      	ldr	r2, [sp, #32]
 8006b5e:	3330      	adds	r3, #48	; 0x30
 8006b60:	7013      	strb	r3, [r2, #0]
 8006b62:	0013      	movs	r3, r2
 8006b64:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b66:	3301      	adds	r3, #1
 8006b68:	0004      	movs	r4, r0
 8006b6a:	000d      	movs	r5, r1
 8006b6c:	9308      	str	r3, [sp, #32]
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d12c      	bne.n	8006bcc <_dtoa_r+0x680>
 8006b72:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006b74:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006b76:	9a06      	ldr	r2, [sp, #24]
 8006b78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b7a:	4694      	mov	ip, r2
 8006b7c:	4463      	add	r3, ip
 8006b7e:	2200      	movs	r2, #0
 8006b80:	9308      	str	r3, [sp, #32]
 8006b82:	4b1e      	ldr	r3, [pc, #120]	; (8006bfc <_dtoa_r+0x6b0>)
 8006b84:	f7f9 fdaa 	bl	80006dc <__aeabi_dadd>
 8006b88:	0002      	movs	r2, r0
 8006b8a:	000b      	movs	r3, r1
 8006b8c:	0020      	movs	r0, r4
 8006b8e:	0029      	movs	r1, r5
 8006b90:	f7f9 fc76 	bl	8000480 <__aeabi_dcmpgt>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d000      	beq.n	8006b9a <_dtoa_r+0x64e>
 8006b98:	e080      	b.n	8006c9c <_dtoa_r+0x750>
 8006b9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	4916      	ldr	r1, [pc, #88]	; (8006bfc <_dtoa_r+0x6b0>)
 8006ba2:	f7fa ff45 	bl	8001a30 <__aeabi_dsub>
 8006ba6:	0002      	movs	r2, r0
 8006ba8:	000b      	movs	r3, r1
 8006baa:	0020      	movs	r0, r4
 8006bac:	0029      	movs	r1, r5
 8006bae:	f7f9 fc53 	bl	8000458 <__aeabi_dcmplt>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d100      	bne.n	8006bb8 <_dtoa_r+0x66c>
 8006bb6:	e714      	b.n	80069e2 <_dtoa_r+0x496>
 8006bb8:	9b08      	ldr	r3, [sp, #32]
 8006bba:	001a      	movs	r2, r3
 8006bbc:	3a01      	subs	r2, #1
 8006bbe:	9208      	str	r2, [sp, #32]
 8006bc0:	7812      	ldrb	r2, [r2, #0]
 8006bc2:	2a30      	cmp	r2, #48	; 0x30
 8006bc4:	d0f8      	beq.n	8006bb8 <_dtoa_r+0x66c>
 8006bc6:	9308      	str	r3, [sp, #32]
 8006bc8:	9602      	str	r6, [sp, #8]
 8006bca:	e055      	b.n	8006c78 <_dtoa_r+0x72c>
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <_dtoa_r+0x69c>)
 8006bd0:	f7fa fcc2 	bl	8001558 <__aeabi_dmul>
 8006bd4:	0004      	movs	r4, r0
 8006bd6:	000d      	movs	r5, r1
 8006bd8:	e7b2      	b.n	8006b40 <_dtoa_r+0x5f4>
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	08008a70 	.word	0x08008a70
 8006be0:	08008a48 	.word	0x08008a48
 8006be4:	3ff00000 	.word	0x3ff00000
 8006be8:	40240000 	.word	0x40240000
 8006bec:	401c0000 	.word	0x401c0000
 8006bf0:	fcc00000 	.word	0xfcc00000
 8006bf4:	40140000 	.word	0x40140000
 8006bf8:	7cc00000 	.word	0x7cc00000
 8006bfc:	3fe00000 	.word	0x3fe00000
 8006c00:	9b07      	ldr	r3, [sp, #28]
 8006c02:	9e06      	ldr	r6, [sp, #24]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	199b      	adds	r3, r3, r6
 8006c08:	930c      	str	r3, [sp, #48]	; 0x30
 8006c0a:	9c08      	ldr	r4, [sp, #32]
 8006c0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006c0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c12:	0020      	movs	r0, r4
 8006c14:	0029      	movs	r1, r5
 8006c16:	f7fa f89d 	bl	8000d54 <__aeabi_ddiv>
 8006c1a:	f7fb fab9 	bl	8002190 <__aeabi_d2iz>
 8006c1e:	9007      	str	r0, [sp, #28]
 8006c20:	f7fb faec 	bl	80021fc <__aeabi_i2d>
 8006c24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c28:	f7fa fc96 	bl	8001558 <__aeabi_dmul>
 8006c2c:	0002      	movs	r2, r0
 8006c2e:	000b      	movs	r3, r1
 8006c30:	0020      	movs	r0, r4
 8006c32:	0029      	movs	r1, r5
 8006c34:	f7fa fefc 	bl	8001a30 <__aeabi_dsub>
 8006c38:	0033      	movs	r3, r6
 8006c3a:	9a07      	ldr	r2, [sp, #28]
 8006c3c:	3601      	adds	r6, #1
 8006c3e:	3230      	adds	r2, #48	; 0x30
 8006c40:	701a      	strb	r2, [r3, #0]
 8006c42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c44:	9608      	str	r6, [sp, #32]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d139      	bne.n	8006cbe <_dtoa_r+0x772>
 8006c4a:	0002      	movs	r2, r0
 8006c4c:	000b      	movs	r3, r1
 8006c4e:	f7f9 fd45 	bl	80006dc <__aeabi_dadd>
 8006c52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c56:	0004      	movs	r4, r0
 8006c58:	000d      	movs	r5, r1
 8006c5a:	f7f9 fc11 	bl	8000480 <__aeabi_dcmpgt>
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d11b      	bne.n	8006c9a <_dtoa_r+0x74e>
 8006c62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c66:	0020      	movs	r0, r4
 8006c68:	0029      	movs	r1, r5
 8006c6a:	f7f9 fbef 	bl	800044c <__aeabi_dcmpeq>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d002      	beq.n	8006c78 <_dtoa_r+0x72c>
 8006c72:	9b07      	ldr	r3, [sp, #28]
 8006c74:	07db      	lsls	r3, r3, #31
 8006c76:	d410      	bmi.n	8006c9a <_dtoa_r+0x74e>
 8006c78:	0038      	movs	r0, r7
 8006c7a:	9905      	ldr	r1, [sp, #20]
 8006c7c:	f000 faec 	bl	8007258 <_Bfree>
 8006c80:	2300      	movs	r3, #0
 8006c82:	9a08      	ldr	r2, [sp, #32]
 8006c84:	9802      	ldr	r0, [sp, #8]
 8006c86:	7013      	strb	r3, [r2, #0]
 8006c88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	6018      	str	r0, [r3, #0]
 8006c8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d100      	bne.n	8006c96 <_dtoa_r+0x74a>
 8006c94:	e4a6      	b.n	80065e4 <_dtoa_r+0x98>
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	e4a4      	b.n	80065e4 <_dtoa_r+0x98>
 8006c9a:	9e02      	ldr	r6, [sp, #8]
 8006c9c:	9b08      	ldr	r3, [sp, #32]
 8006c9e:	9308      	str	r3, [sp, #32]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	781a      	ldrb	r2, [r3, #0]
 8006ca4:	2a39      	cmp	r2, #57	; 0x39
 8006ca6:	d106      	bne.n	8006cb6 <_dtoa_r+0x76a>
 8006ca8:	9a06      	ldr	r2, [sp, #24]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d1f7      	bne.n	8006c9e <_dtoa_r+0x752>
 8006cae:	2230      	movs	r2, #48	; 0x30
 8006cb0:	9906      	ldr	r1, [sp, #24]
 8006cb2:	3601      	adds	r6, #1
 8006cb4:	700a      	strb	r2, [r1, #0]
 8006cb6:	781a      	ldrb	r2, [r3, #0]
 8006cb8:	3201      	adds	r2, #1
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	e784      	b.n	8006bc8 <_dtoa_r+0x67c>
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	4baa      	ldr	r3, [pc, #680]	; (8006f6c <_dtoa_r+0xa20>)
 8006cc2:	f7fa fc49 	bl	8001558 <__aeabi_dmul>
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2300      	movs	r3, #0
 8006cca:	0004      	movs	r4, r0
 8006ccc:	000d      	movs	r5, r1
 8006cce:	f7f9 fbbd 	bl	800044c <__aeabi_dcmpeq>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d09b      	beq.n	8006c0e <_dtoa_r+0x6c2>
 8006cd6:	e7cf      	b.n	8006c78 <_dtoa_r+0x72c>
 8006cd8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006cda:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006cdc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006cde:	2d00      	cmp	r5, #0
 8006ce0:	d012      	beq.n	8006d08 <_dtoa_r+0x7bc>
 8006ce2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006ce4:	2a01      	cmp	r2, #1
 8006ce6:	dc66      	bgt.n	8006db6 <_dtoa_r+0x86a>
 8006ce8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006cea:	2a00      	cmp	r2, #0
 8006cec:	d05d      	beq.n	8006daa <_dtoa_r+0x85e>
 8006cee:	4aa0      	ldr	r2, [pc, #640]	; (8006f70 <_dtoa_r+0xa24>)
 8006cf0:	189b      	adds	r3, r3, r2
 8006cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	18d2      	adds	r2, r2, r3
 8006cf8:	920a      	str	r2, [sp, #40]	; 0x28
 8006cfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006cfc:	0038      	movs	r0, r7
 8006cfe:	18d3      	adds	r3, r2, r3
 8006d00:	930d      	str	r3, [sp, #52]	; 0x34
 8006d02:	f000 fb59 	bl	80073b8 <__i2b>
 8006d06:	0005      	movs	r5, r0
 8006d08:	2c00      	cmp	r4, #0
 8006d0a:	dd0e      	ble.n	8006d2a <_dtoa_r+0x7de>
 8006d0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	dd0b      	ble.n	8006d2a <_dtoa_r+0x7de>
 8006d12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d14:	0023      	movs	r3, r4
 8006d16:	4294      	cmp	r4, r2
 8006d18:	dd00      	ble.n	8006d1c <_dtoa_r+0x7d0>
 8006d1a:	0013      	movs	r3, r2
 8006d1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d1e:	1ae4      	subs	r4, r4, r3
 8006d20:	1ad2      	subs	r2, r2, r3
 8006d22:	920a      	str	r2, [sp, #40]	; 0x28
 8006d24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	930d      	str	r3, [sp, #52]	; 0x34
 8006d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01f      	beq.n	8006d70 <_dtoa_r+0x824>
 8006d30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d054      	beq.n	8006de0 <_dtoa_r+0x894>
 8006d36:	2e00      	cmp	r6, #0
 8006d38:	dd11      	ble.n	8006d5e <_dtoa_r+0x812>
 8006d3a:	0029      	movs	r1, r5
 8006d3c:	0032      	movs	r2, r6
 8006d3e:	0038      	movs	r0, r7
 8006d40:	f000 fc00 	bl	8007544 <__pow5mult>
 8006d44:	9a05      	ldr	r2, [sp, #20]
 8006d46:	0001      	movs	r1, r0
 8006d48:	0005      	movs	r5, r0
 8006d4a:	0038      	movs	r0, r7
 8006d4c:	f000 fb4a 	bl	80073e4 <__multiply>
 8006d50:	9905      	ldr	r1, [sp, #20]
 8006d52:	9014      	str	r0, [sp, #80]	; 0x50
 8006d54:	0038      	movs	r0, r7
 8006d56:	f000 fa7f 	bl	8007258 <_Bfree>
 8006d5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d5c:	9305      	str	r3, [sp, #20]
 8006d5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d60:	1b9a      	subs	r2, r3, r6
 8006d62:	42b3      	cmp	r3, r6
 8006d64:	d004      	beq.n	8006d70 <_dtoa_r+0x824>
 8006d66:	0038      	movs	r0, r7
 8006d68:	9905      	ldr	r1, [sp, #20]
 8006d6a:	f000 fbeb 	bl	8007544 <__pow5mult>
 8006d6e:	9005      	str	r0, [sp, #20]
 8006d70:	2101      	movs	r1, #1
 8006d72:	0038      	movs	r0, r7
 8006d74:	f000 fb20 	bl	80073b8 <__i2b>
 8006d78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d7a:	0006      	movs	r6, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	dd31      	ble.n	8006de4 <_dtoa_r+0x898>
 8006d80:	001a      	movs	r2, r3
 8006d82:	0001      	movs	r1, r0
 8006d84:	0038      	movs	r0, r7
 8006d86:	f000 fbdd 	bl	8007544 <__pow5mult>
 8006d8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d8c:	0006      	movs	r6, r0
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	dd2d      	ble.n	8006dee <_dtoa_r+0x8a2>
 8006d92:	2300      	movs	r3, #0
 8006d94:	930e      	str	r3, [sp, #56]	; 0x38
 8006d96:	6933      	ldr	r3, [r6, #16]
 8006d98:	3303      	adds	r3, #3
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	18f3      	adds	r3, r6, r3
 8006d9e:	6858      	ldr	r0, [r3, #4]
 8006da0:	f000 fac2 	bl	8007328 <__hi0bits>
 8006da4:	2320      	movs	r3, #32
 8006da6:	1a18      	subs	r0, r3, r0
 8006da8:	e039      	b.n	8006e1e <_dtoa_r+0x8d2>
 8006daa:	2336      	movs	r3, #54	; 0x36
 8006dac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006dae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006db0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006db2:	1a9b      	subs	r3, r3, r2
 8006db4:	e79d      	b.n	8006cf2 <_dtoa_r+0x7a6>
 8006db6:	9b07      	ldr	r3, [sp, #28]
 8006db8:	1e5e      	subs	r6, r3, #1
 8006dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dbc:	42b3      	cmp	r3, r6
 8006dbe:	db07      	blt.n	8006dd0 <_dtoa_r+0x884>
 8006dc0:	1b9e      	subs	r6, r3, r6
 8006dc2:	9b07      	ldr	r3, [sp, #28]
 8006dc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	da93      	bge.n	8006cf2 <_dtoa_r+0x7a6>
 8006dca:	1ae4      	subs	r4, r4, r3
 8006dcc:	2300      	movs	r3, #0
 8006dce:	e790      	b.n	8006cf2 <_dtoa_r+0x7a6>
 8006dd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dd2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006dd4:	1af3      	subs	r3, r6, r3
 8006dd6:	18d3      	adds	r3, r2, r3
 8006dd8:	960e      	str	r6, [sp, #56]	; 0x38
 8006dda:	9315      	str	r3, [sp, #84]	; 0x54
 8006ddc:	2600      	movs	r6, #0
 8006dde:	e7f0      	b.n	8006dc2 <_dtoa_r+0x876>
 8006de0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006de2:	e7c0      	b.n	8006d66 <_dtoa_r+0x81a>
 8006de4:	2300      	movs	r3, #0
 8006de6:	930e      	str	r3, [sp, #56]	; 0x38
 8006de8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	dc13      	bgt.n	8006e16 <_dtoa_r+0x8ca>
 8006dee:	2300      	movs	r3, #0
 8006df0:	930e      	str	r3, [sp, #56]	; 0x38
 8006df2:	9b08      	ldr	r3, [sp, #32]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10e      	bne.n	8006e16 <_dtoa_r+0x8ca>
 8006df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dfa:	031b      	lsls	r3, r3, #12
 8006dfc:	d10b      	bne.n	8006e16 <_dtoa_r+0x8ca>
 8006dfe:	4b5d      	ldr	r3, [pc, #372]	; (8006f74 <_dtoa_r+0xa28>)
 8006e00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e02:	4213      	tst	r3, r2
 8006e04:	d007      	beq.n	8006e16 <_dtoa_r+0x8ca>
 8006e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e08:	3301      	adds	r3, #1
 8006e0a:	930a      	str	r3, [sp, #40]	; 0x28
 8006e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e0e:	3301      	adds	r3, #1
 8006e10:	930d      	str	r3, [sp, #52]	; 0x34
 8006e12:	2301      	movs	r3, #1
 8006e14:	930e      	str	r3, [sp, #56]	; 0x38
 8006e16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e18:	2001      	movs	r0, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1bb      	bne.n	8006d96 <_dtoa_r+0x84a>
 8006e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e20:	221f      	movs	r2, #31
 8006e22:	1818      	adds	r0, r3, r0
 8006e24:	0003      	movs	r3, r0
 8006e26:	4013      	ands	r3, r2
 8006e28:	4210      	tst	r0, r2
 8006e2a:	d046      	beq.n	8006eba <_dtoa_r+0x96e>
 8006e2c:	3201      	adds	r2, #1
 8006e2e:	1ad2      	subs	r2, r2, r3
 8006e30:	2a04      	cmp	r2, #4
 8006e32:	dd3f      	ble.n	8006eb4 <_dtoa_r+0x968>
 8006e34:	221c      	movs	r2, #28
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e3a:	18e4      	adds	r4, r4, r3
 8006e3c:	18d2      	adds	r2, r2, r3
 8006e3e:	920a      	str	r2, [sp, #40]	; 0x28
 8006e40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e42:	18d3      	adds	r3, r2, r3
 8006e44:	930d      	str	r3, [sp, #52]	; 0x34
 8006e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	dd05      	ble.n	8006e58 <_dtoa_r+0x90c>
 8006e4c:	001a      	movs	r2, r3
 8006e4e:	0038      	movs	r0, r7
 8006e50:	9905      	ldr	r1, [sp, #20]
 8006e52:	f000 fbd3 	bl	80075fc <__lshift>
 8006e56:	9005      	str	r0, [sp, #20]
 8006e58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	dd05      	ble.n	8006e6a <_dtoa_r+0x91e>
 8006e5e:	0031      	movs	r1, r6
 8006e60:	001a      	movs	r2, r3
 8006e62:	0038      	movs	r0, r7
 8006e64:	f000 fbca 	bl	80075fc <__lshift>
 8006e68:	0006      	movs	r6, r0
 8006e6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d026      	beq.n	8006ebe <_dtoa_r+0x972>
 8006e70:	0031      	movs	r1, r6
 8006e72:	9805      	ldr	r0, [sp, #20]
 8006e74:	f000 fc30 	bl	80076d8 <__mcmp>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	da20      	bge.n	8006ebe <_dtoa_r+0x972>
 8006e7c:	9b02      	ldr	r3, [sp, #8]
 8006e7e:	220a      	movs	r2, #10
 8006e80:	3b01      	subs	r3, #1
 8006e82:	9302      	str	r3, [sp, #8]
 8006e84:	0038      	movs	r0, r7
 8006e86:	2300      	movs	r3, #0
 8006e88:	9905      	ldr	r1, [sp, #20]
 8006e8a:	f000 fa09 	bl	80072a0 <__multadd>
 8006e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e90:	9005      	str	r0, [sp, #20]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d100      	bne.n	8006e98 <_dtoa_r+0x94c>
 8006e96:	e166      	b.n	8007166 <_dtoa_r+0xc1a>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	0029      	movs	r1, r5
 8006e9c:	220a      	movs	r2, #10
 8006e9e:	0038      	movs	r0, r7
 8006ea0:	f000 f9fe 	bl	80072a0 <__multadd>
 8006ea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ea6:	0005      	movs	r5, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	dc47      	bgt.n	8006f3c <_dtoa_r+0x9f0>
 8006eac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	dc0d      	bgt.n	8006ece <_dtoa_r+0x982>
 8006eb2:	e043      	b.n	8006f3c <_dtoa_r+0x9f0>
 8006eb4:	2a04      	cmp	r2, #4
 8006eb6:	d0c6      	beq.n	8006e46 <_dtoa_r+0x8fa>
 8006eb8:	0013      	movs	r3, r2
 8006eba:	331c      	adds	r3, #28
 8006ebc:	e7bc      	b.n	8006e38 <_dtoa_r+0x8ec>
 8006ebe:	9b07      	ldr	r3, [sp, #28]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	dc35      	bgt.n	8006f30 <_dtoa_r+0x9e4>
 8006ec4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	dd32      	ble.n	8006f30 <_dtoa_r+0x9e4>
 8006eca:	9b07      	ldr	r3, [sp, #28]
 8006ecc:	930c      	str	r3, [sp, #48]	; 0x30
 8006ece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10c      	bne.n	8006eee <_dtoa_r+0x9a2>
 8006ed4:	0031      	movs	r1, r6
 8006ed6:	2205      	movs	r2, #5
 8006ed8:	0038      	movs	r0, r7
 8006eda:	f000 f9e1 	bl	80072a0 <__multadd>
 8006ede:	0006      	movs	r6, r0
 8006ee0:	0001      	movs	r1, r0
 8006ee2:	9805      	ldr	r0, [sp, #20]
 8006ee4:	f000 fbf8 	bl	80076d8 <__mcmp>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	dd00      	ble.n	8006eee <_dtoa_r+0x9a2>
 8006eec:	e5a5      	b.n	8006a3a <_dtoa_r+0x4ee>
 8006eee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ef0:	43db      	mvns	r3, r3
 8006ef2:	9302      	str	r3, [sp, #8]
 8006ef4:	9b06      	ldr	r3, [sp, #24]
 8006ef6:	9308      	str	r3, [sp, #32]
 8006ef8:	2400      	movs	r4, #0
 8006efa:	0031      	movs	r1, r6
 8006efc:	0038      	movs	r0, r7
 8006efe:	f000 f9ab 	bl	8007258 <_Bfree>
 8006f02:	2d00      	cmp	r5, #0
 8006f04:	d100      	bne.n	8006f08 <_dtoa_r+0x9bc>
 8006f06:	e6b7      	b.n	8006c78 <_dtoa_r+0x72c>
 8006f08:	2c00      	cmp	r4, #0
 8006f0a:	d005      	beq.n	8006f18 <_dtoa_r+0x9cc>
 8006f0c:	42ac      	cmp	r4, r5
 8006f0e:	d003      	beq.n	8006f18 <_dtoa_r+0x9cc>
 8006f10:	0021      	movs	r1, r4
 8006f12:	0038      	movs	r0, r7
 8006f14:	f000 f9a0 	bl	8007258 <_Bfree>
 8006f18:	0029      	movs	r1, r5
 8006f1a:	0038      	movs	r0, r7
 8006f1c:	f000 f99c 	bl	8007258 <_Bfree>
 8006f20:	e6aa      	b.n	8006c78 <_dtoa_r+0x72c>
 8006f22:	2600      	movs	r6, #0
 8006f24:	0035      	movs	r5, r6
 8006f26:	e7e2      	b.n	8006eee <_dtoa_r+0x9a2>
 8006f28:	9602      	str	r6, [sp, #8]
 8006f2a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006f2c:	0035      	movs	r5, r6
 8006f2e:	e584      	b.n	8006a3a <_dtoa_r+0x4ee>
 8006f30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d100      	bne.n	8006f38 <_dtoa_r+0x9ec>
 8006f36:	e0ce      	b.n	80070d6 <_dtoa_r+0xb8a>
 8006f38:	9b07      	ldr	r3, [sp, #28]
 8006f3a:	930c      	str	r3, [sp, #48]	; 0x30
 8006f3c:	2c00      	cmp	r4, #0
 8006f3e:	dd05      	ble.n	8006f4c <_dtoa_r+0xa00>
 8006f40:	0029      	movs	r1, r5
 8006f42:	0022      	movs	r2, r4
 8006f44:	0038      	movs	r0, r7
 8006f46:	f000 fb59 	bl	80075fc <__lshift>
 8006f4a:	0005      	movs	r5, r0
 8006f4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f4e:	0028      	movs	r0, r5
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d022      	beq.n	8006f9a <_dtoa_r+0xa4e>
 8006f54:	0038      	movs	r0, r7
 8006f56:	6869      	ldr	r1, [r5, #4]
 8006f58:	f000 f93a 	bl	80071d0 <_Balloc>
 8006f5c:	1e04      	subs	r4, r0, #0
 8006f5e:	d10f      	bne.n	8006f80 <_dtoa_r+0xa34>
 8006f60:	0002      	movs	r2, r0
 8006f62:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <_dtoa_r+0xa2c>)
 8006f64:	4905      	ldr	r1, [pc, #20]	; (8006f7c <_dtoa_r+0xa30>)
 8006f66:	f7ff fb06 	bl	8006576 <_dtoa_r+0x2a>
 8006f6a:	46c0      	nop			; (mov r8, r8)
 8006f6c:	40240000 	.word	0x40240000
 8006f70:	00000433 	.word	0x00000433
 8006f74:	7ff00000 	.word	0x7ff00000
 8006f78:	080089db 	.word	0x080089db
 8006f7c:	000002ea 	.word	0x000002ea
 8006f80:	0029      	movs	r1, r5
 8006f82:	692b      	ldr	r3, [r5, #16]
 8006f84:	310c      	adds	r1, #12
 8006f86:	1c9a      	adds	r2, r3, #2
 8006f88:	0092      	lsls	r2, r2, #2
 8006f8a:	300c      	adds	r0, #12
 8006f8c:	f000 f907 	bl	800719e <memcpy>
 8006f90:	2201      	movs	r2, #1
 8006f92:	0021      	movs	r1, r4
 8006f94:	0038      	movs	r0, r7
 8006f96:	f000 fb31 	bl	80075fc <__lshift>
 8006f9a:	9b06      	ldr	r3, [sp, #24]
 8006f9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f9e:	930a      	str	r3, [sp, #40]	; 0x28
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	189b      	adds	r3, r3, r2
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	002c      	movs	r4, r5
 8006fa8:	0005      	movs	r5, r0
 8006faa:	9314      	str	r3, [sp, #80]	; 0x50
 8006fac:	9b08      	ldr	r3, [sp, #32]
 8006fae:	4013      	ands	r3, r2
 8006fb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fb2:	0031      	movs	r1, r6
 8006fb4:	9805      	ldr	r0, [sp, #20]
 8006fb6:	f7ff fa3d 	bl	8006434 <quorem>
 8006fba:	0003      	movs	r3, r0
 8006fbc:	0021      	movs	r1, r4
 8006fbe:	3330      	adds	r3, #48	; 0x30
 8006fc0:	900d      	str	r0, [sp, #52]	; 0x34
 8006fc2:	9805      	ldr	r0, [sp, #20]
 8006fc4:	9307      	str	r3, [sp, #28]
 8006fc6:	f000 fb87 	bl	80076d8 <__mcmp>
 8006fca:	002a      	movs	r2, r5
 8006fcc:	900e      	str	r0, [sp, #56]	; 0x38
 8006fce:	0031      	movs	r1, r6
 8006fd0:	0038      	movs	r0, r7
 8006fd2:	f000 fb9d 	bl	8007710 <__mdiff>
 8006fd6:	68c3      	ldr	r3, [r0, #12]
 8006fd8:	9008      	str	r0, [sp, #32]
 8006fda:	9310      	str	r3, [sp, #64]	; 0x40
 8006fdc:	2301      	movs	r3, #1
 8006fde:	930c      	str	r3, [sp, #48]	; 0x30
 8006fe0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d104      	bne.n	8006ff0 <_dtoa_r+0xaa4>
 8006fe6:	0001      	movs	r1, r0
 8006fe8:	9805      	ldr	r0, [sp, #20]
 8006fea:	f000 fb75 	bl	80076d8 <__mcmp>
 8006fee:	900c      	str	r0, [sp, #48]	; 0x30
 8006ff0:	0038      	movs	r0, r7
 8006ff2:	9908      	ldr	r1, [sp, #32]
 8006ff4:	f000 f930 	bl	8007258 <_Bfree>
 8006ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	9308      	str	r3, [sp, #32]
 8007000:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007002:	4313      	orrs	r3, r2
 8007004:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007006:	4313      	orrs	r3, r2
 8007008:	d10c      	bne.n	8007024 <_dtoa_r+0xad8>
 800700a:	9b07      	ldr	r3, [sp, #28]
 800700c:	2b39      	cmp	r3, #57	; 0x39
 800700e:	d026      	beq.n	800705e <_dtoa_r+0xb12>
 8007010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007012:	2b00      	cmp	r3, #0
 8007014:	dd02      	ble.n	800701c <_dtoa_r+0xad0>
 8007016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007018:	3331      	adds	r3, #49	; 0x31
 800701a:	9307      	str	r3, [sp, #28]
 800701c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800701e:	9a07      	ldr	r2, [sp, #28]
 8007020:	701a      	strb	r2, [r3, #0]
 8007022:	e76a      	b.n	8006efa <_dtoa_r+0x9ae>
 8007024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007026:	2b00      	cmp	r3, #0
 8007028:	db04      	blt.n	8007034 <_dtoa_r+0xae8>
 800702a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800702c:	4313      	orrs	r3, r2
 800702e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007030:	4313      	orrs	r3, r2
 8007032:	d11f      	bne.n	8007074 <_dtoa_r+0xb28>
 8007034:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007036:	2b00      	cmp	r3, #0
 8007038:	ddf0      	ble.n	800701c <_dtoa_r+0xad0>
 800703a:	9905      	ldr	r1, [sp, #20]
 800703c:	2201      	movs	r2, #1
 800703e:	0038      	movs	r0, r7
 8007040:	f000 fadc 	bl	80075fc <__lshift>
 8007044:	0031      	movs	r1, r6
 8007046:	9005      	str	r0, [sp, #20]
 8007048:	f000 fb46 	bl	80076d8 <__mcmp>
 800704c:	2800      	cmp	r0, #0
 800704e:	dc03      	bgt.n	8007058 <_dtoa_r+0xb0c>
 8007050:	d1e4      	bne.n	800701c <_dtoa_r+0xad0>
 8007052:	9b07      	ldr	r3, [sp, #28]
 8007054:	07db      	lsls	r3, r3, #31
 8007056:	d5e1      	bpl.n	800701c <_dtoa_r+0xad0>
 8007058:	9b07      	ldr	r3, [sp, #28]
 800705a:	2b39      	cmp	r3, #57	; 0x39
 800705c:	d1db      	bne.n	8007016 <_dtoa_r+0xaca>
 800705e:	2339      	movs	r3, #57	; 0x39
 8007060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007062:	7013      	strb	r3, [r2, #0]
 8007064:	9b08      	ldr	r3, [sp, #32]
 8007066:	9308      	str	r3, [sp, #32]
 8007068:	3b01      	subs	r3, #1
 800706a:	781a      	ldrb	r2, [r3, #0]
 800706c:	2a39      	cmp	r2, #57	; 0x39
 800706e:	d068      	beq.n	8007142 <_dtoa_r+0xbf6>
 8007070:	3201      	adds	r2, #1
 8007072:	e7d5      	b.n	8007020 <_dtoa_r+0xad4>
 8007074:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007076:	2b00      	cmp	r3, #0
 8007078:	dd07      	ble.n	800708a <_dtoa_r+0xb3e>
 800707a:	9b07      	ldr	r3, [sp, #28]
 800707c:	2b39      	cmp	r3, #57	; 0x39
 800707e:	d0ee      	beq.n	800705e <_dtoa_r+0xb12>
 8007080:	9b07      	ldr	r3, [sp, #28]
 8007082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007084:	3301      	adds	r3, #1
 8007086:	7013      	strb	r3, [r2, #0]
 8007088:	e737      	b.n	8006efa <_dtoa_r+0x9ae>
 800708a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708c:	9a07      	ldr	r2, [sp, #28]
 800708e:	701a      	strb	r2, [r3, #0]
 8007090:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007094:	4293      	cmp	r3, r2
 8007096:	d03e      	beq.n	8007116 <_dtoa_r+0xbca>
 8007098:	2300      	movs	r3, #0
 800709a:	220a      	movs	r2, #10
 800709c:	9905      	ldr	r1, [sp, #20]
 800709e:	0038      	movs	r0, r7
 80070a0:	f000 f8fe 	bl	80072a0 <__multadd>
 80070a4:	2300      	movs	r3, #0
 80070a6:	9005      	str	r0, [sp, #20]
 80070a8:	220a      	movs	r2, #10
 80070aa:	0021      	movs	r1, r4
 80070ac:	0038      	movs	r0, r7
 80070ae:	42ac      	cmp	r4, r5
 80070b0:	d106      	bne.n	80070c0 <_dtoa_r+0xb74>
 80070b2:	f000 f8f5 	bl	80072a0 <__multadd>
 80070b6:	0004      	movs	r4, r0
 80070b8:	0005      	movs	r5, r0
 80070ba:	9b08      	ldr	r3, [sp, #32]
 80070bc:	930a      	str	r3, [sp, #40]	; 0x28
 80070be:	e778      	b.n	8006fb2 <_dtoa_r+0xa66>
 80070c0:	f000 f8ee 	bl	80072a0 <__multadd>
 80070c4:	0029      	movs	r1, r5
 80070c6:	0004      	movs	r4, r0
 80070c8:	2300      	movs	r3, #0
 80070ca:	220a      	movs	r2, #10
 80070cc:	0038      	movs	r0, r7
 80070ce:	f000 f8e7 	bl	80072a0 <__multadd>
 80070d2:	0005      	movs	r5, r0
 80070d4:	e7f1      	b.n	80070ba <_dtoa_r+0xb6e>
 80070d6:	9b07      	ldr	r3, [sp, #28]
 80070d8:	930c      	str	r3, [sp, #48]	; 0x30
 80070da:	2400      	movs	r4, #0
 80070dc:	0031      	movs	r1, r6
 80070de:	9805      	ldr	r0, [sp, #20]
 80070e0:	f7ff f9a8 	bl	8006434 <quorem>
 80070e4:	9b06      	ldr	r3, [sp, #24]
 80070e6:	3030      	adds	r0, #48	; 0x30
 80070e8:	5518      	strb	r0, [r3, r4]
 80070ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070ec:	3401      	adds	r4, #1
 80070ee:	9007      	str	r0, [sp, #28]
 80070f0:	42a3      	cmp	r3, r4
 80070f2:	dd07      	ble.n	8007104 <_dtoa_r+0xbb8>
 80070f4:	2300      	movs	r3, #0
 80070f6:	220a      	movs	r2, #10
 80070f8:	0038      	movs	r0, r7
 80070fa:	9905      	ldr	r1, [sp, #20]
 80070fc:	f000 f8d0 	bl	80072a0 <__multadd>
 8007100:	9005      	str	r0, [sp, #20]
 8007102:	e7eb      	b.n	80070dc <_dtoa_r+0xb90>
 8007104:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007106:	2001      	movs	r0, #1
 8007108:	2b00      	cmp	r3, #0
 800710a:	dd00      	ble.n	800710e <_dtoa_r+0xbc2>
 800710c:	0018      	movs	r0, r3
 800710e:	2400      	movs	r4, #0
 8007110:	9b06      	ldr	r3, [sp, #24]
 8007112:	181b      	adds	r3, r3, r0
 8007114:	9308      	str	r3, [sp, #32]
 8007116:	9905      	ldr	r1, [sp, #20]
 8007118:	2201      	movs	r2, #1
 800711a:	0038      	movs	r0, r7
 800711c:	f000 fa6e 	bl	80075fc <__lshift>
 8007120:	0031      	movs	r1, r6
 8007122:	9005      	str	r0, [sp, #20]
 8007124:	f000 fad8 	bl	80076d8 <__mcmp>
 8007128:	2800      	cmp	r0, #0
 800712a:	dc9b      	bgt.n	8007064 <_dtoa_r+0xb18>
 800712c:	d102      	bne.n	8007134 <_dtoa_r+0xbe8>
 800712e:	9b07      	ldr	r3, [sp, #28]
 8007130:	07db      	lsls	r3, r3, #31
 8007132:	d497      	bmi.n	8007064 <_dtoa_r+0xb18>
 8007134:	9b08      	ldr	r3, [sp, #32]
 8007136:	9308      	str	r3, [sp, #32]
 8007138:	3b01      	subs	r3, #1
 800713a:	781a      	ldrb	r2, [r3, #0]
 800713c:	2a30      	cmp	r2, #48	; 0x30
 800713e:	d0fa      	beq.n	8007136 <_dtoa_r+0xbea>
 8007140:	e6db      	b.n	8006efa <_dtoa_r+0x9ae>
 8007142:	9a06      	ldr	r2, [sp, #24]
 8007144:	429a      	cmp	r2, r3
 8007146:	d18e      	bne.n	8007066 <_dtoa_r+0xb1a>
 8007148:	9b02      	ldr	r3, [sp, #8]
 800714a:	3301      	adds	r3, #1
 800714c:	9302      	str	r3, [sp, #8]
 800714e:	2331      	movs	r3, #49	; 0x31
 8007150:	e799      	b.n	8007086 <_dtoa_r+0xb3a>
 8007152:	4b09      	ldr	r3, [pc, #36]	; (8007178 <_dtoa_r+0xc2c>)
 8007154:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007156:	9306      	str	r3, [sp, #24]
 8007158:	4b08      	ldr	r3, [pc, #32]	; (800717c <_dtoa_r+0xc30>)
 800715a:	2a00      	cmp	r2, #0
 800715c:	d001      	beq.n	8007162 <_dtoa_r+0xc16>
 800715e:	f7ff fa3f 	bl	80065e0 <_dtoa_r+0x94>
 8007162:	f7ff fa3f 	bl	80065e4 <_dtoa_r+0x98>
 8007166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007168:	2b00      	cmp	r3, #0
 800716a:	dcb6      	bgt.n	80070da <_dtoa_r+0xb8e>
 800716c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800716e:	2b02      	cmp	r3, #2
 8007170:	dd00      	ble.n	8007174 <_dtoa_r+0xc28>
 8007172:	e6ac      	b.n	8006ece <_dtoa_r+0x982>
 8007174:	e7b1      	b.n	80070da <_dtoa_r+0xb8e>
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	0800895c 	.word	0x0800895c
 800717c:	08008964 	.word	0x08008964

08007180 <_localeconv_r>:
 8007180:	4800      	ldr	r0, [pc, #0]	; (8007184 <_localeconv_r+0x4>)
 8007182:	4770      	bx	lr
 8007184:	20000160 	.word	0x20000160

08007188 <memchr>:
 8007188:	b2c9      	uxtb	r1, r1
 800718a:	1882      	adds	r2, r0, r2
 800718c:	4290      	cmp	r0, r2
 800718e:	d101      	bne.n	8007194 <memchr+0xc>
 8007190:	2000      	movs	r0, #0
 8007192:	4770      	bx	lr
 8007194:	7803      	ldrb	r3, [r0, #0]
 8007196:	428b      	cmp	r3, r1
 8007198:	d0fb      	beq.n	8007192 <memchr+0xa>
 800719a:	3001      	adds	r0, #1
 800719c:	e7f6      	b.n	800718c <memchr+0x4>

0800719e <memcpy>:
 800719e:	2300      	movs	r3, #0
 80071a0:	b510      	push	{r4, lr}
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d100      	bne.n	80071a8 <memcpy+0xa>
 80071a6:	bd10      	pop	{r4, pc}
 80071a8:	5ccc      	ldrb	r4, [r1, r3]
 80071aa:	54c4      	strb	r4, [r0, r3]
 80071ac:	3301      	adds	r3, #1
 80071ae:	e7f8      	b.n	80071a2 <memcpy+0x4>

080071b0 <__malloc_lock>:
 80071b0:	b510      	push	{r4, lr}
 80071b2:	4802      	ldr	r0, [pc, #8]	; (80071bc <__malloc_lock+0xc>)
 80071b4:	f000 fd65 	bl	8007c82 <__retarget_lock_acquire_recursive>
 80071b8:	bd10      	pop	{r4, pc}
 80071ba:	46c0      	nop			; (mov r8, r8)
 80071bc:	20000304 	.word	0x20000304

080071c0 <__malloc_unlock>:
 80071c0:	b510      	push	{r4, lr}
 80071c2:	4802      	ldr	r0, [pc, #8]	; (80071cc <__malloc_unlock+0xc>)
 80071c4:	f000 fd5e 	bl	8007c84 <__retarget_lock_release_recursive>
 80071c8:	bd10      	pop	{r4, pc}
 80071ca:	46c0      	nop			; (mov r8, r8)
 80071cc:	20000304 	.word	0x20000304

080071d0 <_Balloc>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80071d4:	0006      	movs	r6, r0
 80071d6:	000c      	movs	r4, r1
 80071d8:	2d00      	cmp	r5, #0
 80071da:	d10e      	bne.n	80071fa <_Balloc+0x2a>
 80071dc:	2010      	movs	r0, #16
 80071de:	f7fe fb95 	bl	800590c <malloc>
 80071e2:	1e02      	subs	r2, r0, #0
 80071e4:	6270      	str	r0, [r6, #36]	; 0x24
 80071e6:	d104      	bne.n	80071f2 <_Balloc+0x22>
 80071e8:	2166      	movs	r1, #102	; 0x66
 80071ea:	4b19      	ldr	r3, [pc, #100]	; (8007250 <_Balloc+0x80>)
 80071ec:	4819      	ldr	r0, [pc, #100]	; (8007254 <_Balloc+0x84>)
 80071ee:	f000 fd19 	bl	8007c24 <__assert_func>
 80071f2:	6045      	str	r5, [r0, #4]
 80071f4:	6085      	str	r5, [r0, #8]
 80071f6:	6005      	str	r5, [r0, #0]
 80071f8:	60c5      	str	r5, [r0, #12]
 80071fa:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80071fc:	68eb      	ldr	r3, [r5, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d013      	beq.n	800722a <_Balloc+0x5a>
 8007202:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007204:	00a2      	lsls	r2, r4, #2
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	189b      	adds	r3, r3, r2
 800720a:	6818      	ldr	r0, [r3, #0]
 800720c:	2800      	cmp	r0, #0
 800720e:	d118      	bne.n	8007242 <_Balloc+0x72>
 8007210:	2101      	movs	r1, #1
 8007212:	000d      	movs	r5, r1
 8007214:	40a5      	lsls	r5, r4
 8007216:	1d6a      	adds	r2, r5, #5
 8007218:	0030      	movs	r0, r6
 800721a:	0092      	lsls	r2, r2, #2
 800721c:	f000 fb74 	bl	8007908 <_calloc_r>
 8007220:	2800      	cmp	r0, #0
 8007222:	d00c      	beq.n	800723e <_Balloc+0x6e>
 8007224:	6044      	str	r4, [r0, #4]
 8007226:	6085      	str	r5, [r0, #8]
 8007228:	e00d      	b.n	8007246 <_Balloc+0x76>
 800722a:	2221      	movs	r2, #33	; 0x21
 800722c:	2104      	movs	r1, #4
 800722e:	0030      	movs	r0, r6
 8007230:	f000 fb6a 	bl	8007908 <_calloc_r>
 8007234:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007236:	60e8      	str	r0, [r5, #12]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1e1      	bne.n	8007202 <_Balloc+0x32>
 800723e:	2000      	movs	r0, #0
 8007240:	bd70      	pop	{r4, r5, r6, pc}
 8007242:	6802      	ldr	r2, [r0, #0]
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	2300      	movs	r3, #0
 8007248:	6103      	str	r3, [r0, #16]
 800724a:	60c3      	str	r3, [r0, #12]
 800724c:	e7f8      	b.n	8007240 <_Balloc+0x70>
 800724e:	46c0      	nop			; (mov r8, r8)
 8007250:	08008969 	.word	0x08008969
 8007254:	080089ec 	.word	0x080089ec

08007258 <_Bfree>:
 8007258:	b570      	push	{r4, r5, r6, lr}
 800725a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800725c:	0005      	movs	r5, r0
 800725e:	000c      	movs	r4, r1
 8007260:	2e00      	cmp	r6, #0
 8007262:	d10e      	bne.n	8007282 <_Bfree+0x2a>
 8007264:	2010      	movs	r0, #16
 8007266:	f7fe fb51 	bl	800590c <malloc>
 800726a:	1e02      	subs	r2, r0, #0
 800726c:	6268      	str	r0, [r5, #36]	; 0x24
 800726e:	d104      	bne.n	800727a <_Bfree+0x22>
 8007270:	218a      	movs	r1, #138	; 0x8a
 8007272:	4b09      	ldr	r3, [pc, #36]	; (8007298 <_Bfree+0x40>)
 8007274:	4809      	ldr	r0, [pc, #36]	; (800729c <_Bfree+0x44>)
 8007276:	f000 fcd5 	bl	8007c24 <__assert_func>
 800727a:	6046      	str	r6, [r0, #4]
 800727c:	6086      	str	r6, [r0, #8]
 800727e:	6006      	str	r6, [r0, #0]
 8007280:	60c6      	str	r6, [r0, #12]
 8007282:	2c00      	cmp	r4, #0
 8007284:	d007      	beq.n	8007296 <_Bfree+0x3e>
 8007286:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007288:	6862      	ldr	r2, [r4, #4]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	0092      	lsls	r2, r2, #2
 800728e:	189b      	adds	r3, r3, r2
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	6022      	str	r2, [r4, #0]
 8007294:	601c      	str	r4, [r3, #0]
 8007296:	bd70      	pop	{r4, r5, r6, pc}
 8007298:	08008969 	.word	0x08008969
 800729c:	080089ec 	.word	0x080089ec

080072a0 <__multadd>:
 80072a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072a2:	000e      	movs	r6, r1
 80072a4:	9001      	str	r0, [sp, #4]
 80072a6:	000c      	movs	r4, r1
 80072a8:	001d      	movs	r5, r3
 80072aa:	2000      	movs	r0, #0
 80072ac:	690f      	ldr	r7, [r1, #16]
 80072ae:	3614      	adds	r6, #20
 80072b0:	6833      	ldr	r3, [r6, #0]
 80072b2:	3001      	adds	r0, #1
 80072b4:	b299      	uxth	r1, r3
 80072b6:	4351      	muls	r1, r2
 80072b8:	0c1b      	lsrs	r3, r3, #16
 80072ba:	4353      	muls	r3, r2
 80072bc:	1949      	adds	r1, r1, r5
 80072be:	0c0d      	lsrs	r5, r1, #16
 80072c0:	195b      	adds	r3, r3, r5
 80072c2:	0c1d      	lsrs	r5, r3, #16
 80072c4:	b289      	uxth	r1, r1
 80072c6:	041b      	lsls	r3, r3, #16
 80072c8:	185b      	adds	r3, r3, r1
 80072ca:	c608      	stmia	r6!, {r3}
 80072cc:	4287      	cmp	r7, r0
 80072ce:	dcef      	bgt.n	80072b0 <__multadd+0x10>
 80072d0:	2d00      	cmp	r5, #0
 80072d2:	d022      	beq.n	800731a <__multadd+0x7a>
 80072d4:	68a3      	ldr	r3, [r4, #8]
 80072d6:	42bb      	cmp	r3, r7
 80072d8:	dc19      	bgt.n	800730e <__multadd+0x6e>
 80072da:	6863      	ldr	r3, [r4, #4]
 80072dc:	9801      	ldr	r0, [sp, #4]
 80072de:	1c59      	adds	r1, r3, #1
 80072e0:	f7ff ff76 	bl	80071d0 <_Balloc>
 80072e4:	1e06      	subs	r6, r0, #0
 80072e6:	d105      	bne.n	80072f4 <__multadd+0x54>
 80072e8:	0002      	movs	r2, r0
 80072ea:	21b5      	movs	r1, #181	; 0xb5
 80072ec:	4b0c      	ldr	r3, [pc, #48]	; (8007320 <__multadd+0x80>)
 80072ee:	480d      	ldr	r0, [pc, #52]	; (8007324 <__multadd+0x84>)
 80072f0:	f000 fc98 	bl	8007c24 <__assert_func>
 80072f4:	0021      	movs	r1, r4
 80072f6:	6923      	ldr	r3, [r4, #16]
 80072f8:	310c      	adds	r1, #12
 80072fa:	1c9a      	adds	r2, r3, #2
 80072fc:	0092      	lsls	r2, r2, #2
 80072fe:	300c      	adds	r0, #12
 8007300:	f7ff ff4d 	bl	800719e <memcpy>
 8007304:	0021      	movs	r1, r4
 8007306:	9801      	ldr	r0, [sp, #4]
 8007308:	f7ff ffa6 	bl	8007258 <_Bfree>
 800730c:	0034      	movs	r4, r6
 800730e:	1d3b      	adds	r3, r7, #4
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	18e3      	adds	r3, r4, r3
 8007314:	605d      	str	r5, [r3, #4]
 8007316:	1c7b      	adds	r3, r7, #1
 8007318:	6123      	str	r3, [r4, #16]
 800731a:	0020      	movs	r0, r4
 800731c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800731e:	46c0      	nop			; (mov r8, r8)
 8007320:	080089db 	.word	0x080089db
 8007324:	080089ec 	.word	0x080089ec

08007328 <__hi0bits>:
 8007328:	0003      	movs	r3, r0
 800732a:	0c02      	lsrs	r2, r0, #16
 800732c:	2000      	movs	r0, #0
 800732e:	4282      	cmp	r2, r0
 8007330:	d101      	bne.n	8007336 <__hi0bits+0xe>
 8007332:	041b      	lsls	r3, r3, #16
 8007334:	3010      	adds	r0, #16
 8007336:	0e1a      	lsrs	r2, r3, #24
 8007338:	d101      	bne.n	800733e <__hi0bits+0x16>
 800733a:	3008      	adds	r0, #8
 800733c:	021b      	lsls	r3, r3, #8
 800733e:	0f1a      	lsrs	r2, r3, #28
 8007340:	d101      	bne.n	8007346 <__hi0bits+0x1e>
 8007342:	3004      	adds	r0, #4
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	0f9a      	lsrs	r2, r3, #30
 8007348:	d101      	bne.n	800734e <__hi0bits+0x26>
 800734a:	3002      	adds	r0, #2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	2b00      	cmp	r3, #0
 8007350:	db03      	blt.n	800735a <__hi0bits+0x32>
 8007352:	3001      	adds	r0, #1
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	d400      	bmi.n	800735a <__hi0bits+0x32>
 8007358:	2020      	movs	r0, #32
 800735a:	4770      	bx	lr

0800735c <__lo0bits>:
 800735c:	6803      	ldr	r3, [r0, #0]
 800735e:	0002      	movs	r2, r0
 8007360:	2107      	movs	r1, #7
 8007362:	0018      	movs	r0, r3
 8007364:	4008      	ands	r0, r1
 8007366:	420b      	tst	r3, r1
 8007368:	d00d      	beq.n	8007386 <__lo0bits+0x2a>
 800736a:	3906      	subs	r1, #6
 800736c:	2000      	movs	r0, #0
 800736e:	420b      	tst	r3, r1
 8007370:	d105      	bne.n	800737e <__lo0bits+0x22>
 8007372:	3002      	adds	r0, #2
 8007374:	4203      	tst	r3, r0
 8007376:	d003      	beq.n	8007380 <__lo0bits+0x24>
 8007378:	40cb      	lsrs	r3, r1
 800737a:	0008      	movs	r0, r1
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	4770      	bx	lr
 8007380:	089b      	lsrs	r3, r3, #2
 8007382:	6013      	str	r3, [r2, #0]
 8007384:	e7fb      	b.n	800737e <__lo0bits+0x22>
 8007386:	b299      	uxth	r1, r3
 8007388:	2900      	cmp	r1, #0
 800738a:	d101      	bne.n	8007390 <__lo0bits+0x34>
 800738c:	2010      	movs	r0, #16
 800738e:	0c1b      	lsrs	r3, r3, #16
 8007390:	b2d9      	uxtb	r1, r3
 8007392:	2900      	cmp	r1, #0
 8007394:	d101      	bne.n	800739a <__lo0bits+0x3e>
 8007396:	3008      	adds	r0, #8
 8007398:	0a1b      	lsrs	r3, r3, #8
 800739a:	0719      	lsls	r1, r3, #28
 800739c:	d101      	bne.n	80073a2 <__lo0bits+0x46>
 800739e:	3004      	adds	r0, #4
 80073a0:	091b      	lsrs	r3, r3, #4
 80073a2:	0799      	lsls	r1, r3, #30
 80073a4:	d101      	bne.n	80073aa <__lo0bits+0x4e>
 80073a6:	3002      	adds	r0, #2
 80073a8:	089b      	lsrs	r3, r3, #2
 80073aa:	07d9      	lsls	r1, r3, #31
 80073ac:	d4e9      	bmi.n	8007382 <__lo0bits+0x26>
 80073ae:	3001      	adds	r0, #1
 80073b0:	085b      	lsrs	r3, r3, #1
 80073b2:	d1e6      	bne.n	8007382 <__lo0bits+0x26>
 80073b4:	2020      	movs	r0, #32
 80073b6:	e7e2      	b.n	800737e <__lo0bits+0x22>

080073b8 <__i2b>:
 80073b8:	b510      	push	{r4, lr}
 80073ba:	000c      	movs	r4, r1
 80073bc:	2101      	movs	r1, #1
 80073be:	f7ff ff07 	bl	80071d0 <_Balloc>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	d106      	bne.n	80073d4 <__i2b+0x1c>
 80073c6:	21a0      	movs	r1, #160	; 0xa0
 80073c8:	0002      	movs	r2, r0
 80073ca:	4b04      	ldr	r3, [pc, #16]	; (80073dc <__i2b+0x24>)
 80073cc:	4804      	ldr	r0, [pc, #16]	; (80073e0 <__i2b+0x28>)
 80073ce:	0049      	lsls	r1, r1, #1
 80073d0:	f000 fc28 	bl	8007c24 <__assert_func>
 80073d4:	2301      	movs	r3, #1
 80073d6:	6144      	str	r4, [r0, #20]
 80073d8:	6103      	str	r3, [r0, #16]
 80073da:	bd10      	pop	{r4, pc}
 80073dc:	080089db 	.word	0x080089db
 80073e0:	080089ec 	.word	0x080089ec

080073e4 <__multiply>:
 80073e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073e6:	690b      	ldr	r3, [r1, #16]
 80073e8:	0014      	movs	r4, r2
 80073ea:	6912      	ldr	r2, [r2, #16]
 80073ec:	000d      	movs	r5, r1
 80073ee:	b089      	sub	sp, #36	; 0x24
 80073f0:	4293      	cmp	r3, r2
 80073f2:	da01      	bge.n	80073f8 <__multiply+0x14>
 80073f4:	0025      	movs	r5, r4
 80073f6:	000c      	movs	r4, r1
 80073f8:	692f      	ldr	r7, [r5, #16]
 80073fa:	6926      	ldr	r6, [r4, #16]
 80073fc:	6869      	ldr	r1, [r5, #4]
 80073fe:	19bb      	adds	r3, r7, r6
 8007400:	9302      	str	r3, [sp, #8]
 8007402:	68ab      	ldr	r3, [r5, #8]
 8007404:	19ba      	adds	r2, r7, r6
 8007406:	4293      	cmp	r3, r2
 8007408:	da00      	bge.n	800740c <__multiply+0x28>
 800740a:	3101      	adds	r1, #1
 800740c:	f7ff fee0 	bl	80071d0 <_Balloc>
 8007410:	9001      	str	r0, [sp, #4]
 8007412:	2800      	cmp	r0, #0
 8007414:	d106      	bne.n	8007424 <__multiply+0x40>
 8007416:	215e      	movs	r1, #94	; 0x5e
 8007418:	0002      	movs	r2, r0
 800741a:	4b48      	ldr	r3, [pc, #288]	; (800753c <__multiply+0x158>)
 800741c:	4848      	ldr	r0, [pc, #288]	; (8007540 <__multiply+0x15c>)
 800741e:	31ff      	adds	r1, #255	; 0xff
 8007420:	f000 fc00 	bl	8007c24 <__assert_func>
 8007424:	9b01      	ldr	r3, [sp, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	3314      	adds	r3, #20
 800742a:	469c      	mov	ip, r3
 800742c:	19bb      	adds	r3, r7, r6
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4463      	add	r3, ip
 8007432:	9303      	str	r3, [sp, #12]
 8007434:	4663      	mov	r3, ip
 8007436:	9903      	ldr	r1, [sp, #12]
 8007438:	428b      	cmp	r3, r1
 800743a:	d32c      	bcc.n	8007496 <__multiply+0xb2>
 800743c:	002b      	movs	r3, r5
 800743e:	0022      	movs	r2, r4
 8007440:	3314      	adds	r3, #20
 8007442:	00bf      	lsls	r7, r7, #2
 8007444:	3214      	adds	r2, #20
 8007446:	9306      	str	r3, [sp, #24]
 8007448:	00b6      	lsls	r6, r6, #2
 800744a:	19db      	adds	r3, r3, r7
 800744c:	9304      	str	r3, [sp, #16]
 800744e:	1993      	adds	r3, r2, r6
 8007450:	9307      	str	r3, [sp, #28]
 8007452:	2304      	movs	r3, #4
 8007454:	9305      	str	r3, [sp, #20]
 8007456:	002b      	movs	r3, r5
 8007458:	9904      	ldr	r1, [sp, #16]
 800745a:	3315      	adds	r3, #21
 800745c:	9200      	str	r2, [sp, #0]
 800745e:	4299      	cmp	r1, r3
 8007460:	d305      	bcc.n	800746e <__multiply+0x8a>
 8007462:	1b4b      	subs	r3, r1, r5
 8007464:	3b15      	subs	r3, #21
 8007466:	089b      	lsrs	r3, r3, #2
 8007468:	3301      	adds	r3, #1
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	9305      	str	r3, [sp, #20]
 800746e:	9b07      	ldr	r3, [sp, #28]
 8007470:	9a00      	ldr	r2, [sp, #0]
 8007472:	429a      	cmp	r2, r3
 8007474:	d311      	bcc.n	800749a <__multiply+0xb6>
 8007476:	9b02      	ldr	r3, [sp, #8]
 8007478:	2b00      	cmp	r3, #0
 800747a:	dd06      	ble.n	800748a <__multiply+0xa6>
 800747c:	9b03      	ldr	r3, [sp, #12]
 800747e:	3b04      	subs	r3, #4
 8007480:	9303      	str	r3, [sp, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d053      	beq.n	8007532 <__multiply+0x14e>
 800748a:	9b01      	ldr	r3, [sp, #4]
 800748c:	9a02      	ldr	r2, [sp, #8]
 800748e:	0018      	movs	r0, r3
 8007490:	611a      	str	r2, [r3, #16]
 8007492:	b009      	add	sp, #36	; 0x24
 8007494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007496:	c304      	stmia	r3!, {r2}
 8007498:	e7cd      	b.n	8007436 <__multiply+0x52>
 800749a:	9b00      	ldr	r3, [sp, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	b298      	uxth	r0, r3
 80074a0:	2800      	cmp	r0, #0
 80074a2:	d01b      	beq.n	80074dc <__multiply+0xf8>
 80074a4:	4667      	mov	r7, ip
 80074a6:	2400      	movs	r4, #0
 80074a8:	9e06      	ldr	r6, [sp, #24]
 80074aa:	ce02      	ldmia	r6!, {r1}
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	b28b      	uxth	r3, r1
 80074b0:	4343      	muls	r3, r0
 80074b2:	b292      	uxth	r2, r2
 80074b4:	189b      	adds	r3, r3, r2
 80074b6:	191b      	adds	r3, r3, r4
 80074b8:	0c0c      	lsrs	r4, r1, #16
 80074ba:	4344      	muls	r4, r0
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	0c11      	lsrs	r1, r2, #16
 80074c0:	1861      	adds	r1, r4, r1
 80074c2:	0c1c      	lsrs	r4, r3, #16
 80074c4:	1909      	adds	r1, r1, r4
 80074c6:	0c0c      	lsrs	r4, r1, #16
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	0409      	lsls	r1, r1, #16
 80074cc:	430b      	orrs	r3, r1
 80074ce:	c708      	stmia	r7!, {r3}
 80074d0:	9b04      	ldr	r3, [sp, #16]
 80074d2:	42b3      	cmp	r3, r6
 80074d4:	d8e9      	bhi.n	80074aa <__multiply+0xc6>
 80074d6:	4663      	mov	r3, ip
 80074d8:	9a05      	ldr	r2, [sp, #20]
 80074da:	509c      	str	r4, [r3, r2]
 80074dc:	9b00      	ldr	r3, [sp, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	0c1e      	lsrs	r6, r3, #16
 80074e2:	d020      	beq.n	8007526 <__multiply+0x142>
 80074e4:	4663      	mov	r3, ip
 80074e6:	002c      	movs	r4, r5
 80074e8:	4660      	mov	r0, ip
 80074ea:	2700      	movs	r7, #0
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3414      	adds	r4, #20
 80074f0:	6822      	ldr	r2, [r4, #0]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	b291      	uxth	r1, r2
 80074f6:	4371      	muls	r1, r6
 80074f8:	6802      	ldr	r2, [r0, #0]
 80074fa:	0c12      	lsrs	r2, r2, #16
 80074fc:	1889      	adds	r1, r1, r2
 80074fe:	19cf      	adds	r7, r1, r7
 8007500:	0439      	lsls	r1, r7, #16
 8007502:	430b      	orrs	r3, r1
 8007504:	6003      	str	r3, [r0, #0]
 8007506:	cc02      	ldmia	r4!, {r1}
 8007508:	6843      	ldr	r3, [r0, #4]
 800750a:	0c09      	lsrs	r1, r1, #16
 800750c:	4371      	muls	r1, r6
 800750e:	b29b      	uxth	r3, r3
 8007510:	0c3f      	lsrs	r7, r7, #16
 8007512:	18cb      	adds	r3, r1, r3
 8007514:	9a04      	ldr	r2, [sp, #16]
 8007516:	19db      	adds	r3, r3, r7
 8007518:	0c1f      	lsrs	r7, r3, #16
 800751a:	3004      	adds	r0, #4
 800751c:	42a2      	cmp	r2, r4
 800751e:	d8e7      	bhi.n	80074f0 <__multiply+0x10c>
 8007520:	4662      	mov	r2, ip
 8007522:	9905      	ldr	r1, [sp, #20]
 8007524:	5053      	str	r3, [r2, r1]
 8007526:	9b00      	ldr	r3, [sp, #0]
 8007528:	3304      	adds	r3, #4
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	2304      	movs	r3, #4
 800752e:	449c      	add	ip, r3
 8007530:	e79d      	b.n	800746e <__multiply+0x8a>
 8007532:	9b02      	ldr	r3, [sp, #8]
 8007534:	3b01      	subs	r3, #1
 8007536:	9302      	str	r3, [sp, #8]
 8007538:	e79d      	b.n	8007476 <__multiply+0x92>
 800753a:	46c0      	nop			; (mov r8, r8)
 800753c:	080089db 	.word	0x080089db
 8007540:	080089ec 	.word	0x080089ec

08007544 <__pow5mult>:
 8007544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007546:	2303      	movs	r3, #3
 8007548:	0015      	movs	r5, r2
 800754a:	0007      	movs	r7, r0
 800754c:	000e      	movs	r6, r1
 800754e:	401a      	ands	r2, r3
 8007550:	421d      	tst	r5, r3
 8007552:	d008      	beq.n	8007566 <__pow5mult+0x22>
 8007554:	4925      	ldr	r1, [pc, #148]	; (80075ec <__pow5mult+0xa8>)
 8007556:	3a01      	subs	r2, #1
 8007558:	0092      	lsls	r2, r2, #2
 800755a:	5852      	ldr	r2, [r2, r1]
 800755c:	2300      	movs	r3, #0
 800755e:	0031      	movs	r1, r6
 8007560:	f7ff fe9e 	bl	80072a0 <__multadd>
 8007564:	0006      	movs	r6, r0
 8007566:	10ad      	asrs	r5, r5, #2
 8007568:	d03d      	beq.n	80075e6 <__pow5mult+0xa2>
 800756a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800756c:	2c00      	cmp	r4, #0
 800756e:	d10f      	bne.n	8007590 <__pow5mult+0x4c>
 8007570:	2010      	movs	r0, #16
 8007572:	f7fe f9cb 	bl	800590c <malloc>
 8007576:	1e02      	subs	r2, r0, #0
 8007578:	6278      	str	r0, [r7, #36]	; 0x24
 800757a:	d105      	bne.n	8007588 <__pow5mult+0x44>
 800757c:	21d7      	movs	r1, #215	; 0xd7
 800757e:	4b1c      	ldr	r3, [pc, #112]	; (80075f0 <__pow5mult+0xac>)
 8007580:	481c      	ldr	r0, [pc, #112]	; (80075f4 <__pow5mult+0xb0>)
 8007582:	0049      	lsls	r1, r1, #1
 8007584:	f000 fb4e 	bl	8007c24 <__assert_func>
 8007588:	6044      	str	r4, [r0, #4]
 800758a:	6084      	str	r4, [r0, #8]
 800758c:	6004      	str	r4, [r0, #0]
 800758e:	60c4      	str	r4, [r0, #12]
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	689c      	ldr	r4, [r3, #8]
 8007594:	9301      	str	r3, [sp, #4]
 8007596:	2c00      	cmp	r4, #0
 8007598:	d108      	bne.n	80075ac <__pow5mult+0x68>
 800759a:	0038      	movs	r0, r7
 800759c:	4916      	ldr	r1, [pc, #88]	; (80075f8 <__pow5mult+0xb4>)
 800759e:	f7ff ff0b 	bl	80073b8 <__i2b>
 80075a2:	9b01      	ldr	r3, [sp, #4]
 80075a4:	0004      	movs	r4, r0
 80075a6:	6098      	str	r0, [r3, #8]
 80075a8:	2300      	movs	r3, #0
 80075aa:	6003      	str	r3, [r0, #0]
 80075ac:	2301      	movs	r3, #1
 80075ae:	421d      	tst	r5, r3
 80075b0:	d00a      	beq.n	80075c8 <__pow5mult+0x84>
 80075b2:	0031      	movs	r1, r6
 80075b4:	0022      	movs	r2, r4
 80075b6:	0038      	movs	r0, r7
 80075b8:	f7ff ff14 	bl	80073e4 <__multiply>
 80075bc:	0031      	movs	r1, r6
 80075be:	9001      	str	r0, [sp, #4]
 80075c0:	0038      	movs	r0, r7
 80075c2:	f7ff fe49 	bl	8007258 <_Bfree>
 80075c6:	9e01      	ldr	r6, [sp, #4]
 80075c8:	106d      	asrs	r5, r5, #1
 80075ca:	d00c      	beq.n	80075e6 <__pow5mult+0xa2>
 80075cc:	6820      	ldr	r0, [r4, #0]
 80075ce:	2800      	cmp	r0, #0
 80075d0:	d107      	bne.n	80075e2 <__pow5mult+0x9e>
 80075d2:	0022      	movs	r2, r4
 80075d4:	0021      	movs	r1, r4
 80075d6:	0038      	movs	r0, r7
 80075d8:	f7ff ff04 	bl	80073e4 <__multiply>
 80075dc:	2300      	movs	r3, #0
 80075de:	6020      	str	r0, [r4, #0]
 80075e0:	6003      	str	r3, [r0, #0]
 80075e2:	0004      	movs	r4, r0
 80075e4:	e7e2      	b.n	80075ac <__pow5mult+0x68>
 80075e6:	0030      	movs	r0, r6
 80075e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075ea:	46c0      	nop			; (mov r8, r8)
 80075ec:	08008b38 	.word	0x08008b38
 80075f0:	08008969 	.word	0x08008969
 80075f4:	080089ec 	.word	0x080089ec
 80075f8:	00000271 	.word	0x00000271

080075fc <__lshift>:
 80075fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075fe:	000c      	movs	r4, r1
 8007600:	0017      	movs	r7, r2
 8007602:	6923      	ldr	r3, [r4, #16]
 8007604:	1155      	asrs	r5, r2, #5
 8007606:	b087      	sub	sp, #28
 8007608:	18eb      	adds	r3, r5, r3
 800760a:	9302      	str	r3, [sp, #8]
 800760c:	3301      	adds	r3, #1
 800760e:	9301      	str	r3, [sp, #4]
 8007610:	6849      	ldr	r1, [r1, #4]
 8007612:	68a3      	ldr	r3, [r4, #8]
 8007614:	9004      	str	r0, [sp, #16]
 8007616:	9a01      	ldr	r2, [sp, #4]
 8007618:	4293      	cmp	r3, r2
 800761a:	db10      	blt.n	800763e <__lshift+0x42>
 800761c:	9804      	ldr	r0, [sp, #16]
 800761e:	f7ff fdd7 	bl	80071d0 <_Balloc>
 8007622:	2300      	movs	r3, #0
 8007624:	0002      	movs	r2, r0
 8007626:	0006      	movs	r6, r0
 8007628:	0019      	movs	r1, r3
 800762a:	3214      	adds	r2, #20
 800762c:	4298      	cmp	r0, r3
 800762e:	d10c      	bne.n	800764a <__lshift+0x4e>
 8007630:	21da      	movs	r1, #218	; 0xda
 8007632:	0002      	movs	r2, r0
 8007634:	4b26      	ldr	r3, [pc, #152]	; (80076d0 <__lshift+0xd4>)
 8007636:	4827      	ldr	r0, [pc, #156]	; (80076d4 <__lshift+0xd8>)
 8007638:	31ff      	adds	r1, #255	; 0xff
 800763a:	f000 faf3 	bl	8007c24 <__assert_func>
 800763e:	3101      	adds	r1, #1
 8007640:	005b      	lsls	r3, r3, #1
 8007642:	e7e8      	b.n	8007616 <__lshift+0x1a>
 8007644:	0098      	lsls	r0, r3, #2
 8007646:	5011      	str	r1, [r2, r0]
 8007648:	3301      	adds	r3, #1
 800764a:	42ab      	cmp	r3, r5
 800764c:	dbfa      	blt.n	8007644 <__lshift+0x48>
 800764e:	43eb      	mvns	r3, r5
 8007650:	17db      	asrs	r3, r3, #31
 8007652:	401d      	ands	r5, r3
 8007654:	211f      	movs	r1, #31
 8007656:	0023      	movs	r3, r4
 8007658:	0038      	movs	r0, r7
 800765a:	00ad      	lsls	r5, r5, #2
 800765c:	1955      	adds	r5, r2, r5
 800765e:	6922      	ldr	r2, [r4, #16]
 8007660:	3314      	adds	r3, #20
 8007662:	0092      	lsls	r2, r2, #2
 8007664:	4008      	ands	r0, r1
 8007666:	4684      	mov	ip, r0
 8007668:	189a      	adds	r2, r3, r2
 800766a:	420f      	tst	r7, r1
 800766c:	d02a      	beq.n	80076c4 <__lshift+0xc8>
 800766e:	3101      	adds	r1, #1
 8007670:	1a09      	subs	r1, r1, r0
 8007672:	9105      	str	r1, [sp, #20]
 8007674:	2100      	movs	r1, #0
 8007676:	9503      	str	r5, [sp, #12]
 8007678:	4667      	mov	r7, ip
 800767a:	6818      	ldr	r0, [r3, #0]
 800767c:	40b8      	lsls	r0, r7
 800767e:	4301      	orrs	r1, r0
 8007680:	9803      	ldr	r0, [sp, #12]
 8007682:	c002      	stmia	r0!, {r1}
 8007684:	cb02      	ldmia	r3!, {r1}
 8007686:	9003      	str	r0, [sp, #12]
 8007688:	9805      	ldr	r0, [sp, #20]
 800768a:	40c1      	lsrs	r1, r0
 800768c:	429a      	cmp	r2, r3
 800768e:	d8f3      	bhi.n	8007678 <__lshift+0x7c>
 8007690:	0020      	movs	r0, r4
 8007692:	3015      	adds	r0, #21
 8007694:	2304      	movs	r3, #4
 8007696:	4282      	cmp	r2, r0
 8007698:	d304      	bcc.n	80076a4 <__lshift+0xa8>
 800769a:	1b13      	subs	r3, r2, r4
 800769c:	3b15      	subs	r3, #21
 800769e:	089b      	lsrs	r3, r3, #2
 80076a0:	3301      	adds	r3, #1
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	50e9      	str	r1, [r5, r3]
 80076a6:	2900      	cmp	r1, #0
 80076a8:	d002      	beq.n	80076b0 <__lshift+0xb4>
 80076aa:	9b02      	ldr	r3, [sp, #8]
 80076ac:	3302      	adds	r3, #2
 80076ae:	9301      	str	r3, [sp, #4]
 80076b0:	9b01      	ldr	r3, [sp, #4]
 80076b2:	9804      	ldr	r0, [sp, #16]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	0021      	movs	r1, r4
 80076b8:	6133      	str	r3, [r6, #16]
 80076ba:	f7ff fdcd 	bl	8007258 <_Bfree>
 80076be:	0030      	movs	r0, r6
 80076c0:	b007      	add	sp, #28
 80076c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c4:	cb02      	ldmia	r3!, {r1}
 80076c6:	c502      	stmia	r5!, {r1}
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d8fb      	bhi.n	80076c4 <__lshift+0xc8>
 80076cc:	e7f0      	b.n	80076b0 <__lshift+0xb4>
 80076ce:	46c0      	nop			; (mov r8, r8)
 80076d0:	080089db 	.word	0x080089db
 80076d4:	080089ec 	.word	0x080089ec

080076d8 <__mcmp>:
 80076d8:	6902      	ldr	r2, [r0, #16]
 80076da:	690b      	ldr	r3, [r1, #16]
 80076dc:	b530      	push	{r4, r5, lr}
 80076de:	0004      	movs	r4, r0
 80076e0:	1ad0      	subs	r0, r2, r3
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d10d      	bne.n	8007702 <__mcmp+0x2a>
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	3414      	adds	r4, #20
 80076ea:	3114      	adds	r1, #20
 80076ec:	18e2      	adds	r2, r4, r3
 80076ee:	18c9      	adds	r1, r1, r3
 80076f0:	3a04      	subs	r2, #4
 80076f2:	3904      	subs	r1, #4
 80076f4:	6815      	ldr	r5, [r2, #0]
 80076f6:	680b      	ldr	r3, [r1, #0]
 80076f8:	429d      	cmp	r5, r3
 80076fa:	d003      	beq.n	8007704 <__mcmp+0x2c>
 80076fc:	2001      	movs	r0, #1
 80076fe:	429d      	cmp	r5, r3
 8007700:	d303      	bcc.n	800770a <__mcmp+0x32>
 8007702:	bd30      	pop	{r4, r5, pc}
 8007704:	4294      	cmp	r4, r2
 8007706:	d3f3      	bcc.n	80076f0 <__mcmp+0x18>
 8007708:	e7fb      	b.n	8007702 <__mcmp+0x2a>
 800770a:	4240      	negs	r0, r0
 800770c:	e7f9      	b.n	8007702 <__mcmp+0x2a>
	...

08007710 <__mdiff>:
 8007710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007712:	000e      	movs	r6, r1
 8007714:	0007      	movs	r7, r0
 8007716:	0011      	movs	r1, r2
 8007718:	0030      	movs	r0, r6
 800771a:	b087      	sub	sp, #28
 800771c:	0014      	movs	r4, r2
 800771e:	f7ff ffdb 	bl	80076d8 <__mcmp>
 8007722:	1e05      	subs	r5, r0, #0
 8007724:	d110      	bne.n	8007748 <__mdiff+0x38>
 8007726:	0001      	movs	r1, r0
 8007728:	0038      	movs	r0, r7
 800772a:	f7ff fd51 	bl	80071d0 <_Balloc>
 800772e:	1e02      	subs	r2, r0, #0
 8007730:	d104      	bne.n	800773c <__mdiff+0x2c>
 8007732:	4b40      	ldr	r3, [pc, #256]	; (8007834 <__mdiff+0x124>)
 8007734:	4940      	ldr	r1, [pc, #256]	; (8007838 <__mdiff+0x128>)
 8007736:	4841      	ldr	r0, [pc, #260]	; (800783c <__mdiff+0x12c>)
 8007738:	f000 fa74 	bl	8007c24 <__assert_func>
 800773c:	2301      	movs	r3, #1
 800773e:	6145      	str	r5, [r0, #20]
 8007740:	6103      	str	r3, [r0, #16]
 8007742:	0010      	movs	r0, r2
 8007744:	b007      	add	sp, #28
 8007746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007748:	2301      	movs	r3, #1
 800774a:	9301      	str	r3, [sp, #4]
 800774c:	2800      	cmp	r0, #0
 800774e:	db04      	blt.n	800775a <__mdiff+0x4a>
 8007750:	0023      	movs	r3, r4
 8007752:	0034      	movs	r4, r6
 8007754:	001e      	movs	r6, r3
 8007756:	2300      	movs	r3, #0
 8007758:	9301      	str	r3, [sp, #4]
 800775a:	0038      	movs	r0, r7
 800775c:	6861      	ldr	r1, [r4, #4]
 800775e:	f7ff fd37 	bl	80071d0 <_Balloc>
 8007762:	1e02      	subs	r2, r0, #0
 8007764:	d103      	bne.n	800776e <__mdiff+0x5e>
 8007766:	2190      	movs	r1, #144	; 0x90
 8007768:	4b32      	ldr	r3, [pc, #200]	; (8007834 <__mdiff+0x124>)
 800776a:	0089      	lsls	r1, r1, #2
 800776c:	e7e3      	b.n	8007736 <__mdiff+0x26>
 800776e:	9b01      	ldr	r3, [sp, #4]
 8007770:	2700      	movs	r7, #0
 8007772:	60c3      	str	r3, [r0, #12]
 8007774:	6920      	ldr	r0, [r4, #16]
 8007776:	3414      	adds	r4, #20
 8007778:	9401      	str	r4, [sp, #4]
 800777a:	9b01      	ldr	r3, [sp, #4]
 800777c:	0084      	lsls	r4, r0, #2
 800777e:	191b      	adds	r3, r3, r4
 8007780:	0034      	movs	r4, r6
 8007782:	9302      	str	r3, [sp, #8]
 8007784:	6933      	ldr	r3, [r6, #16]
 8007786:	3414      	adds	r4, #20
 8007788:	0099      	lsls	r1, r3, #2
 800778a:	1863      	adds	r3, r4, r1
 800778c:	9303      	str	r3, [sp, #12]
 800778e:	0013      	movs	r3, r2
 8007790:	3314      	adds	r3, #20
 8007792:	469c      	mov	ip, r3
 8007794:	9305      	str	r3, [sp, #20]
 8007796:	9b01      	ldr	r3, [sp, #4]
 8007798:	9304      	str	r3, [sp, #16]
 800779a:	9b04      	ldr	r3, [sp, #16]
 800779c:	cc02      	ldmia	r4!, {r1}
 800779e:	cb20      	ldmia	r3!, {r5}
 80077a0:	9304      	str	r3, [sp, #16]
 80077a2:	b2ab      	uxth	r3, r5
 80077a4:	19df      	adds	r7, r3, r7
 80077a6:	b28b      	uxth	r3, r1
 80077a8:	1afb      	subs	r3, r7, r3
 80077aa:	0c09      	lsrs	r1, r1, #16
 80077ac:	0c2d      	lsrs	r5, r5, #16
 80077ae:	1a6d      	subs	r5, r5, r1
 80077b0:	1419      	asrs	r1, r3, #16
 80077b2:	186d      	adds	r5, r5, r1
 80077b4:	4661      	mov	r1, ip
 80077b6:	142f      	asrs	r7, r5, #16
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	042d      	lsls	r5, r5, #16
 80077bc:	432b      	orrs	r3, r5
 80077be:	c108      	stmia	r1!, {r3}
 80077c0:	9b03      	ldr	r3, [sp, #12]
 80077c2:	468c      	mov	ip, r1
 80077c4:	42a3      	cmp	r3, r4
 80077c6:	d8e8      	bhi.n	800779a <__mdiff+0x8a>
 80077c8:	0031      	movs	r1, r6
 80077ca:	9c03      	ldr	r4, [sp, #12]
 80077cc:	3115      	adds	r1, #21
 80077ce:	2304      	movs	r3, #4
 80077d0:	428c      	cmp	r4, r1
 80077d2:	d304      	bcc.n	80077de <__mdiff+0xce>
 80077d4:	1ba3      	subs	r3, r4, r6
 80077d6:	3b15      	subs	r3, #21
 80077d8:	089b      	lsrs	r3, r3, #2
 80077da:	3301      	adds	r3, #1
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	9901      	ldr	r1, [sp, #4]
 80077e0:	18cc      	adds	r4, r1, r3
 80077e2:	9905      	ldr	r1, [sp, #20]
 80077e4:	0026      	movs	r6, r4
 80077e6:	18cb      	adds	r3, r1, r3
 80077e8:	469c      	mov	ip, r3
 80077ea:	9902      	ldr	r1, [sp, #8]
 80077ec:	428e      	cmp	r6, r1
 80077ee:	d310      	bcc.n	8007812 <__mdiff+0x102>
 80077f0:	9e02      	ldr	r6, [sp, #8]
 80077f2:	1ee1      	subs	r1, r4, #3
 80077f4:	2500      	movs	r5, #0
 80077f6:	428e      	cmp	r6, r1
 80077f8:	d304      	bcc.n	8007804 <__mdiff+0xf4>
 80077fa:	0031      	movs	r1, r6
 80077fc:	3103      	adds	r1, #3
 80077fe:	1b0c      	subs	r4, r1, r4
 8007800:	08a4      	lsrs	r4, r4, #2
 8007802:	00a5      	lsls	r5, r4, #2
 8007804:	195b      	adds	r3, r3, r5
 8007806:	3b04      	subs	r3, #4
 8007808:	6819      	ldr	r1, [r3, #0]
 800780a:	2900      	cmp	r1, #0
 800780c:	d00f      	beq.n	800782e <__mdiff+0x11e>
 800780e:	6110      	str	r0, [r2, #16]
 8007810:	e797      	b.n	8007742 <__mdiff+0x32>
 8007812:	ce02      	ldmia	r6!, {r1}
 8007814:	b28d      	uxth	r5, r1
 8007816:	19ed      	adds	r5, r5, r7
 8007818:	0c0f      	lsrs	r7, r1, #16
 800781a:	1429      	asrs	r1, r5, #16
 800781c:	1879      	adds	r1, r7, r1
 800781e:	140f      	asrs	r7, r1, #16
 8007820:	b2ad      	uxth	r5, r5
 8007822:	0409      	lsls	r1, r1, #16
 8007824:	430d      	orrs	r5, r1
 8007826:	4661      	mov	r1, ip
 8007828:	c120      	stmia	r1!, {r5}
 800782a:	468c      	mov	ip, r1
 800782c:	e7dd      	b.n	80077ea <__mdiff+0xda>
 800782e:	3801      	subs	r0, #1
 8007830:	e7e9      	b.n	8007806 <__mdiff+0xf6>
 8007832:	46c0      	nop			; (mov r8, r8)
 8007834:	080089db 	.word	0x080089db
 8007838:	00000232 	.word	0x00000232
 800783c:	080089ec 	.word	0x080089ec

08007840 <__d2b>:
 8007840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007842:	2101      	movs	r1, #1
 8007844:	0014      	movs	r4, r2
 8007846:	001e      	movs	r6, r3
 8007848:	9f08      	ldr	r7, [sp, #32]
 800784a:	f7ff fcc1 	bl	80071d0 <_Balloc>
 800784e:	1e05      	subs	r5, r0, #0
 8007850:	d105      	bne.n	800785e <__d2b+0x1e>
 8007852:	0002      	movs	r2, r0
 8007854:	4b26      	ldr	r3, [pc, #152]	; (80078f0 <__d2b+0xb0>)
 8007856:	4927      	ldr	r1, [pc, #156]	; (80078f4 <__d2b+0xb4>)
 8007858:	4827      	ldr	r0, [pc, #156]	; (80078f8 <__d2b+0xb8>)
 800785a:	f000 f9e3 	bl	8007c24 <__assert_func>
 800785e:	0333      	lsls	r3, r6, #12
 8007860:	0076      	lsls	r6, r6, #1
 8007862:	0b1b      	lsrs	r3, r3, #12
 8007864:	0d76      	lsrs	r6, r6, #21
 8007866:	d124      	bne.n	80078b2 <__d2b+0x72>
 8007868:	9301      	str	r3, [sp, #4]
 800786a:	2c00      	cmp	r4, #0
 800786c:	d027      	beq.n	80078be <__d2b+0x7e>
 800786e:	4668      	mov	r0, sp
 8007870:	9400      	str	r4, [sp, #0]
 8007872:	f7ff fd73 	bl	800735c <__lo0bits>
 8007876:	9c00      	ldr	r4, [sp, #0]
 8007878:	2800      	cmp	r0, #0
 800787a:	d01e      	beq.n	80078ba <__d2b+0x7a>
 800787c:	9b01      	ldr	r3, [sp, #4]
 800787e:	2120      	movs	r1, #32
 8007880:	001a      	movs	r2, r3
 8007882:	1a09      	subs	r1, r1, r0
 8007884:	408a      	lsls	r2, r1
 8007886:	40c3      	lsrs	r3, r0
 8007888:	4322      	orrs	r2, r4
 800788a:	616a      	str	r2, [r5, #20]
 800788c:	9301      	str	r3, [sp, #4]
 800788e:	9c01      	ldr	r4, [sp, #4]
 8007890:	61ac      	str	r4, [r5, #24]
 8007892:	1e63      	subs	r3, r4, #1
 8007894:	419c      	sbcs	r4, r3
 8007896:	3401      	adds	r4, #1
 8007898:	612c      	str	r4, [r5, #16]
 800789a:	2e00      	cmp	r6, #0
 800789c:	d018      	beq.n	80078d0 <__d2b+0x90>
 800789e:	4b17      	ldr	r3, [pc, #92]	; (80078fc <__d2b+0xbc>)
 80078a0:	18f6      	adds	r6, r6, r3
 80078a2:	2335      	movs	r3, #53	; 0x35
 80078a4:	1836      	adds	r6, r6, r0
 80078a6:	1a18      	subs	r0, r3, r0
 80078a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078aa:	603e      	str	r6, [r7, #0]
 80078ac:	6018      	str	r0, [r3, #0]
 80078ae:	0028      	movs	r0, r5
 80078b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80078b2:	2280      	movs	r2, #128	; 0x80
 80078b4:	0352      	lsls	r2, r2, #13
 80078b6:	4313      	orrs	r3, r2
 80078b8:	e7d6      	b.n	8007868 <__d2b+0x28>
 80078ba:	616c      	str	r4, [r5, #20]
 80078bc:	e7e7      	b.n	800788e <__d2b+0x4e>
 80078be:	a801      	add	r0, sp, #4
 80078c0:	f7ff fd4c 	bl	800735c <__lo0bits>
 80078c4:	2401      	movs	r4, #1
 80078c6:	9b01      	ldr	r3, [sp, #4]
 80078c8:	612c      	str	r4, [r5, #16]
 80078ca:	616b      	str	r3, [r5, #20]
 80078cc:	3020      	adds	r0, #32
 80078ce:	e7e4      	b.n	800789a <__d2b+0x5a>
 80078d0:	4b0b      	ldr	r3, [pc, #44]	; (8007900 <__d2b+0xc0>)
 80078d2:	18c0      	adds	r0, r0, r3
 80078d4:	4b0b      	ldr	r3, [pc, #44]	; (8007904 <__d2b+0xc4>)
 80078d6:	6038      	str	r0, [r7, #0]
 80078d8:	18e3      	adds	r3, r4, r3
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	18eb      	adds	r3, r5, r3
 80078de:	6958      	ldr	r0, [r3, #20]
 80078e0:	f7ff fd22 	bl	8007328 <__hi0bits>
 80078e4:	0164      	lsls	r4, r4, #5
 80078e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e8:	1a24      	subs	r4, r4, r0
 80078ea:	601c      	str	r4, [r3, #0]
 80078ec:	e7df      	b.n	80078ae <__d2b+0x6e>
 80078ee:	46c0      	nop			; (mov r8, r8)
 80078f0:	080089db 	.word	0x080089db
 80078f4:	0000030a 	.word	0x0000030a
 80078f8:	080089ec 	.word	0x080089ec
 80078fc:	fffffbcd 	.word	0xfffffbcd
 8007900:	fffffbce 	.word	0xfffffbce
 8007904:	3fffffff 	.word	0x3fffffff

08007908 <_calloc_r>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	0c13      	lsrs	r3, r2, #16
 800790c:	0c0d      	lsrs	r5, r1, #16
 800790e:	d11e      	bne.n	800794e <_calloc_r+0x46>
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10c      	bne.n	800792e <_calloc_r+0x26>
 8007914:	b289      	uxth	r1, r1
 8007916:	b294      	uxth	r4, r2
 8007918:	434c      	muls	r4, r1
 800791a:	0021      	movs	r1, r4
 800791c:	f7fe f874 	bl	8005a08 <_malloc_r>
 8007920:	1e05      	subs	r5, r0, #0
 8007922:	d01b      	beq.n	800795c <_calloc_r+0x54>
 8007924:	0022      	movs	r2, r4
 8007926:	2100      	movs	r1, #0
 8007928:	f7fd fffa 	bl	8005920 <memset>
 800792c:	e016      	b.n	800795c <_calloc_r+0x54>
 800792e:	1c1d      	adds	r5, r3, #0
 8007930:	1c0b      	adds	r3, r1, #0
 8007932:	b292      	uxth	r2, r2
 8007934:	b289      	uxth	r1, r1
 8007936:	b29c      	uxth	r4, r3
 8007938:	4351      	muls	r1, r2
 800793a:	b2ab      	uxth	r3, r5
 800793c:	4363      	muls	r3, r4
 800793e:	0c0c      	lsrs	r4, r1, #16
 8007940:	191c      	adds	r4, r3, r4
 8007942:	0c22      	lsrs	r2, r4, #16
 8007944:	d107      	bne.n	8007956 <_calloc_r+0x4e>
 8007946:	0424      	lsls	r4, r4, #16
 8007948:	b289      	uxth	r1, r1
 800794a:	430c      	orrs	r4, r1
 800794c:	e7e5      	b.n	800791a <_calloc_r+0x12>
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <_calloc_r+0x4e>
 8007952:	1c13      	adds	r3, r2, #0
 8007954:	e7ed      	b.n	8007932 <_calloc_r+0x2a>
 8007956:	230c      	movs	r3, #12
 8007958:	2500      	movs	r5, #0
 800795a:	6003      	str	r3, [r0, #0]
 800795c:	0028      	movs	r0, r5
 800795e:	bd70      	pop	{r4, r5, r6, pc}

08007960 <__ssputs_r>:
 8007960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007962:	688e      	ldr	r6, [r1, #8]
 8007964:	b085      	sub	sp, #20
 8007966:	0007      	movs	r7, r0
 8007968:	000c      	movs	r4, r1
 800796a:	9203      	str	r2, [sp, #12]
 800796c:	9301      	str	r3, [sp, #4]
 800796e:	429e      	cmp	r6, r3
 8007970:	d83c      	bhi.n	80079ec <__ssputs_r+0x8c>
 8007972:	2390      	movs	r3, #144	; 0x90
 8007974:	898a      	ldrh	r2, [r1, #12]
 8007976:	00db      	lsls	r3, r3, #3
 8007978:	421a      	tst	r2, r3
 800797a:	d034      	beq.n	80079e6 <__ssputs_r+0x86>
 800797c:	6909      	ldr	r1, [r1, #16]
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	6960      	ldr	r0, [r4, #20]
 8007982:	1a5b      	subs	r3, r3, r1
 8007984:	9302      	str	r3, [sp, #8]
 8007986:	2303      	movs	r3, #3
 8007988:	4343      	muls	r3, r0
 800798a:	0fdd      	lsrs	r5, r3, #31
 800798c:	18ed      	adds	r5, r5, r3
 800798e:	9b01      	ldr	r3, [sp, #4]
 8007990:	9802      	ldr	r0, [sp, #8]
 8007992:	3301      	adds	r3, #1
 8007994:	181b      	adds	r3, r3, r0
 8007996:	106d      	asrs	r5, r5, #1
 8007998:	42ab      	cmp	r3, r5
 800799a:	d900      	bls.n	800799e <__ssputs_r+0x3e>
 800799c:	001d      	movs	r5, r3
 800799e:	0553      	lsls	r3, r2, #21
 80079a0:	d532      	bpl.n	8007a08 <__ssputs_r+0xa8>
 80079a2:	0029      	movs	r1, r5
 80079a4:	0038      	movs	r0, r7
 80079a6:	f7fe f82f 	bl	8005a08 <_malloc_r>
 80079aa:	1e06      	subs	r6, r0, #0
 80079ac:	d109      	bne.n	80079c2 <__ssputs_r+0x62>
 80079ae:	230c      	movs	r3, #12
 80079b0:	603b      	str	r3, [r7, #0]
 80079b2:	2340      	movs	r3, #64	; 0x40
 80079b4:	2001      	movs	r0, #1
 80079b6:	89a2      	ldrh	r2, [r4, #12]
 80079b8:	4240      	negs	r0, r0
 80079ba:	4313      	orrs	r3, r2
 80079bc:	81a3      	strh	r3, [r4, #12]
 80079be:	b005      	add	sp, #20
 80079c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079c2:	9a02      	ldr	r2, [sp, #8]
 80079c4:	6921      	ldr	r1, [r4, #16]
 80079c6:	f7ff fbea 	bl	800719e <memcpy>
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	4a14      	ldr	r2, [pc, #80]	; (8007a20 <__ssputs_r+0xc0>)
 80079ce:	401a      	ands	r2, r3
 80079d0:	2380      	movs	r3, #128	; 0x80
 80079d2:	4313      	orrs	r3, r2
 80079d4:	81a3      	strh	r3, [r4, #12]
 80079d6:	9b02      	ldr	r3, [sp, #8]
 80079d8:	6126      	str	r6, [r4, #16]
 80079da:	18f6      	adds	r6, r6, r3
 80079dc:	6026      	str	r6, [r4, #0]
 80079de:	6165      	str	r5, [r4, #20]
 80079e0:	9e01      	ldr	r6, [sp, #4]
 80079e2:	1aed      	subs	r5, r5, r3
 80079e4:	60a5      	str	r5, [r4, #8]
 80079e6:	9b01      	ldr	r3, [sp, #4]
 80079e8:	429e      	cmp	r6, r3
 80079ea:	d900      	bls.n	80079ee <__ssputs_r+0x8e>
 80079ec:	9e01      	ldr	r6, [sp, #4]
 80079ee:	0032      	movs	r2, r6
 80079f0:	9903      	ldr	r1, [sp, #12]
 80079f2:	6820      	ldr	r0, [r4, #0]
 80079f4:	f000 f959 	bl	8007caa <memmove>
 80079f8:	68a3      	ldr	r3, [r4, #8]
 80079fa:	2000      	movs	r0, #0
 80079fc:	1b9b      	subs	r3, r3, r6
 80079fe:	60a3      	str	r3, [r4, #8]
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	199e      	adds	r6, r3, r6
 8007a04:	6026      	str	r6, [r4, #0]
 8007a06:	e7da      	b.n	80079be <__ssputs_r+0x5e>
 8007a08:	002a      	movs	r2, r5
 8007a0a:	0038      	movs	r0, r7
 8007a0c:	f000 f960 	bl	8007cd0 <_realloc_r>
 8007a10:	1e06      	subs	r6, r0, #0
 8007a12:	d1e0      	bne.n	80079d6 <__ssputs_r+0x76>
 8007a14:	0038      	movs	r0, r7
 8007a16:	6921      	ldr	r1, [r4, #16]
 8007a18:	f7fd ff8a 	bl	8005930 <_free_r>
 8007a1c:	e7c7      	b.n	80079ae <__ssputs_r+0x4e>
 8007a1e:	46c0      	nop			; (mov r8, r8)
 8007a20:	fffffb7f 	.word	0xfffffb7f

08007a24 <_svfiprintf_r>:
 8007a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a26:	b0a1      	sub	sp, #132	; 0x84
 8007a28:	9003      	str	r0, [sp, #12]
 8007a2a:	001d      	movs	r5, r3
 8007a2c:	898b      	ldrh	r3, [r1, #12]
 8007a2e:	000f      	movs	r7, r1
 8007a30:	0016      	movs	r6, r2
 8007a32:	061b      	lsls	r3, r3, #24
 8007a34:	d511      	bpl.n	8007a5a <_svfiprintf_r+0x36>
 8007a36:	690b      	ldr	r3, [r1, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10e      	bne.n	8007a5a <_svfiprintf_r+0x36>
 8007a3c:	2140      	movs	r1, #64	; 0x40
 8007a3e:	f7fd ffe3 	bl	8005a08 <_malloc_r>
 8007a42:	6038      	str	r0, [r7, #0]
 8007a44:	6138      	str	r0, [r7, #16]
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d105      	bne.n	8007a56 <_svfiprintf_r+0x32>
 8007a4a:	230c      	movs	r3, #12
 8007a4c:	9a03      	ldr	r2, [sp, #12]
 8007a4e:	3801      	subs	r0, #1
 8007a50:	6013      	str	r3, [r2, #0]
 8007a52:	b021      	add	sp, #132	; 0x84
 8007a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a56:	2340      	movs	r3, #64	; 0x40
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	ac08      	add	r4, sp, #32
 8007a5e:	6163      	str	r3, [r4, #20]
 8007a60:	3320      	adds	r3, #32
 8007a62:	7663      	strb	r3, [r4, #25]
 8007a64:	3310      	adds	r3, #16
 8007a66:	76a3      	strb	r3, [r4, #26]
 8007a68:	9507      	str	r5, [sp, #28]
 8007a6a:	0035      	movs	r5, r6
 8007a6c:	782b      	ldrb	r3, [r5, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <_svfiprintf_r+0x52>
 8007a72:	2b25      	cmp	r3, #37	; 0x25
 8007a74:	d147      	bne.n	8007b06 <_svfiprintf_r+0xe2>
 8007a76:	1bab      	subs	r3, r5, r6
 8007a78:	9305      	str	r3, [sp, #20]
 8007a7a:	42b5      	cmp	r5, r6
 8007a7c:	d00c      	beq.n	8007a98 <_svfiprintf_r+0x74>
 8007a7e:	0032      	movs	r2, r6
 8007a80:	0039      	movs	r1, r7
 8007a82:	9803      	ldr	r0, [sp, #12]
 8007a84:	f7ff ff6c 	bl	8007960 <__ssputs_r>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	d100      	bne.n	8007a8e <_svfiprintf_r+0x6a>
 8007a8c:	e0ae      	b.n	8007bec <_svfiprintf_r+0x1c8>
 8007a8e:	6962      	ldr	r2, [r4, #20]
 8007a90:	9b05      	ldr	r3, [sp, #20]
 8007a92:	4694      	mov	ip, r2
 8007a94:	4463      	add	r3, ip
 8007a96:	6163      	str	r3, [r4, #20]
 8007a98:	782b      	ldrb	r3, [r5, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d100      	bne.n	8007aa0 <_svfiprintf_r+0x7c>
 8007a9e:	e0a5      	b.n	8007bec <_svfiprintf_r+0x1c8>
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	4252      	negs	r2, r2
 8007aa6:	6062      	str	r2, [r4, #4]
 8007aa8:	a904      	add	r1, sp, #16
 8007aaa:	3254      	adds	r2, #84	; 0x54
 8007aac:	1852      	adds	r2, r2, r1
 8007aae:	1c6e      	adds	r6, r5, #1
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	60e3      	str	r3, [r4, #12]
 8007ab4:	60a3      	str	r3, [r4, #8]
 8007ab6:	7013      	strb	r3, [r2, #0]
 8007ab8:	65a3      	str	r3, [r4, #88]	; 0x58
 8007aba:	2205      	movs	r2, #5
 8007abc:	7831      	ldrb	r1, [r6, #0]
 8007abe:	4854      	ldr	r0, [pc, #336]	; (8007c10 <_svfiprintf_r+0x1ec>)
 8007ac0:	f7ff fb62 	bl	8007188 <memchr>
 8007ac4:	1c75      	adds	r5, r6, #1
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d11f      	bne.n	8007b0a <_svfiprintf_r+0xe6>
 8007aca:	6822      	ldr	r2, [r4, #0]
 8007acc:	06d3      	lsls	r3, r2, #27
 8007ace:	d504      	bpl.n	8007ada <_svfiprintf_r+0xb6>
 8007ad0:	2353      	movs	r3, #83	; 0x53
 8007ad2:	a904      	add	r1, sp, #16
 8007ad4:	185b      	adds	r3, r3, r1
 8007ad6:	2120      	movs	r1, #32
 8007ad8:	7019      	strb	r1, [r3, #0]
 8007ada:	0713      	lsls	r3, r2, #28
 8007adc:	d504      	bpl.n	8007ae8 <_svfiprintf_r+0xc4>
 8007ade:	2353      	movs	r3, #83	; 0x53
 8007ae0:	a904      	add	r1, sp, #16
 8007ae2:	185b      	adds	r3, r3, r1
 8007ae4:	212b      	movs	r1, #43	; 0x2b
 8007ae6:	7019      	strb	r1, [r3, #0]
 8007ae8:	7833      	ldrb	r3, [r6, #0]
 8007aea:	2b2a      	cmp	r3, #42	; 0x2a
 8007aec:	d016      	beq.n	8007b1c <_svfiprintf_r+0xf8>
 8007aee:	0035      	movs	r5, r6
 8007af0:	2100      	movs	r1, #0
 8007af2:	200a      	movs	r0, #10
 8007af4:	68e3      	ldr	r3, [r4, #12]
 8007af6:	782a      	ldrb	r2, [r5, #0]
 8007af8:	1c6e      	adds	r6, r5, #1
 8007afa:	3a30      	subs	r2, #48	; 0x30
 8007afc:	2a09      	cmp	r2, #9
 8007afe:	d94e      	bls.n	8007b9e <_svfiprintf_r+0x17a>
 8007b00:	2900      	cmp	r1, #0
 8007b02:	d111      	bne.n	8007b28 <_svfiprintf_r+0x104>
 8007b04:	e017      	b.n	8007b36 <_svfiprintf_r+0x112>
 8007b06:	3501      	adds	r5, #1
 8007b08:	e7b0      	b.n	8007a6c <_svfiprintf_r+0x48>
 8007b0a:	4b41      	ldr	r3, [pc, #260]	; (8007c10 <_svfiprintf_r+0x1ec>)
 8007b0c:	6822      	ldr	r2, [r4, #0]
 8007b0e:	1ac0      	subs	r0, r0, r3
 8007b10:	2301      	movs	r3, #1
 8007b12:	4083      	lsls	r3, r0
 8007b14:	4313      	orrs	r3, r2
 8007b16:	002e      	movs	r6, r5
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	e7ce      	b.n	8007aba <_svfiprintf_r+0x96>
 8007b1c:	9b07      	ldr	r3, [sp, #28]
 8007b1e:	1d19      	adds	r1, r3, #4
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	9107      	str	r1, [sp, #28]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	db01      	blt.n	8007b2c <_svfiprintf_r+0x108>
 8007b28:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b2a:	e004      	b.n	8007b36 <_svfiprintf_r+0x112>
 8007b2c:	425b      	negs	r3, r3
 8007b2e:	60e3      	str	r3, [r4, #12]
 8007b30:	2302      	movs	r3, #2
 8007b32:	4313      	orrs	r3, r2
 8007b34:	6023      	str	r3, [r4, #0]
 8007b36:	782b      	ldrb	r3, [r5, #0]
 8007b38:	2b2e      	cmp	r3, #46	; 0x2e
 8007b3a:	d10a      	bne.n	8007b52 <_svfiprintf_r+0x12e>
 8007b3c:	786b      	ldrb	r3, [r5, #1]
 8007b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b40:	d135      	bne.n	8007bae <_svfiprintf_r+0x18a>
 8007b42:	9b07      	ldr	r3, [sp, #28]
 8007b44:	3502      	adds	r5, #2
 8007b46:	1d1a      	adds	r2, r3, #4
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	9207      	str	r2, [sp, #28]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	db2b      	blt.n	8007ba8 <_svfiprintf_r+0x184>
 8007b50:	9309      	str	r3, [sp, #36]	; 0x24
 8007b52:	4e30      	ldr	r6, [pc, #192]	; (8007c14 <_svfiprintf_r+0x1f0>)
 8007b54:	2203      	movs	r2, #3
 8007b56:	0030      	movs	r0, r6
 8007b58:	7829      	ldrb	r1, [r5, #0]
 8007b5a:	f7ff fb15 	bl	8007188 <memchr>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d006      	beq.n	8007b70 <_svfiprintf_r+0x14c>
 8007b62:	2340      	movs	r3, #64	; 0x40
 8007b64:	1b80      	subs	r0, r0, r6
 8007b66:	4083      	lsls	r3, r0
 8007b68:	6822      	ldr	r2, [r4, #0]
 8007b6a:	3501      	adds	r5, #1
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	6023      	str	r3, [r4, #0]
 8007b70:	7829      	ldrb	r1, [r5, #0]
 8007b72:	2206      	movs	r2, #6
 8007b74:	4828      	ldr	r0, [pc, #160]	; (8007c18 <_svfiprintf_r+0x1f4>)
 8007b76:	1c6e      	adds	r6, r5, #1
 8007b78:	7621      	strb	r1, [r4, #24]
 8007b7a:	f7ff fb05 	bl	8007188 <memchr>
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	d03c      	beq.n	8007bfc <_svfiprintf_r+0x1d8>
 8007b82:	4b26      	ldr	r3, [pc, #152]	; (8007c1c <_svfiprintf_r+0x1f8>)
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d125      	bne.n	8007bd4 <_svfiprintf_r+0x1b0>
 8007b88:	2207      	movs	r2, #7
 8007b8a:	9b07      	ldr	r3, [sp, #28]
 8007b8c:	3307      	adds	r3, #7
 8007b8e:	4393      	bics	r3, r2
 8007b90:	3308      	adds	r3, #8
 8007b92:	9307      	str	r3, [sp, #28]
 8007b94:	6963      	ldr	r3, [r4, #20]
 8007b96:	9a04      	ldr	r2, [sp, #16]
 8007b98:	189b      	adds	r3, r3, r2
 8007b9a:	6163      	str	r3, [r4, #20]
 8007b9c:	e765      	b.n	8007a6a <_svfiprintf_r+0x46>
 8007b9e:	4343      	muls	r3, r0
 8007ba0:	0035      	movs	r5, r6
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	189b      	adds	r3, r3, r2
 8007ba6:	e7a6      	b.n	8007af6 <_svfiprintf_r+0xd2>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	425b      	negs	r3, r3
 8007bac:	e7d0      	b.n	8007b50 <_svfiprintf_r+0x12c>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	200a      	movs	r0, #10
 8007bb2:	001a      	movs	r2, r3
 8007bb4:	3501      	adds	r5, #1
 8007bb6:	6063      	str	r3, [r4, #4]
 8007bb8:	7829      	ldrb	r1, [r5, #0]
 8007bba:	1c6e      	adds	r6, r5, #1
 8007bbc:	3930      	subs	r1, #48	; 0x30
 8007bbe:	2909      	cmp	r1, #9
 8007bc0:	d903      	bls.n	8007bca <_svfiprintf_r+0x1a6>
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d0c5      	beq.n	8007b52 <_svfiprintf_r+0x12e>
 8007bc6:	9209      	str	r2, [sp, #36]	; 0x24
 8007bc8:	e7c3      	b.n	8007b52 <_svfiprintf_r+0x12e>
 8007bca:	4342      	muls	r2, r0
 8007bcc:	0035      	movs	r5, r6
 8007bce:	2301      	movs	r3, #1
 8007bd0:	1852      	adds	r2, r2, r1
 8007bd2:	e7f1      	b.n	8007bb8 <_svfiprintf_r+0x194>
 8007bd4:	ab07      	add	r3, sp, #28
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	003a      	movs	r2, r7
 8007bda:	0021      	movs	r1, r4
 8007bdc:	4b10      	ldr	r3, [pc, #64]	; (8007c20 <_svfiprintf_r+0x1fc>)
 8007bde:	9803      	ldr	r0, [sp, #12]
 8007be0:	f7fe f832 	bl	8005c48 <_printf_float>
 8007be4:	9004      	str	r0, [sp, #16]
 8007be6:	9b04      	ldr	r3, [sp, #16]
 8007be8:	3301      	adds	r3, #1
 8007bea:	d1d3      	bne.n	8007b94 <_svfiprintf_r+0x170>
 8007bec:	89bb      	ldrh	r3, [r7, #12]
 8007bee:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007bf0:	065b      	lsls	r3, r3, #25
 8007bf2:	d400      	bmi.n	8007bf6 <_svfiprintf_r+0x1d2>
 8007bf4:	e72d      	b.n	8007a52 <_svfiprintf_r+0x2e>
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	4240      	negs	r0, r0
 8007bfa:	e72a      	b.n	8007a52 <_svfiprintf_r+0x2e>
 8007bfc:	ab07      	add	r3, sp, #28
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	003a      	movs	r2, r7
 8007c02:	0021      	movs	r1, r4
 8007c04:	4b06      	ldr	r3, [pc, #24]	; (8007c20 <_svfiprintf_r+0x1fc>)
 8007c06:	9803      	ldr	r0, [sp, #12]
 8007c08:	f7fe fad0 	bl	80061ac <_printf_i>
 8007c0c:	e7ea      	b.n	8007be4 <_svfiprintf_r+0x1c0>
 8007c0e:	46c0      	nop			; (mov r8, r8)
 8007c10:	08008b44 	.word	0x08008b44
 8007c14:	08008b4a 	.word	0x08008b4a
 8007c18:	08008b4e 	.word	0x08008b4e
 8007c1c:	08005c49 	.word	0x08005c49
 8007c20:	08007961 	.word	0x08007961

08007c24 <__assert_func>:
 8007c24:	b530      	push	{r4, r5, lr}
 8007c26:	0014      	movs	r4, r2
 8007c28:	001a      	movs	r2, r3
 8007c2a:	4b09      	ldr	r3, [pc, #36]	; (8007c50 <__assert_func+0x2c>)
 8007c2c:	0005      	movs	r5, r0
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	b085      	sub	sp, #20
 8007c32:	68d8      	ldr	r0, [r3, #12]
 8007c34:	4b07      	ldr	r3, [pc, #28]	; (8007c54 <__assert_func+0x30>)
 8007c36:	2c00      	cmp	r4, #0
 8007c38:	d101      	bne.n	8007c3e <__assert_func+0x1a>
 8007c3a:	4b07      	ldr	r3, [pc, #28]	; (8007c58 <__assert_func+0x34>)
 8007c3c:	001c      	movs	r4, r3
 8007c3e:	9301      	str	r3, [sp, #4]
 8007c40:	9100      	str	r1, [sp, #0]
 8007c42:	002b      	movs	r3, r5
 8007c44:	4905      	ldr	r1, [pc, #20]	; (8007c5c <__assert_func+0x38>)
 8007c46:	9402      	str	r4, [sp, #8]
 8007c48:	f000 f80a 	bl	8007c60 <fiprintf>
 8007c4c:	f000 faac 	bl	80081a8 <abort>
 8007c50:	2000000c 	.word	0x2000000c
 8007c54:	08008b55 	.word	0x08008b55
 8007c58:	08008b90 	.word	0x08008b90
 8007c5c:	08008b62 	.word	0x08008b62

08007c60 <fiprintf>:
 8007c60:	b40e      	push	{r1, r2, r3}
 8007c62:	b503      	push	{r0, r1, lr}
 8007c64:	0001      	movs	r1, r0
 8007c66:	ab03      	add	r3, sp, #12
 8007c68:	4804      	ldr	r0, [pc, #16]	; (8007c7c <fiprintf+0x1c>)
 8007c6a:	cb04      	ldmia	r3!, {r2}
 8007c6c:	6800      	ldr	r0, [r0, #0]
 8007c6e:	9301      	str	r3, [sp, #4]
 8007c70:	f000 f884 	bl	8007d7c <_vfiprintf_r>
 8007c74:	b002      	add	sp, #8
 8007c76:	bc08      	pop	{r3}
 8007c78:	b003      	add	sp, #12
 8007c7a:	4718      	bx	r3
 8007c7c:	2000000c 	.word	0x2000000c

08007c80 <__retarget_lock_init_recursive>:
 8007c80:	4770      	bx	lr

08007c82 <__retarget_lock_acquire_recursive>:
 8007c82:	4770      	bx	lr

08007c84 <__retarget_lock_release_recursive>:
 8007c84:	4770      	bx	lr

08007c86 <__ascii_mbtowc>:
 8007c86:	b082      	sub	sp, #8
 8007c88:	2900      	cmp	r1, #0
 8007c8a:	d100      	bne.n	8007c8e <__ascii_mbtowc+0x8>
 8007c8c:	a901      	add	r1, sp, #4
 8007c8e:	1e10      	subs	r0, r2, #0
 8007c90:	d006      	beq.n	8007ca0 <__ascii_mbtowc+0x1a>
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d006      	beq.n	8007ca4 <__ascii_mbtowc+0x1e>
 8007c96:	7813      	ldrb	r3, [r2, #0]
 8007c98:	600b      	str	r3, [r1, #0]
 8007c9a:	7810      	ldrb	r0, [r2, #0]
 8007c9c:	1e43      	subs	r3, r0, #1
 8007c9e:	4198      	sbcs	r0, r3
 8007ca0:	b002      	add	sp, #8
 8007ca2:	4770      	bx	lr
 8007ca4:	2002      	movs	r0, #2
 8007ca6:	4240      	negs	r0, r0
 8007ca8:	e7fa      	b.n	8007ca0 <__ascii_mbtowc+0x1a>

08007caa <memmove>:
 8007caa:	b510      	push	{r4, lr}
 8007cac:	4288      	cmp	r0, r1
 8007cae:	d902      	bls.n	8007cb6 <memmove+0xc>
 8007cb0:	188b      	adds	r3, r1, r2
 8007cb2:	4298      	cmp	r0, r3
 8007cb4:	d303      	bcc.n	8007cbe <memmove+0x14>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	e007      	b.n	8007cca <memmove+0x20>
 8007cba:	5c8b      	ldrb	r3, [r1, r2]
 8007cbc:	5483      	strb	r3, [r0, r2]
 8007cbe:	3a01      	subs	r2, #1
 8007cc0:	d2fb      	bcs.n	8007cba <memmove+0x10>
 8007cc2:	bd10      	pop	{r4, pc}
 8007cc4:	5ccc      	ldrb	r4, [r1, r3]
 8007cc6:	54c4      	strb	r4, [r0, r3]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d1fa      	bne.n	8007cc4 <memmove+0x1a>
 8007cce:	e7f8      	b.n	8007cc2 <memmove+0x18>

08007cd0 <_realloc_r>:
 8007cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cd2:	0007      	movs	r7, r0
 8007cd4:	000e      	movs	r6, r1
 8007cd6:	0014      	movs	r4, r2
 8007cd8:	2900      	cmp	r1, #0
 8007cda:	d105      	bne.n	8007ce8 <_realloc_r+0x18>
 8007cdc:	0011      	movs	r1, r2
 8007cde:	f7fd fe93 	bl	8005a08 <_malloc_r>
 8007ce2:	0005      	movs	r5, r0
 8007ce4:	0028      	movs	r0, r5
 8007ce6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ce8:	2a00      	cmp	r2, #0
 8007cea:	d103      	bne.n	8007cf4 <_realloc_r+0x24>
 8007cec:	f7fd fe20 	bl	8005930 <_free_r>
 8007cf0:	0025      	movs	r5, r4
 8007cf2:	e7f7      	b.n	8007ce4 <_realloc_r+0x14>
 8007cf4:	f000 fc9a 	bl	800862c <_malloc_usable_size_r>
 8007cf8:	9001      	str	r0, [sp, #4]
 8007cfa:	4284      	cmp	r4, r0
 8007cfc:	d803      	bhi.n	8007d06 <_realloc_r+0x36>
 8007cfe:	0035      	movs	r5, r6
 8007d00:	0843      	lsrs	r3, r0, #1
 8007d02:	42a3      	cmp	r3, r4
 8007d04:	d3ee      	bcc.n	8007ce4 <_realloc_r+0x14>
 8007d06:	0021      	movs	r1, r4
 8007d08:	0038      	movs	r0, r7
 8007d0a:	f7fd fe7d 	bl	8005a08 <_malloc_r>
 8007d0e:	1e05      	subs	r5, r0, #0
 8007d10:	d0e8      	beq.n	8007ce4 <_realloc_r+0x14>
 8007d12:	9b01      	ldr	r3, [sp, #4]
 8007d14:	0022      	movs	r2, r4
 8007d16:	429c      	cmp	r4, r3
 8007d18:	d900      	bls.n	8007d1c <_realloc_r+0x4c>
 8007d1a:	001a      	movs	r2, r3
 8007d1c:	0031      	movs	r1, r6
 8007d1e:	0028      	movs	r0, r5
 8007d20:	f7ff fa3d 	bl	800719e <memcpy>
 8007d24:	0031      	movs	r1, r6
 8007d26:	0038      	movs	r0, r7
 8007d28:	f7fd fe02 	bl	8005930 <_free_r>
 8007d2c:	e7da      	b.n	8007ce4 <_realloc_r+0x14>

08007d2e <__sfputc_r>:
 8007d2e:	6893      	ldr	r3, [r2, #8]
 8007d30:	b510      	push	{r4, lr}
 8007d32:	3b01      	subs	r3, #1
 8007d34:	6093      	str	r3, [r2, #8]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	da04      	bge.n	8007d44 <__sfputc_r+0x16>
 8007d3a:	6994      	ldr	r4, [r2, #24]
 8007d3c:	42a3      	cmp	r3, r4
 8007d3e:	db07      	blt.n	8007d50 <__sfputc_r+0x22>
 8007d40:	290a      	cmp	r1, #10
 8007d42:	d005      	beq.n	8007d50 <__sfputc_r+0x22>
 8007d44:	6813      	ldr	r3, [r2, #0]
 8007d46:	1c58      	adds	r0, r3, #1
 8007d48:	6010      	str	r0, [r2, #0]
 8007d4a:	7019      	strb	r1, [r3, #0]
 8007d4c:	0008      	movs	r0, r1
 8007d4e:	bd10      	pop	{r4, pc}
 8007d50:	f000 f94e 	bl	8007ff0 <__swbuf_r>
 8007d54:	0001      	movs	r1, r0
 8007d56:	e7f9      	b.n	8007d4c <__sfputc_r+0x1e>

08007d58 <__sfputs_r>:
 8007d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5a:	0006      	movs	r6, r0
 8007d5c:	000f      	movs	r7, r1
 8007d5e:	0014      	movs	r4, r2
 8007d60:	18d5      	adds	r5, r2, r3
 8007d62:	42ac      	cmp	r4, r5
 8007d64:	d101      	bne.n	8007d6a <__sfputs_r+0x12>
 8007d66:	2000      	movs	r0, #0
 8007d68:	e007      	b.n	8007d7a <__sfputs_r+0x22>
 8007d6a:	7821      	ldrb	r1, [r4, #0]
 8007d6c:	003a      	movs	r2, r7
 8007d6e:	0030      	movs	r0, r6
 8007d70:	f7ff ffdd 	bl	8007d2e <__sfputc_r>
 8007d74:	3401      	adds	r4, #1
 8007d76:	1c43      	adds	r3, r0, #1
 8007d78:	d1f3      	bne.n	8007d62 <__sfputs_r+0xa>
 8007d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d7c <_vfiprintf_r>:
 8007d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d7e:	b0a1      	sub	sp, #132	; 0x84
 8007d80:	0006      	movs	r6, r0
 8007d82:	000c      	movs	r4, r1
 8007d84:	001f      	movs	r7, r3
 8007d86:	9203      	str	r2, [sp, #12]
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d004      	beq.n	8007d96 <_vfiprintf_r+0x1a>
 8007d8c:	6983      	ldr	r3, [r0, #24]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <_vfiprintf_r+0x1a>
 8007d92:	f000 fb3f 	bl	8008414 <__sinit>
 8007d96:	4b8e      	ldr	r3, [pc, #568]	; (8007fd0 <_vfiprintf_r+0x254>)
 8007d98:	429c      	cmp	r4, r3
 8007d9a:	d11c      	bne.n	8007dd6 <_vfiprintf_r+0x5a>
 8007d9c:	6874      	ldr	r4, [r6, #4]
 8007d9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007da0:	07db      	lsls	r3, r3, #31
 8007da2:	d405      	bmi.n	8007db0 <_vfiprintf_r+0x34>
 8007da4:	89a3      	ldrh	r3, [r4, #12]
 8007da6:	059b      	lsls	r3, r3, #22
 8007da8:	d402      	bmi.n	8007db0 <_vfiprintf_r+0x34>
 8007daa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dac:	f7ff ff69 	bl	8007c82 <__retarget_lock_acquire_recursive>
 8007db0:	89a3      	ldrh	r3, [r4, #12]
 8007db2:	071b      	lsls	r3, r3, #28
 8007db4:	d502      	bpl.n	8007dbc <_vfiprintf_r+0x40>
 8007db6:	6923      	ldr	r3, [r4, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d11d      	bne.n	8007df8 <_vfiprintf_r+0x7c>
 8007dbc:	0021      	movs	r1, r4
 8007dbe:	0030      	movs	r0, r6
 8007dc0:	f000 f97a 	bl	80080b8 <__swsetup_r>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d017      	beq.n	8007df8 <_vfiprintf_r+0x7c>
 8007dc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dca:	07db      	lsls	r3, r3, #31
 8007dcc:	d50d      	bpl.n	8007dea <_vfiprintf_r+0x6e>
 8007dce:	2001      	movs	r0, #1
 8007dd0:	4240      	negs	r0, r0
 8007dd2:	b021      	add	sp, #132	; 0x84
 8007dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dd6:	4b7f      	ldr	r3, [pc, #508]	; (8007fd4 <_vfiprintf_r+0x258>)
 8007dd8:	429c      	cmp	r4, r3
 8007dda:	d101      	bne.n	8007de0 <_vfiprintf_r+0x64>
 8007ddc:	68b4      	ldr	r4, [r6, #8]
 8007dde:	e7de      	b.n	8007d9e <_vfiprintf_r+0x22>
 8007de0:	4b7d      	ldr	r3, [pc, #500]	; (8007fd8 <_vfiprintf_r+0x25c>)
 8007de2:	429c      	cmp	r4, r3
 8007de4:	d1db      	bne.n	8007d9e <_vfiprintf_r+0x22>
 8007de6:	68f4      	ldr	r4, [r6, #12]
 8007de8:	e7d9      	b.n	8007d9e <_vfiprintf_r+0x22>
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	059b      	lsls	r3, r3, #22
 8007dee:	d4ee      	bmi.n	8007dce <_vfiprintf_r+0x52>
 8007df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007df2:	f7ff ff47 	bl	8007c84 <__retarget_lock_release_recursive>
 8007df6:	e7ea      	b.n	8007dce <_vfiprintf_r+0x52>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	ad08      	add	r5, sp, #32
 8007dfc:	616b      	str	r3, [r5, #20]
 8007dfe:	3320      	adds	r3, #32
 8007e00:	766b      	strb	r3, [r5, #25]
 8007e02:	3310      	adds	r3, #16
 8007e04:	76ab      	strb	r3, [r5, #26]
 8007e06:	9707      	str	r7, [sp, #28]
 8007e08:	9f03      	ldr	r7, [sp, #12]
 8007e0a:	783b      	ldrb	r3, [r7, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <_vfiprintf_r+0x98>
 8007e10:	2b25      	cmp	r3, #37	; 0x25
 8007e12:	d14e      	bne.n	8007eb2 <_vfiprintf_r+0x136>
 8007e14:	9b03      	ldr	r3, [sp, #12]
 8007e16:	1afb      	subs	r3, r7, r3
 8007e18:	9305      	str	r3, [sp, #20]
 8007e1a:	9b03      	ldr	r3, [sp, #12]
 8007e1c:	429f      	cmp	r7, r3
 8007e1e:	d00d      	beq.n	8007e3c <_vfiprintf_r+0xc0>
 8007e20:	9b05      	ldr	r3, [sp, #20]
 8007e22:	0021      	movs	r1, r4
 8007e24:	0030      	movs	r0, r6
 8007e26:	9a03      	ldr	r2, [sp, #12]
 8007e28:	f7ff ff96 	bl	8007d58 <__sfputs_r>
 8007e2c:	1c43      	adds	r3, r0, #1
 8007e2e:	d100      	bne.n	8007e32 <_vfiprintf_r+0xb6>
 8007e30:	e0b5      	b.n	8007f9e <_vfiprintf_r+0x222>
 8007e32:	696a      	ldr	r2, [r5, #20]
 8007e34:	9b05      	ldr	r3, [sp, #20]
 8007e36:	4694      	mov	ip, r2
 8007e38:	4463      	add	r3, ip
 8007e3a:	616b      	str	r3, [r5, #20]
 8007e3c:	783b      	ldrb	r3, [r7, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d100      	bne.n	8007e44 <_vfiprintf_r+0xc8>
 8007e42:	e0ac      	b.n	8007f9e <_vfiprintf_r+0x222>
 8007e44:	2201      	movs	r2, #1
 8007e46:	1c7b      	adds	r3, r7, #1
 8007e48:	9303      	str	r3, [sp, #12]
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	4252      	negs	r2, r2
 8007e4e:	606a      	str	r2, [r5, #4]
 8007e50:	a904      	add	r1, sp, #16
 8007e52:	3254      	adds	r2, #84	; 0x54
 8007e54:	1852      	adds	r2, r2, r1
 8007e56:	602b      	str	r3, [r5, #0]
 8007e58:	60eb      	str	r3, [r5, #12]
 8007e5a:	60ab      	str	r3, [r5, #8]
 8007e5c:	7013      	strb	r3, [r2, #0]
 8007e5e:	65ab      	str	r3, [r5, #88]	; 0x58
 8007e60:	9b03      	ldr	r3, [sp, #12]
 8007e62:	2205      	movs	r2, #5
 8007e64:	7819      	ldrb	r1, [r3, #0]
 8007e66:	485d      	ldr	r0, [pc, #372]	; (8007fdc <_vfiprintf_r+0x260>)
 8007e68:	f7ff f98e 	bl	8007188 <memchr>
 8007e6c:	9b03      	ldr	r3, [sp, #12]
 8007e6e:	1c5f      	adds	r7, r3, #1
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d120      	bne.n	8007eb6 <_vfiprintf_r+0x13a>
 8007e74:	682a      	ldr	r2, [r5, #0]
 8007e76:	06d3      	lsls	r3, r2, #27
 8007e78:	d504      	bpl.n	8007e84 <_vfiprintf_r+0x108>
 8007e7a:	2353      	movs	r3, #83	; 0x53
 8007e7c:	a904      	add	r1, sp, #16
 8007e7e:	185b      	adds	r3, r3, r1
 8007e80:	2120      	movs	r1, #32
 8007e82:	7019      	strb	r1, [r3, #0]
 8007e84:	0713      	lsls	r3, r2, #28
 8007e86:	d504      	bpl.n	8007e92 <_vfiprintf_r+0x116>
 8007e88:	2353      	movs	r3, #83	; 0x53
 8007e8a:	a904      	add	r1, sp, #16
 8007e8c:	185b      	adds	r3, r3, r1
 8007e8e:	212b      	movs	r1, #43	; 0x2b
 8007e90:	7019      	strb	r1, [r3, #0]
 8007e92:	9b03      	ldr	r3, [sp, #12]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	2b2a      	cmp	r3, #42	; 0x2a
 8007e98:	d016      	beq.n	8007ec8 <_vfiprintf_r+0x14c>
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	68eb      	ldr	r3, [r5, #12]
 8007e9e:	9f03      	ldr	r7, [sp, #12]
 8007ea0:	783a      	ldrb	r2, [r7, #0]
 8007ea2:	1c78      	adds	r0, r7, #1
 8007ea4:	3a30      	subs	r2, #48	; 0x30
 8007ea6:	4684      	mov	ip, r0
 8007ea8:	2a09      	cmp	r2, #9
 8007eaa:	d94f      	bls.n	8007f4c <_vfiprintf_r+0x1d0>
 8007eac:	2900      	cmp	r1, #0
 8007eae:	d111      	bne.n	8007ed4 <_vfiprintf_r+0x158>
 8007eb0:	e017      	b.n	8007ee2 <_vfiprintf_r+0x166>
 8007eb2:	3701      	adds	r7, #1
 8007eb4:	e7a9      	b.n	8007e0a <_vfiprintf_r+0x8e>
 8007eb6:	4b49      	ldr	r3, [pc, #292]	; (8007fdc <_vfiprintf_r+0x260>)
 8007eb8:	682a      	ldr	r2, [r5, #0]
 8007eba:	1ac0      	subs	r0, r0, r3
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	4083      	lsls	r3, r0
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	602b      	str	r3, [r5, #0]
 8007ec4:	9703      	str	r7, [sp, #12]
 8007ec6:	e7cb      	b.n	8007e60 <_vfiprintf_r+0xe4>
 8007ec8:	9b07      	ldr	r3, [sp, #28]
 8007eca:	1d19      	adds	r1, r3, #4
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	9107      	str	r1, [sp, #28]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	db01      	blt.n	8007ed8 <_vfiprintf_r+0x15c>
 8007ed4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ed6:	e004      	b.n	8007ee2 <_vfiprintf_r+0x166>
 8007ed8:	425b      	negs	r3, r3
 8007eda:	60eb      	str	r3, [r5, #12]
 8007edc:	2302      	movs	r3, #2
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	602b      	str	r3, [r5, #0]
 8007ee2:	783b      	ldrb	r3, [r7, #0]
 8007ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8007ee6:	d10a      	bne.n	8007efe <_vfiprintf_r+0x182>
 8007ee8:	787b      	ldrb	r3, [r7, #1]
 8007eea:	2b2a      	cmp	r3, #42	; 0x2a
 8007eec:	d137      	bne.n	8007f5e <_vfiprintf_r+0x1e2>
 8007eee:	9b07      	ldr	r3, [sp, #28]
 8007ef0:	3702      	adds	r7, #2
 8007ef2:	1d1a      	adds	r2, r3, #4
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	9207      	str	r2, [sp, #28]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	db2d      	blt.n	8007f58 <_vfiprintf_r+0x1dc>
 8007efc:	9309      	str	r3, [sp, #36]	; 0x24
 8007efe:	2203      	movs	r2, #3
 8007f00:	7839      	ldrb	r1, [r7, #0]
 8007f02:	4837      	ldr	r0, [pc, #220]	; (8007fe0 <_vfiprintf_r+0x264>)
 8007f04:	f7ff f940 	bl	8007188 <memchr>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d007      	beq.n	8007f1c <_vfiprintf_r+0x1a0>
 8007f0c:	4b34      	ldr	r3, [pc, #208]	; (8007fe0 <_vfiprintf_r+0x264>)
 8007f0e:	682a      	ldr	r2, [r5, #0]
 8007f10:	1ac0      	subs	r0, r0, r3
 8007f12:	2340      	movs	r3, #64	; 0x40
 8007f14:	4083      	lsls	r3, r0
 8007f16:	4313      	orrs	r3, r2
 8007f18:	3701      	adds	r7, #1
 8007f1a:	602b      	str	r3, [r5, #0]
 8007f1c:	7839      	ldrb	r1, [r7, #0]
 8007f1e:	1c7b      	adds	r3, r7, #1
 8007f20:	2206      	movs	r2, #6
 8007f22:	4830      	ldr	r0, [pc, #192]	; (8007fe4 <_vfiprintf_r+0x268>)
 8007f24:	9303      	str	r3, [sp, #12]
 8007f26:	7629      	strb	r1, [r5, #24]
 8007f28:	f7ff f92e 	bl	8007188 <memchr>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d045      	beq.n	8007fbc <_vfiprintf_r+0x240>
 8007f30:	4b2d      	ldr	r3, [pc, #180]	; (8007fe8 <_vfiprintf_r+0x26c>)
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d127      	bne.n	8007f86 <_vfiprintf_r+0x20a>
 8007f36:	2207      	movs	r2, #7
 8007f38:	9b07      	ldr	r3, [sp, #28]
 8007f3a:	3307      	adds	r3, #7
 8007f3c:	4393      	bics	r3, r2
 8007f3e:	3308      	adds	r3, #8
 8007f40:	9307      	str	r3, [sp, #28]
 8007f42:	696b      	ldr	r3, [r5, #20]
 8007f44:	9a04      	ldr	r2, [sp, #16]
 8007f46:	189b      	adds	r3, r3, r2
 8007f48:	616b      	str	r3, [r5, #20]
 8007f4a:	e75d      	b.n	8007e08 <_vfiprintf_r+0x8c>
 8007f4c:	210a      	movs	r1, #10
 8007f4e:	434b      	muls	r3, r1
 8007f50:	4667      	mov	r7, ip
 8007f52:	189b      	adds	r3, r3, r2
 8007f54:	3909      	subs	r1, #9
 8007f56:	e7a3      	b.n	8007ea0 <_vfiprintf_r+0x124>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	425b      	negs	r3, r3
 8007f5c:	e7ce      	b.n	8007efc <_vfiprintf_r+0x180>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	001a      	movs	r2, r3
 8007f62:	3701      	adds	r7, #1
 8007f64:	606b      	str	r3, [r5, #4]
 8007f66:	7839      	ldrb	r1, [r7, #0]
 8007f68:	1c78      	adds	r0, r7, #1
 8007f6a:	3930      	subs	r1, #48	; 0x30
 8007f6c:	4684      	mov	ip, r0
 8007f6e:	2909      	cmp	r1, #9
 8007f70:	d903      	bls.n	8007f7a <_vfiprintf_r+0x1fe>
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0c3      	beq.n	8007efe <_vfiprintf_r+0x182>
 8007f76:	9209      	str	r2, [sp, #36]	; 0x24
 8007f78:	e7c1      	b.n	8007efe <_vfiprintf_r+0x182>
 8007f7a:	230a      	movs	r3, #10
 8007f7c:	435a      	muls	r2, r3
 8007f7e:	4667      	mov	r7, ip
 8007f80:	1852      	adds	r2, r2, r1
 8007f82:	3b09      	subs	r3, #9
 8007f84:	e7ef      	b.n	8007f66 <_vfiprintf_r+0x1ea>
 8007f86:	ab07      	add	r3, sp, #28
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	0022      	movs	r2, r4
 8007f8c:	0029      	movs	r1, r5
 8007f8e:	0030      	movs	r0, r6
 8007f90:	4b16      	ldr	r3, [pc, #88]	; (8007fec <_vfiprintf_r+0x270>)
 8007f92:	f7fd fe59 	bl	8005c48 <_printf_float>
 8007f96:	9004      	str	r0, [sp, #16]
 8007f98:	9b04      	ldr	r3, [sp, #16]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	d1d1      	bne.n	8007f42 <_vfiprintf_r+0x1c6>
 8007f9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fa0:	07db      	lsls	r3, r3, #31
 8007fa2:	d405      	bmi.n	8007fb0 <_vfiprintf_r+0x234>
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	059b      	lsls	r3, r3, #22
 8007fa8:	d402      	bmi.n	8007fb0 <_vfiprintf_r+0x234>
 8007faa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fac:	f7ff fe6a 	bl	8007c84 <__retarget_lock_release_recursive>
 8007fb0:	89a3      	ldrh	r3, [r4, #12]
 8007fb2:	065b      	lsls	r3, r3, #25
 8007fb4:	d500      	bpl.n	8007fb8 <_vfiprintf_r+0x23c>
 8007fb6:	e70a      	b.n	8007dce <_vfiprintf_r+0x52>
 8007fb8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007fba:	e70a      	b.n	8007dd2 <_vfiprintf_r+0x56>
 8007fbc:	ab07      	add	r3, sp, #28
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	0022      	movs	r2, r4
 8007fc2:	0029      	movs	r1, r5
 8007fc4:	0030      	movs	r0, r6
 8007fc6:	4b09      	ldr	r3, [pc, #36]	; (8007fec <_vfiprintf_r+0x270>)
 8007fc8:	f7fe f8f0 	bl	80061ac <_printf_i>
 8007fcc:	e7e3      	b.n	8007f96 <_vfiprintf_r+0x21a>
 8007fce:	46c0      	nop			; (mov r8, r8)
 8007fd0:	08008cbc 	.word	0x08008cbc
 8007fd4:	08008cdc 	.word	0x08008cdc
 8007fd8:	08008c9c 	.word	0x08008c9c
 8007fdc:	08008b44 	.word	0x08008b44
 8007fe0:	08008b4a 	.word	0x08008b4a
 8007fe4:	08008b4e 	.word	0x08008b4e
 8007fe8:	08005c49 	.word	0x08005c49
 8007fec:	08007d59 	.word	0x08007d59

08007ff0 <__swbuf_r>:
 8007ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff2:	0005      	movs	r5, r0
 8007ff4:	000e      	movs	r6, r1
 8007ff6:	0014      	movs	r4, r2
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d004      	beq.n	8008006 <__swbuf_r+0x16>
 8007ffc:	6983      	ldr	r3, [r0, #24]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <__swbuf_r+0x16>
 8008002:	f000 fa07 	bl	8008414 <__sinit>
 8008006:	4b22      	ldr	r3, [pc, #136]	; (8008090 <__swbuf_r+0xa0>)
 8008008:	429c      	cmp	r4, r3
 800800a:	d12e      	bne.n	800806a <__swbuf_r+0x7a>
 800800c:	686c      	ldr	r4, [r5, #4]
 800800e:	69a3      	ldr	r3, [r4, #24]
 8008010:	60a3      	str	r3, [r4, #8]
 8008012:	89a3      	ldrh	r3, [r4, #12]
 8008014:	071b      	lsls	r3, r3, #28
 8008016:	d532      	bpl.n	800807e <__swbuf_r+0x8e>
 8008018:	6923      	ldr	r3, [r4, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d02f      	beq.n	800807e <__swbuf_r+0x8e>
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	6922      	ldr	r2, [r4, #16]
 8008022:	b2f7      	uxtb	r7, r6
 8008024:	1a98      	subs	r0, r3, r2
 8008026:	6963      	ldr	r3, [r4, #20]
 8008028:	b2f6      	uxtb	r6, r6
 800802a:	4283      	cmp	r3, r0
 800802c:	dc05      	bgt.n	800803a <__swbuf_r+0x4a>
 800802e:	0021      	movs	r1, r4
 8008030:	0028      	movs	r0, r5
 8008032:	f000 f94d 	bl	80082d0 <_fflush_r>
 8008036:	2800      	cmp	r0, #0
 8008038:	d127      	bne.n	800808a <__swbuf_r+0x9a>
 800803a:	68a3      	ldr	r3, [r4, #8]
 800803c:	3001      	adds	r0, #1
 800803e:	3b01      	subs	r3, #1
 8008040:	60a3      	str	r3, [r4, #8]
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	1c5a      	adds	r2, r3, #1
 8008046:	6022      	str	r2, [r4, #0]
 8008048:	701f      	strb	r7, [r3, #0]
 800804a:	6963      	ldr	r3, [r4, #20]
 800804c:	4283      	cmp	r3, r0
 800804e:	d004      	beq.n	800805a <__swbuf_r+0x6a>
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	07db      	lsls	r3, r3, #31
 8008054:	d507      	bpl.n	8008066 <__swbuf_r+0x76>
 8008056:	2e0a      	cmp	r6, #10
 8008058:	d105      	bne.n	8008066 <__swbuf_r+0x76>
 800805a:	0021      	movs	r1, r4
 800805c:	0028      	movs	r0, r5
 800805e:	f000 f937 	bl	80082d0 <_fflush_r>
 8008062:	2800      	cmp	r0, #0
 8008064:	d111      	bne.n	800808a <__swbuf_r+0x9a>
 8008066:	0030      	movs	r0, r6
 8008068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800806a:	4b0a      	ldr	r3, [pc, #40]	; (8008094 <__swbuf_r+0xa4>)
 800806c:	429c      	cmp	r4, r3
 800806e:	d101      	bne.n	8008074 <__swbuf_r+0x84>
 8008070:	68ac      	ldr	r4, [r5, #8]
 8008072:	e7cc      	b.n	800800e <__swbuf_r+0x1e>
 8008074:	4b08      	ldr	r3, [pc, #32]	; (8008098 <__swbuf_r+0xa8>)
 8008076:	429c      	cmp	r4, r3
 8008078:	d1c9      	bne.n	800800e <__swbuf_r+0x1e>
 800807a:	68ec      	ldr	r4, [r5, #12]
 800807c:	e7c7      	b.n	800800e <__swbuf_r+0x1e>
 800807e:	0021      	movs	r1, r4
 8008080:	0028      	movs	r0, r5
 8008082:	f000 f819 	bl	80080b8 <__swsetup_r>
 8008086:	2800      	cmp	r0, #0
 8008088:	d0c9      	beq.n	800801e <__swbuf_r+0x2e>
 800808a:	2601      	movs	r6, #1
 800808c:	4276      	negs	r6, r6
 800808e:	e7ea      	b.n	8008066 <__swbuf_r+0x76>
 8008090:	08008cbc 	.word	0x08008cbc
 8008094:	08008cdc 	.word	0x08008cdc
 8008098:	08008c9c 	.word	0x08008c9c

0800809c <__ascii_wctomb>:
 800809c:	0003      	movs	r3, r0
 800809e:	1e08      	subs	r0, r1, #0
 80080a0:	d005      	beq.n	80080ae <__ascii_wctomb+0x12>
 80080a2:	2aff      	cmp	r2, #255	; 0xff
 80080a4:	d904      	bls.n	80080b0 <__ascii_wctomb+0x14>
 80080a6:	228a      	movs	r2, #138	; 0x8a
 80080a8:	2001      	movs	r0, #1
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	4240      	negs	r0, r0
 80080ae:	4770      	bx	lr
 80080b0:	2001      	movs	r0, #1
 80080b2:	700a      	strb	r2, [r1, #0]
 80080b4:	e7fb      	b.n	80080ae <__ascii_wctomb+0x12>
	...

080080b8 <__swsetup_r>:
 80080b8:	4b37      	ldr	r3, [pc, #220]	; (8008198 <__swsetup_r+0xe0>)
 80080ba:	b570      	push	{r4, r5, r6, lr}
 80080bc:	681d      	ldr	r5, [r3, #0]
 80080be:	0006      	movs	r6, r0
 80080c0:	000c      	movs	r4, r1
 80080c2:	2d00      	cmp	r5, #0
 80080c4:	d005      	beq.n	80080d2 <__swsetup_r+0x1a>
 80080c6:	69ab      	ldr	r3, [r5, #24]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d102      	bne.n	80080d2 <__swsetup_r+0x1a>
 80080cc:	0028      	movs	r0, r5
 80080ce:	f000 f9a1 	bl	8008414 <__sinit>
 80080d2:	4b32      	ldr	r3, [pc, #200]	; (800819c <__swsetup_r+0xe4>)
 80080d4:	429c      	cmp	r4, r3
 80080d6:	d10f      	bne.n	80080f8 <__swsetup_r+0x40>
 80080d8:	686c      	ldr	r4, [r5, #4]
 80080da:	230c      	movs	r3, #12
 80080dc:	5ee2      	ldrsh	r2, [r4, r3]
 80080de:	b293      	uxth	r3, r2
 80080e0:	0711      	lsls	r1, r2, #28
 80080e2:	d42d      	bmi.n	8008140 <__swsetup_r+0x88>
 80080e4:	06d9      	lsls	r1, r3, #27
 80080e6:	d411      	bmi.n	800810c <__swsetup_r+0x54>
 80080e8:	2309      	movs	r3, #9
 80080ea:	2001      	movs	r0, #1
 80080ec:	6033      	str	r3, [r6, #0]
 80080ee:	3337      	adds	r3, #55	; 0x37
 80080f0:	4313      	orrs	r3, r2
 80080f2:	81a3      	strh	r3, [r4, #12]
 80080f4:	4240      	negs	r0, r0
 80080f6:	bd70      	pop	{r4, r5, r6, pc}
 80080f8:	4b29      	ldr	r3, [pc, #164]	; (80081a0 <__swsetup_r+0xe8>)
 80080fa:	429c      	cmp	r4, r3
 80080fc:	d101      	bne.n	8008102 <__swsetup_r+0x4a>
 80080fe:	68ac      	ldr	r4, [r5, #8]
 8008100:	e7eb      	b.n	80080da <__swsetup_r+0x22>
 8008102:	4b28      	ldr	r3, [pc, #160]	; (80081a4 <__swsetup_r+0xec>)
 8008104:	429c      	cmp	r4, r3
 8008106:	d1e8      	bne.n	80080da <__swsetup_r+0x22>
 8008108:	68ec      	ldr	r4, [r5, #12]
 800810a:	e7e6      	b.n	80080da <__swsetup_r+0x22>
 800810c:	075b      	lsls	r3, r3, #29
 800810e:	d513      	bpl.n	8008138 <__swsetup_r+0x80>
 8008110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008112:	2900      	cmp	r1, #0
 8008114:	d008      	beq.n	8008128 <__swsetup_r+0x70>
 8008116:	0023      	movs	r3, r4
 8008118:	3344      	adds	r3, #68	; 0x44
 800811a:	4299      	cmp	r1, r3
 800811c:	d002      	beq.n	8008124 <__swsetup_r+0x6c>
 800811e:	0030      	movs	r0, r6
 8008120:	f7fd fc06 	bl	8005930 <_free_r>
 8008124:	2300      	movs	r3, #0
 8008126:	6363      	str	r3, [r4, #52]	; 0x34
 8008128:	2224      	movs	r2, #36	; 0x24
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	4393      	bics	r3, r2
 800812e:	81a3      	strh	r3, [r4, #12]
 8008130:	2300      	movs	r3, #0
 8008132:	6063      	str	r3, [r4, #4]
 8008134:	6923      	ldr	r3, [r4, #16]
 8008136:	6023      	str	r3, [r4, #0]
 8008138:	2308      	movs	r3, #8
 800813a:	89a2      	ldrh	r2, [r4, #12]
 800813c:	4313      	orrs	r3, r2
 800813e:	81a3      	strh	r3, [r4, #12]
 8008140:	6923      	ldr	r3, [r4, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10b      	bne.n	800815e <__swsetup_r+0xa6>
 8008146:	21a0      	movs	r1, #160	; 0xa0
 8008148:	2280      	movs	r2, #128	; 0x80
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	0089      	lsls	r1, r1, #2
 800814e:	0092      	lsls	r2, r2, #2
 8008150:	400b      	ands	r3, r1
 8008152:	4293      	cmp	r3, r2
 8008154:	d003      	beq.n	800815e <__swsetup_r+0xa6>
 8008156:	0021      	movs	r1, r4
 8008158:	0030      	movs	r0, r6
 800815a:	f000 fa23 	bl	80085a4 <__smakebuf_r>
 800815e:	220c      	movs	r2, #12
 8008160:	5ea3      	ldrsh	r3, [r4, r2]
 8008162:	2001      	movs	r0, #1
 8008164:	001a      	movs	r2, r3
 8008166:	b299      	uxth	r1, r3
 8008168:	4002      	ands	r2, r0
 800816a:	4203      	tst	r3, r0
 800816c:	d00f      	beq.n	800818e <__swsetup_r+0xd6>
 800816e:	2200      	movs	r2, #0
 8008170:	60a2      	str	r2, [r4, #8]
 8008172:	6962      	ldr	r2, [r4, #20]
 8008174:	4252      	negs	r2, r2
 8008176:	61a2      	str	r2, [r4, #24]
 8008178:	2000      	movs	r0, #0
 800817a:	6922      	ldr	r2, [r4, #16]
 800817c:	4282      	cmp	r2, r0
 800817e:	d1ba      	bne.n	80080f6 <__swsetup_r+0x3e>
 8008180:	060a      	lsls	r2, r1, #24
 8008182:	d5b8      	bpl.n	80080f6 <__swsetup_r+0x3e>
 8008184:	2240      	movs	r2, #64	; 0x40
 8008186:	4313      	orrs	r3, r2
 8008188:	81a3      	strh	r3, [r4, #12]
 800818a:	3801      	subs	r0, #1
 800818c:	e7b3      	b.n	80080f6 <__swsetup_r+0x3e>
 800818e:	0788      	lsls	r0, r1, #30
 8008190:	d400      	bmi.n	8008194 <__swsetup_r+0xdc>
 8008192:	6962      	ldr	r2, [r4, #20]
 8008194:	60a2      	str	r2, [r4, #8]
 8008196:	e7ef      	b.n	8008178 <__swsetup_r+0xc0>
 8008198:	2000000c 	.word	0x2000000c
 800819c:	08008cbc 	.word	0x08008cbc
 80081a0:	08008cdc 	.word	0x08008cdc
 80081a4:	08008c9c 	.word	0x08008c9c

080081a8 <abort>:
 80081a8:	2006      	movs	r0, #6
 80081aa:	b510      	push	{r4, lr}
 80081ac:	f000 fa70 	bl	8008690 <raise>
 80081b0:	2001      	movs	r0, #1
 80081b2:	f7fa fd71 	bl	8002c98 <_exit>
	...

080081b8 <__sflush_r>:
 80081b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081ba:	898b      	ldrh	r3, [r1, #12]
 80081bc:	0005      	movs	r5, r0
 80081be:	000c      	movs	r4, r1
 80081c0:	071a      	lsls	r2, r3, #28
 80081c2:	d45f      	bmi.n	8008284 <__sflush_r+0xcc>
 80081c4:	684a      	ldr	r2, [r1, #4]
 80081c6:	2a00      	cmp	r2, #0
 80081c8:	dc04      	bgt.n	80081d4 <__sflush_r+0x1c>
 80081ca:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80081cc:	2a00      	cmp	r2, #0
 80081ce:	dc01      	bgt.n	80081d4 <__sflush_r+0x1c>
 80081d0:	2000      	movs	r0, #0
 80081d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081d4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80081d6:	2f00      	cmp	r7, #0
 80081d8:	d0fa      	beq.n	80081d0 <__sflush_r+0x18>
 80081da:	2200      	movs	r2, #0
 80081dc:	2180      	movs	r1, #128	; 0x80
 80081de:	682e      	ldr	r6, [r5, #0]
 80081e0:	602a      	str	r2, [r5, #0]
 80081e2:	001a      	movs	r2, r3
 80081e4:	0149      	lsls	r1, r1, #5
 80081e6:	400a      	ands	r2, r1
 80081e8:	420b      	tst	r3, r1
 80081ea:	d034      	beq.n	8008256 <__sflush_r+0x9e>
 80081ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081ee:	89a3      	ldrh	r3, [r4, #12]
 80081f0:	075b      	lsls	r3, r3, #29
 80081f2:	d506      	bpl.n	8008202 <__sflush_r+0x4a>
 80081f4:	6863      	ldr	r3, [r4, #4]
 80081f6:	1ac0      	subs	r0, r0, r3
 80081f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <__sflush_r+0x4a>
 80081fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008200:	1ac0      	subs	r0, r0, r3
 8008202:	0002      	movs	r2, r0
 8008204:	6a21      	ldr	r1, [r4, #32]
 8008206:	2300      	movs	r3, #0
 8008208:	0028      	movs	r0, r5
 800820a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800820c:	47b8      	blx	r7
 800820e:	89a1      	ldrh	r1, [r4, #12]
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d106      	bne.n	8008222 <__sflush_r+0x6a>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	2b1d      	cmp	r3, #29
 8008218:	d831      	bhi.n	800827e <__sflush_r+0xc6>
 800821a:	4a2c      	ldr	r2, [pc, #176]	; (80082cc <__sflush_r+0x114>)
 800821c:	40da      	lsrs	r2, r3
 800821e:	07d3      	lsls	r3, r2, #31
 8008220:	d52d      	bpl.n	800827e <__sflush_r+0xc6>
 8008222:	2300      	movs	r3, #0
 8008224:	6063      	str	r3, [r4, #4]
 8008226:	6923      	ldr	r3, [r4, #16]
 8008228:	6023      	str	r3, [r4, #0]
 800822a:	04cb      	lsls	r3, r1, #19
 800822c:	d505      	bpl.n	800823a <__sflush_r+0x82>
 800822e:	1c43      	adds	r3, r0, #1
 8008230:	d102      	bne.n	8008238 <__sflush_r+0x80>
 8008232:	682b      	ldr	r3, [r5, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d100      	bne.n	800823a <__sflush_r+0x82>
 8008238:	6560      	str	r0, [r4, #84]	; 0x54
 800823a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800823c:	602e      	str	r6, [r5, #0]
 800823e:	2900      	cmp	r1, #0
 8008240:	d0c6      	beq.n	80081d0 <__sflush_r+0x18>
 8008242:	0023      	movs	r3, r4
 8008244:	3344      	adds	r3, #68	; 0x44
 8008246:	4299      	cmp	r1, r3
 8008248:	d002      	beq.n	8008250 <__sflush_r+0x98>
 800824a:	0028      	movs	r0, r5
 800824c:	f7fd fb70 	bl	8005930 <_free_r>
 8008250:	2000      	movs	r0, #0
 8008252:	6360      	str	r0, [r4, #52]	; 0x34
 8008254:	e7bd      	b.n	80081d2 <__sflush_r+0x1a>
 8008256:	2301      	movs	r3, #1
 8008258:	0028      	movs	r0, r5
 800825a:	6a21      	ldr	r1, [r4, #32]
 800825c:	47b8      	blx	r7
 800825e:	1c43      	adds	r3, r0, #1
 8008260:	d1c5      	bne.n	80081ee <__sflush_r+0x36>
 8008262:	682b      	ldr	r3, [r5, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d0c2      	beq.n	80081ee <__sflush_r+0x36>
 8008268:	2b1d      	cmp	r3, #29
 800826a:	d001      	beq.n	8008270 <__sflush_r+0xb8>
 800826c:	2b16      	cmp	r3, #22
 800826e:	d101      	bne.n	8008274 <__sflush_r+0xbc>
 8008270:	602e      	str	r6, [r5, #0]
 8008272:	e7ad      	b.n	80081d0 <__sflush_r+0x18>
 8008274:	2340      	movs	r3, #64	; 0x40
 8008276:	89a2      	ldrh	r2, [r4, #12]
 8008278:	4313      	orrs	r3, r2
 800827a:	81a3      	strh	r3, [r4, #12]
 800827c:	e7a9      	b.n	80081d2 <__sflush_r+0x1a>
 800827e:	2340      	movs	r3, #64	; 0x40
 8008280:	430b      	orrs	r3, r1
 8008282:	e7fa      	b.n	800827a <__sflush_r+0xc2>
 8008284:	690f      	ldr	r7, [r1, #16]
 8008286:	2f00      	cmp	r7, #0
 8008288:	d0a2      	beq.n	80081d0 <__sflush_r+0x18>
 800828a:	680a      	ldr	r2, [r1, #0]
 800828c:	600f      	str	r7, [r1, #0]
 800828e:	1bd2      	subs	r2, r2, r7
 8008290:	9201      	str	r2, [sp, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	079b      	lsls	r3, r3, #30
 8008296:	d100      	bne.n	800829a <__sflush_r+0xe2>
 8008298:	694a      	ldr	r2, [r1, #20]
 800829a:	60a2      	str	r2, [r4, #8]
 800829c:	9b01      	ldr	r3, [sp, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	dc00      	bgt.n	80082a4 <__sflush_r+0xec>
 80082a2:	e795      	b.n	80081d0 <__sflush_r+0x18>
 80082a4:	003a      	movs	r2, r7
 80082a6:	0028      	movs	r0, r5
 80082a8:	9b01      	ldr	r3, [sp, #4]
 80082aa:	6a21      	ldr	r1, [r4, #32]
 80082ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082ae:	47b0      	blx	r6
 80082b0:	2800      	cmp	r0, #0
 80082b2:	dc06      	bgt.n	80082c2 <__sflush_r+0x10a>
 80082b4:	2340      	movs	r3, #64	; 0x40
 80082b6:	2001      	movs	r0, #1
 80082b8:	89a2      	ldrh	r2, [r4, #12]
 80082ba:	4240      	negs	r0, r0
 80082bc:	4313      	orrs	r3, r2
 80082be:	81a3      	strh	r3, [r4, #12]
 80082c0:	e787      	b.n	80081d2 <__sflush_r+0x1a>
 80082c2:	9b01      	ldr	r3, [sp, #4]
 80082c4:	183f      	adds	r7, r7, r0
 80082c6:	1a1b      	subs	r3, r3, r0
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	e7e7      	b.n	800829c <__sflush_r+0xe4>
 80082cc:	20400001 	.word	0x20400001

080082d0 <_fflush_r>:
 80082d0:	690b      	ldr	r3, [r1, #16]
 80082d2:	b570      	push	{r4, r5, r6, lr}
 80082d4:	0005      	movs	r5, r0
 80082d6:	000c      	movs	r4, r1
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d102      	bne.n	80082e2 <_fflush_r+0x12>
 80082dc:	2500      	movs	r5, #0
 80082de:	0028      	movs	r0, r5
 80082e0:	bd70      	pop	{r4, r5, r6, pc}
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d004      	beq.n	80082f0 <_fflush_r+0x20>
 80082e6:	6983      	ldr	r3, [r0, #24]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <_fflush_r+0x20>
 80082ec:	f000 f892 	bl	8008414 <__sinit>
 80082f0:	4b14      	ldr	r3, [pc, #80]	; (8008344 <_fflush_r+0x74>)
 80082f2:	429c      	cmp	r4, r3
 80082f4:	d11b      	bne.n	800832e <_fflush_r+0x5e>
 80082f6:	686c      	ldr	r4, [r5, #4]
 80082f8:	220c      	movs	r2, #12
 80082fa:	5ea3      	ldrsh	r3, [r4, r2]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d0ed      	beq.n	80082dc <_fflush_r+0xc>
 8008300:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008302:	07d2      	lsls	r2, r2, #31
 8008304:	d404      	bmi.n	8008310 <_fflush_r+0x40>
 8008306:	059b      	lsls	r3, r3, #22
 8008308:	d402      	bmi.n	8008310 <_fflush_r+0x40>
 800830a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800830c:	f7ff fcb9 	bl	8007c82 <__retarget_lock_acquire_recursive>
 8008310:	0028      	movs	r0, r5
 8008312:	0021      	movs	r1, r4
 8008314:	f7ff ff50 	bl	80081b8 <__sflush_r>
 8008318:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800831a:	0005      	movs	r5, r0
 800831c:	07db      	lsls	r3, r3, #31
 800831e:	d4de      	bmi.n	80082de <_fflush_r+0xe>
 8008320:	89a3      	ldrh	r3, [r4, #12]
 8008322:	059b      	lsls	r3, r3, #22
 8008324:	d4db      	bmi.n	80082de <_fflush_r+0xe>
 8008326:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008328:	f7ff fcac 	bl	8007c84 <__retarget_lock_release_recursive>
 800832c:	e7d7      	b.n	80082de <_fflush_r+0xe>
 800832e:	4b06      	ldr	r3, [pc, #24]	; (8008348 <_fflush_r+0x78>)
 8008330:	429c      	cmp	r4, r3
 8008332:	d101      	bne.n	8008338 <_fflush_r+0x68>
 8008334:	68ac      	ldr	r4, [r5, #8]
 8008336:	e7df      	b.n	80082f8 <_fflush_r+0x28>
 8008338:	4b04      	ldr	r3, [pc, #16]	; (800834c <_fflush_r+0x7c>)
 800833a:	429c      	cmp	r4, r3
 800833c:	d1dc      	bne.n	80082f8 <_fflush_r+0x28>
 800833e:	68ec      	ldr	r4, [r5, #12]
 8008340:	e7da      	b.n	80082f8 <_fflush_r+0x28>
 8008342:	46c0      	nop			; (mov r8, r8)
 8008344:	08008cbc 	.word	0x08008cbc
 8008348:	08008cdc 	.word	0x08008cdc
 800834c:	08008c9c 	.word	0x08008c9c

08008350 <std>:
 8008350:	2300      	movs	r3, #0
 8008352:	b510      	push	{r4, lr}
 8008354:	0004      	movs	r4, r0
 8008356:	6003      	str	r3, [r0, #0]
 8008358:	6043      	str	r3, [r0, #4]
 800835a:	6083      	str	r3, [r0, #8]
 800835c:	8181      	strh	r1, [r0, #12]
 800835e:	6643      	str	r3, [r0, #100]	; 0x64
 8008360:	0019      	movs	r1, r3
 8008362:	81c2      	strh	r2, [r0, #14]
 8008364:	6103      	str	r3, [r0, #16]
 8008366:	6143      	str	r3, [r0, #20]
 8008368:	6183      	str	r3, [r0, #24]
 800836a:	2208      	movs	r2, #8
 800836c:	305c      	adds	r0, #92	; 0x5c
 800836e:	f7fd fad7 	bl	8005920 <memset>
 8008372:	4b05      	ldr	r3, [pc, #20]	; (8008388 <std+0x38>)
 8008374:	6224      	str	r4, [r4, #32]
 8008376:	6263      	str	r3, [r4, #36]	; 0x24
 8008378:	4b04      	ldr	r3, [pc, #16]	; (800838c <std+0x3c>)
 800837a:	62a3      	str	r3, [r4, #40]	; 0x28
 800837c:	4b04      	ldr	r3, [pc, #16]	; (8008390 <std+0x40>)
 800837e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008380:	4b04      	ldr	r3, [pc, #16]	; (8008394 <std+0x44>)
 8008382:	6323      	str	r3, [r4, #48]	; 0x30
 8008384:	bd10      	pop	{r4, pc}
 8008386:	46c0      	nop			; (mov r8, r8)
 8008388:	080086d1 	.word	0x080086d1
 800838c:	080086f9 	.word	0x080086f9
 8008390:	08008731 	.word	0x08008731
 8008394:	0800875d 	.word	0x0800875d

08008398 <_cleanup_r>:
 8008398:	b510      	push	{r4, lr}
 800839a:	4902      	ldr	r1, [pc, #8]	; (80083a4 <_cleanup_r+0xc>)
 800839c:	f000 f8ba 	bl	8008514 <_fwalk_reent>
 80083a0:	bd10      	pop	{r4, pc}
 80083a2:	46c0      	nop			; (mov r8, r8)
 80083a4:	080082d1 	.word	0x080082d1

080083a8 <__sfmoreglue>:
 80083a8:	b570      	push	{r4, r5, r6, lr}
 80083aa:	2568      	movs	r5, #104	; 0x68
 80083ac:	1e4a      	subs	r2, r1, #1
 80083ae:	4355      	muls	r5, r2
 80083b0:	000e      	movs	r6, r1
 80083b2:	0029      	movs	r1, r5
 80083b4:	3174      	adds	r1, #116	; 0x74
 80083b6:	f7fd fb27 	bl	8005a08 <_malloc_r>
 80083ba:	1e04      	subs	r4, r0, #0
 80083bc:	d008      	beq.n	80083d0 <__sfmoreglue+0x28>
 80083be:	2100      	movs	r1, #0
 80083c0:	002a      	movs	r2, r5
 80083c2:	6001      	str	r1, [r0, #0]
 80083c4:	6046      	str	r6, [r0, #4]
 80083c6:	300c      	adds	r0, #12
 80083c8:	60a0      	str	r0, [r4, #8]
 80083ca:	3268      	adds	r2, #104	; 0x68
 80083cc:	f7fd faa8 	bl	8005920 <memset>
 80083d0:	0020      	movs	r0, r4
 80083d2:	bd70      	pop	{r4, r5, r6, pc}

080083d4 <__sfp_lock_acquire>:
 80083d4:	b510      	push	{r4, lr}
 80083d6:	4802      	ldr	r0, [pc, #8]	; (80083e0 <__sfp_lock_acquire+0xc>)
 80083d8:	f7ff fc53 	bl	8007c82 <__retarget_lock_acquire_recursive>
 80083dc:	bd10      	pop	{r4, pc}
 80083de:	46c0      	nop			; (mov r8, r8)
 80083e0:	20000305 	.word	0x20000305

080083e4 <__sfp_lock_release>:
 80083e4:	b510      	push	{r4, lr}
 80083e6:	4802      	ldr	r0, [pc, #8]	; (80083f0 <__sfp_lock_release+0xc>)
 80083e8:	f7ff fc4c 	bl	8007c84 <__retarget_lock_release_recursive>
 80083ec:	bd10      	pop	{r4, pc}
 80083ee:	46c0      	nop			; (mov r8, r8)
 80083f0:	20000305 	.word	0x20000305

080083f4 <__sinit_lock_acquire>:
 80083f4:	b510      	push	{r4, lr}
 80083f6:	4802      	ldr	r0, [pc, #8]	; (8008400 <__sinit_lock_acquire+0xc>)
 80083f8:	f7ff fc43 	bl	8007c82 <__retarget_lock_acquire_recursive>
 80083fc:	bd10      	pop	{r4, pc}
 80083fe:	46c0      	nop			; (mov r8, r8)
 8008400:	20000306 	.word	0x20000306

08008404 <__sinit_lock_release>:
 8008404:	b510      	push	{r4, lr}
 8008406:	4802      	ldr	r0, [pc, #8]	; (8008410 <__sinit_lock_release+0xc>)
 8008408:	f7ff fc3c 	bl	8007c84 <__retarget_lock_release_recursive>
 800840c:	bd10      	pop	{r4, pc}
 800840e:	46c0      	nop			; (mov r8, r8)
 8008410:	20000306 	.word	0x20000306

08008414 <__sinit>:
 8008414:	b513      	push	{r0, r1, r4, lr}
 8008416:	0004      	movs	r4, r0
 8008418:	f7ff ffec 	bl	80083f4 <__sinit_lock_acquire>
 800841c:	69a3      	ldr	r3, [r4, #24]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d002      	beq.n	8008428 <__sinit+0x14>
 8008422:	f7ff ffef 	bl	8008404 <__sinit_lock_release>
 8008426:	bd13      	pop	{r0, r1, r4, pc}
 8008428:	64a3      	str	r3, [r4, #72]	; 0x48
 800842a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800842c:	6523      	str	r3, [r4, #80]	; 0x50
 800842e:	4b13      	ldr	r3, [pc, #76]	; (800847c <__sinit+0x68>)
 8008430:	4a13      	ldr	r2, [pc, #76]	; (8008480 <__sinit+0x6c>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	62a2      	str	r2, [r4, #40]	; 0x28
 8008436:	9301      	str	r3, [sp, #4]
 8008438:	42a3      	cmp	r3, r4
 800843a:	d101      	bne.n	8008440 <__sinit+0x2c>
 800843c:	2301      	movs	r3, #1
 800843e:	61a3      	str	r3, [r4, #24]
 8008440:	0020      	movs	r0, r4
 8008442:	f000 f81f 	bl	8008484 <__sfp>
 8008446:	6060      	str	r0, [r4, #4]
 8008448:	0020      	movs	r0, r4
 800844a:	f000 f81b 	bl	8008484 <__sfp>
 800844e:	60a0      	str	r0, [r4, #8]
 8008450:	0020      	movs	r0, r4
 8008452:	f000 f817 	bl	8008484 <__sfp>
 8008456:	2200      	movs	r2, #0
 8008458:	2104      	movs	r1, #4
 800845a:	60e0      	str	r0, [r4, #12]
 800845c:	6860      	ldr	r0, [r4, #4]
 800845e:	f7ff ff77 	bl	8008350 <std>
 8008462:	2201      	movs	r2, #1
 8008464:	2109      	movs	r1, #9
 8008466:	68a0      	ldr	r0, [r4, #8]
 8008468:	f7ff ff72 	bl	8008350 <std>
 800846c:	2202      	movs	r2, #2
 800846e:	2112      	movs	r1, #18
 8008470:	68e0      	ldr	r0, [r4, #12]
 8008472:	f7ff ff6d 	bl	8008350 <std>
 8008476:	2301      	movs	r3, #1
 8008478:	61a3      	str	r3, [r4, #24]
 800847a:	e7d2      	b.n	8008422 <__sinit+0xe>
 800847c:	08008924 	.word	0x08008924
 8008480:	08008399 	.word	0x08008399

08008484 <__sfp>:
 8008484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008486:	0007      	movs	r7, r0
 8008488:	f7ff ffa4 	bl	80083d4 <__sfp_lock_acquire>
 800848c:	4b1f      	ldr	r3, [pc, #124]	; (800850c <__sfp+0x88>)
 800848e:	681e      	ldr	r6, [r3, #0]
 8008490:	69b3      	ldr	r3, [r6, #24]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d102      	bne.n	800849c <__sfp+0x18>
 8008496:	0030      	movs	r0, r6
 8008498:	f7ff ffbc 	bl	8008414 <__sinit>
 800849c:	3648      	adds	r6, #72	; 0x48
 800849e:	68b4      	ldr	r4, [r6, #8]
 80084a0:	6873      	ldr	r3, [r6, #4]
 80084a2:	3b01      	subs	r3, #1
 80084a4:	d504      	bpl.n	80084b0 <__sfp+0x2c>
 80084a6:	6833      	ldr	r3, [r6, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d022      	beq.n	80084f2 <__sfp+0x6e>
 80084ac:	6836      	ldr	r6, [r6, #0]
 80084ae:	e7f6      	b.n	800849e <__sfp+0x1a>
 80084b0:	220c      	movs	r2, #12
 80084b2:	5ea5      	ldrsh	r5, [r4, r2]
 80084b4:	2d00      	cmp	r5, #0
 80084b6:	d11a      	bne.n	80084ee <__sfp+0x6a>
 80084b8:	0020      	movs	r0, r4
 80084ba:	4b15      	ldr	r3, [pc, #84]	; (8008510 <__sfp+0x8c>)
 80084bc:	3058      	adds	r0, #88	; 0x58
 80084be:	60e3      	str	r3, [r4, #12]
 80084c0:	6665      	str	r5, [r4, #100]	; 0x64
 80084c2:	f7ff fbdd 	bl	8007c80 <__retarget_lock_init_recursive>
 80084c6:	f7ff ff8d 	bl	80083e4 <__sfp_lock_release>
 80084ca:	0020      	movs	r0, r4
 80084cc:	2208      	movs	r2, #8
 80084ce:	0029      	movs	r1, r5
 80084d0:	6025      	str	r5, [r4, #0]
 80084d2:	60a5      	str	r5, [r4, #8]
 80084d4:	6065      	str	r5, [r4, #4]
 80084d6:	6125      	str	r5, [r4, #16]
 80084d8:	6165      	str	r5, [r4, #20]
 80084da:	61a5      	str	r5, [r4, #24]
 80084dc:	305c      	adds	r0, #92	; 0x5c
 80084de:	f7fd fa1f 	bl	8005920 <memset>
 80084e2:	6365      	str	r5, [r4, #52]	; 0x34
 80084e4:	63a5      	str	r5, [r4, #56]	; 0x38
 80084e6:	64a5      	str	r5, [r4, #72]	; 0x48
 80084e8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80084ea:	0020      	movs	r0, r4
 80084ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084ee:	3468      	adds	r4, #104	; 0x68
 80084f0:	e7d7      	b.n	80084a2 <__sfp+0x1e>
 80084f2:	2104      	movs	r1, #4
 80084f4:	0038      	movs	r0, r7
 80084f6:	f7ff ff57 	bl	80083a8 <__sfmoreglue>
 80084fa:	1e04      	subs	r4, r0, #0
 80084fc:	6030      	str	r0, [r6, #0]
 80084fe:	d1d5      	bne.n	80084ac <__sfp+0x28>
 8008500:	f7ff ff70 	bl	80083e4 <__sfp_lock_release>
 8008504:	230c      	movs	r3, #12
 8008506:	603b      	str	r3, [r7, #0]
 8008508:	e7ef      	b.n	80084ea <__sfp+0x66>
 800850a:	46c0      	nop			; (mov r8, r8)
 800850c:	08008924 	.word	0x08008924
 8008510:	ffff0001 	.word	0xffff0001

08008514 <_fwalk_reent>:
 8008514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008516:	0004      	movs	r4, r0
 8008518:	0006      	movs	r6, r0
 800851a:	2700      	movs	r7, #0
 800851c:	9101      	str	r1, [sp, #4]
 800851e:	3448      	adds	r4, #72	; 0x48
 8008520:	6863      	ldr	r3, [r4, #4]
 8008522:	68a5      	ldr	r5, [r4, #8]
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	9b00      	ldr	r3, [sp, #0]
 8008528:	3b01      	subs	r3, #1
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	d504      	bpl.n	8008538 <_fwalk_reent+0x24>
 800852e:	6824      	ldr	r4, [r4, #0]
 8008530:	2c00      	cmp	r4, #0
 8008532:	d1f5      	bne.n	8008520 <_fwalk_reent+0xc>
 8008534:	0038      	movs	r0, r7
 8008536:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008538:	89ab      	ldrh	r3, [r5, #12]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d908      	bls.n	8008550 <_fwalk_reent+0x3c>
 800853e:	220e      	movs	r2, #14
 8008540:	5eab      	ldrsh	r3, [r5, r2]
 8008542:	3301      	adds	r3, #1
 8008544:	d004      	beq.n	8008550 <_fwalk_reent+0x3c>
 8008546:	0029      	movs	r1, r5
 8008548:	0030      	movs	r0, r6
 800854a:	9b01      	ldr	r3, [sp, #4]
 800854c:	4798      	blx	r3
 800854e:	4307      	orrs	r7, r0
 8008550:	3568      	adds	r5, #104	; 0x68
 8008552:	e7e8      	b.n	8008526 <_fwalk_reent+0x12>

08008554 <__swhatbuf_r>:
 8008554:	b570      	push	{r4, r5, r6, lr}
 8008556:	000e      	movs	r6, r1
 8008558:	001d      	movs	r5, r3
 800855a:	230e      	movs	r3, #14
 800855c:	5ec9      	ldrsh	r1, [r1, r3]
 800855e:	0014      	movs	r4, r2
 8008560:	b096      	sub	sp, #88	; 0x58
 8008562:	2900      	cmp	r1, #0
 8008564:	da08      	bge.n	8008578 <__swhatbuf_r+0x24>
 8008566:	220c      	movs	r2, #12
 8008568:	5eb3      	ldrsh	r3, [r6, r2]
 800856a:	2200      	movs	r2, #0
 800856c:	602a      	str	r2, [r5, #0]
 800856e:	061b      	lsls	r3, r3, #24
 8008570:	d411      	bmi.n	8008596 <__swhatbuf_r+0x42>
 8008572:	2380      	movs	r3, #128	; 0x80
 8008574:	00db      	lsls	r3, r3, #3
 8008576:	e00f      	b.n	8008598 <__swhatbuf_r+0x44>
 8008578:	466a      	mov	r2, sp
 800857a:	f000 f91b 	bl	80087b4 <_fstat_r>
 800857e:	2800      	cmp	r0, #0
 8008580:	dbf1      	blt.n	8008566 <__swhatbuf_r+0x12>
 8008582:	23f0      	movs	r3, #240	; 0xf0
 8008584:	9901      	ldr	r1, [sp, #4]
 8008586:	021b      	lsls	r3, r3, #8
 8008588:	4019      	ands	r1, r3
 800858a:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <__swhatbuf_r+0x4c>)
 800858c:	18c9      	adds	r1, r1, r3
 800858e:	424b      	negs	r3, r1
 8008590:	4159      	adcs	r1, r3
 8008592:	6029      	str	r1, [r5, #0]
 8008594:	e7ed      	b.n	8008572 <__swhatbuf_r+0x1e>
 8008596:	2340      	movs	r3, #64	; 0x40
 8008598:	2000      	movs	r0, #0
 800859a:	6023      	str	r3, [r4, #0]
 800859c:	b016      	add	sp, #88	; 0x58
 800859e:	bd70      	pop	{r4, r5, r6, pc}
 80085a0:	ffffe000 	.word	0xffffe000

080085a4 <__smakebuf_r>:
 80085a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085a6:	2602      	movs	r6, #2
 80085a8:	898b      	ldrh	r3, [r1, #12]
 80085aa:	0005      	movs	r5, r0
 80085ac:	000c      	movs	r4, r1
 80085ae:	4233      	tst	r3, r6
 80085b0:	d006      	beq.n	80085c0 <__smakebuf_r+0x1c>
 80085b2:	0023      	movs	r3, r4
 80085b4:	3347      	adds	r3, #71	; 0x47
 80085b6:	6023      	str	r3, [r4, #0]
 80085b8:	6123      	str	r3, [r4, #16]
 80085ba:	2301      	movs	r3, #1
 80085bc:	6163      	str	r3, [r4, #20]
 80085be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80085c0:	466a      	mov	r2, sp
 80085c2:	ab01      	add	r3, sp, #4
 80085c4:	f7ff ffc6 	bl	8008554 <__swhatbuf_r>
 80085c8:	9900      	ldr	r1, [sp, #0]
 80085ca:	0007      	movs	r7, r0
 80085cc:	0028      	movs	r0, r5
 80085ce:	f7fd fa1b 	bl	8005a08 <_malloc_r>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	d108      	bne.n	80085e8 <__smakebuf_r+0x44>
 80085d6:	220c      	movs	r2, #12
 80085d8:	5ea3      	ldrsh	r3, [r4, r2]
 80085da:	059a      	lsls	r2, r3, #22
 80085dc:	d4ef      	bmi.n	80085be <__smakebuf_r+0x1a>
 80085de:	2203      	movs	r2, #3
 80085e0:	4393      	bics	r3, r2
 80085e2:	431e      	orrs	r6, r3
 80085e4:	81a6      	strh	r6, [r4, #12]
 80085e6:	e7e4      	b.n	80085b2 <__smakebuf_r+0xe>
 80085e8:	4b0f      	ldr	r3, [pc, #60]	; (8008628 <__smakebuf_r+0x84>)
 80085ea:	62ab      	str	r3, [r5, #40]	; 0x28
 80085ec:	2380      	movs	r3, #128	; 0x80
 80085ee:	89a2      	ldrh	r2, [r4, #12]
 80085f0:	6020      	str	r0, [r4, #0]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	81a3      	strh	r3, [r4, #12]
 80085f6:	9b00      	ldr	r3, [sp, #0]
 80085f8:	6120      	str	r0, [r4, #16]
 80085fa:	6163      	str	r3, [r4, #20]
 80085fc:	9b01      	ldr	r3, [sp, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00d      	beq.n	800861e <__smakebuf_r+0x7a>
 8008602:	0028      	movs	r0, r5
 8008604:	230e      	movs	r3, #14
 8008606:	5ee1      	ldrsh	r1, [r4, r3]
 8008608:	f000 f8e6 	bl	80087d8 <_isatty_r>
 800860c:	2800      	cmp	r0, #0
 800860e:	d006      	beq.n	800861e <__smakebuf_r+0x7a>
 8008610:	2203      	movs	r2, #3
 8008612:	89a3      	ldrh	r3, [r4, #12]
 8008614:	4393      	bics	r3, r2
 8008616:	001a      	movs	r2, r3
 8008618:	2301      	movs	r3, #1
 800861a:	4313      	orrs	r3, r2
 800861c:	81a3      	strh	r3, [r4, #12]
 800861e:	89a0      	ldrh	r0, [r4, #12]
 8008620:	4307      	orrs	r7, r0
 8008622:	81a7      	strh	r7, [r4, #12]
 8008624:	e7cb      	b.n	80085be <__smakebuf_r+0x1a>
 8008626:	46c0      	nop			; (mov r8, r8)
 8008628:	08008399 	.word	0x08008399

0800862c <_malloc_usable_size_r>:
 800862c:	1f0b      	subs	r3, r1, #4
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	1f18      	subs	r0, r3, #4
 8008632:	2b00      	cmp	r3, #0
 8008634:	da01      	bge.n	800863a <_malloc_usable_size_r+0xe>
 8008636:	580b      	ldr	r3, [r1, r0]
 8008638:	18c0      	adds	r0, r0, r3
 800863a:	4770      	bx	lr

0800863c <_raise_r>:
 800863c:	b570      	push	{r4, r5, r6, lr}
 800863e:	0004      	movs	r4, r0
 8008640:	000d      	movs	r5, r1
 8008642:	291f      	cmp	r1, #31
 8008644:	d904      	bls.n	8008650 <_raise_r+0x14>
 8008646:	2316      	movs	r3, #22
 8008648:	6003      	str	r3, [r0, #0]
 800864a:	2001      	movs	r0, #1
 800864c:	4240      	negs	r0, r0
 800864e:	bd70      	pop	{r4, r5, r6, pc}
 8008650:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008652:	2b00      	cmp	r3, #0
 8008654:	d004      	beq.n	8008660 <_raise_r+0x24>
 8008656:	008a      	lsls	r2, r1, #2
 8008658:	189b      	adds	r3, r3, r2
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	2a00      	cmp	r2, #0
 800865e:	d108      	bne.n	8008672 <_raise_r+0x36>
 8008660:	0020      	movs	r0, r4
 8008662:	f000 f831 	bl	80086c8 <_getpid_r>
 8008666:	002a      	movs	r2, r5
 8008668:	0001      	movs	r1, r0
 800866a:	0020      	movs	r0, r4
 800866c:	f000 f81a 	bl	80086a4 <_kill_r>
 8008670:	e7ed      	b.n	800864e <_raise_r+0x12>
 8008672:	2000      	movs	r0, #0
 8008674:	2a01      	cmp	r2, #1
 8008676:	d0ea      	beq.n	800864e <_raise_r+0x12>
 8008678:	1c51      	adds	r1, r2, #1
 800867a:	d103      	bne.n	8008684 <_raise_r+0x48>
 800867c:	2316      	movs	r3, #22
 800867e:	3001      	adds	r0, #1
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	e7e4      	b.n	800864e <_raise_r+0x12>
 8008684:	2400      	movs	r4, #0
 8008686:	0028      	movs	r0, r5
 8008688:	601c      	str	r4, [r3, #0]
 800868a:	4790      	blx	r2
 800868c:	0020      	movs	r0, r4
 800868e:	e7de      	b.n	800864e <_raise_r+0x12>

08008690 <raise>:
 8008690:	b510      	push	{r4, lr}
 8008692:	4b03      	ldr	r3, [pc, #12]	; (80086a0 <raise+0x10>)
 8008694:	0001      	movs	r1, r0
 8008696:	6818      	ldr	r0, [r3, #0]
 8008698:	f7ff ffd0 	bl	800863c <_raise_r>
 800869c:	bd10      	pop	{r4, pc}
 800869e:	46c0      	nop			; (mov r8, r8)
 80086a0:	2000000c 	.word	0x2000000c

080086a4 <_kill_r>:
 80086a4:	2300      	movs	r3, #0
 80086a6:	b570      	push	{r4, r5, r6, lr}
 80086a8:	4d06      	ldr	r5, [pc, #24]	; (80086c4 <_kill_r+0x20>)
 80086aa:	0004      	movs	r4, r0
 80086ac:	0008      	movs	r0, r1
 80086ae:	0011      	movs	r1, r2
 80086b0:	602b      	str	r3, [r5, #0]
 80086b2:	f7fa fae1 	bl	8002c78 <_kill>
 80086b6:	1c43      	adds	r3, r0, #1
 80086b8:	d103      	bne.n	80086c2 <_kill_r+0x1e>
 80086ba:	682b      	ldr	r3, [r5, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d000      	beq.n	80086c2 <_kill_r+0x1e>
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	bd70      	pop	{r4, r5, r6, pc}
 80086c4:	20000300 	.word	0x20000300

080086c8 <_getpid_r>:
 80086c8:	b510      	push	{r4, lr}
 80086ca:	f7fa facf 	bl	8002c6c <_getpid>
 80086ce:	bd10      	pop	{r4, pc}

080086d0 <__sread>:
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	000c      	movs	r4, r1
 80086d4:	250e      	movs	r5, #14
 80086d6:	5f49      	ldrsh	r1, [r1, r5]
 80086d8:	f000 f8a4 	bl	8008824 <_read_r>
 80086dc:	2800      	cmp	r0, #0
 80086de:	db03      	blt.n	80086e8 <__sread+0x18>
 80086e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80086e2:	181b      	adds	r3, r3, r0
 80086e4:	6563      	str	r3, [r4, #84]	; 0x54
 80086e6:	bd70      	pop	{r4, r5, r6, pc}
 80086e8:	89a3      	ldrh	r3, [r4, #12]
 80086ea:	4a02      	ldr	r2, [pc, #8]	; (80086f4 <__sread+0x24>)
 80086ec:	4013      	ands	r3, r2
 80086ee:	81a3      	strh	r3, [r4, #12]
 80086f0:	e7f9      	b.n	80086e6 <__sread+0x16>
 80086f2:	46c0      	nop			; (mov r8, r8)
 80086f4:	ffffefff 	.word	0xffffefff

080086f8 <__swrite>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	001f      	movs	r7, r3
 80086fc:	898b      	ldrh	r3, [r1, #12]
 80086fe:	0005      	movs	r5, r0
 8008700:	000c      	movs	r4, r1
 8008702:	0016      	movs	r6, r2
 8008704:	05db      	lsls	r3, r3, #23
 8008706:	d505      	bpl.n	8008714 <__swrite+0x1c>
 8008708:	230e      	movs	r3, #14
 800870a:	5ec9      	ldrsh	r1, [r1, r3]
 800870c:	2200      	movs	r2, #0
 800870e:	2302      	movs	r3, #2
 8008710:	f000 f874 	bl	80087fc <_lseek_r>
 8008714:	89a3      	ldrh	r3, [r4, #12]
 8008716:	4a05      	ldr	r2, [pc, #20]	; (800872c <__swrite+0x34>)
 8008718:	0028      	movs	r0, r5
 800871a:	4013      	ands	r3, r2
 800871c:	81a3      	strh	r3, [r4, #12]
 800871e:	0032      	movs	r2, r6
 8008720:	230e      	movs	r3, #14
 8008722:	5ee1      	ldrsh	r1, [r4, r3]
 8008724:	003b      	movs	r3, r7
 8008726:	f000 f81f 	bl	8008768 <_write_r>
 800872a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800872c:	ffffefff 	.word	0xffffefff

08008730 <__sseek>:
 8008730:	b570      	push	{r4, r5, r6, lr}
 8008732:	000c      	movs	r4, r1
 8008734:	250e      	movs	r5, #14
 8008736:	5f49      	ldrsh	r1, [r1, r5]
 8008738:	f000 f860 	bl	80087fc <_lseek_r>
 800873c:	89a3      	ldrh	r3, [r4, #12]
 800873e:	1c42      	adds	r2, r0, #1
 8008740:	d103      	bne.n	800874a <__sseek+0x1a>
 8008742:	4a05      	ldr	r2, [pc, #20]	; (8008758 <__sseek+0x28>)
 8008744:	4013      	ands	r3, r2
 8008746:	81a3      	strh	r3, [r4, #12]
 8008748:	bd70      	pop	{r4, r5, r6, pc}
 800874a:	2280      	movs	r2, #128	; 0x80
 800874c:	0152      	lsls	r2, r2, #5
 800874e:	4313      	orrs	r3, r2
 8008750:	81a3      	strh	r3, [r4, #12]
 8008752:	6560      	str	r0, [r4, #84]	; 0x54
 8008754:	e7f8      	b.n	8008748 <__sseek+0x18>
 8008756:	46c0      	nop			; (mov r8, r8)
 8008758:	ffffefff 	.word	0xffffefff

0800875c <__sclose>:
 800875c:	b510      	push	{r4, lr}
 800875e:	230e      	movs	r3, #14
 8008760:	5ec9      	ldrsh	r1, [r1, r3]
 8008762:	f000 f815 	bl	8008790 <_close_r>
 8008766:	bd10      	pop	{r4, pc}

08008768 <_write_r>:
 8008768:	b570      	push	{r4, r5, r6, lr}
 800876a:	0004      	movs	r4, r0
 800876c:	0008      	movs	r0, r1
 800876e:	0011      	movs	r1, r2
 8008770:	001a      	movs	r2, r3
 8008772:	2300      	movs	r3, #0
 8008774:	4d05      	ldr	r5, [pc, #20]	; (800878c <_write_r+0x24>)
 8008776:	602b      	str	r3, [r5, #0]
 8008778:	f7fa fab7 	bl	8002cea <_write>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d103      	bne.n	8008788 <_write_r+0x20>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d000      	beq.n	8008788 <_write_r+0x20>
 8008786:	6023      	str	r3, [r4, #0]
 8008788:	bd70      	pop	{r4, r5, r6, pc}
 800878a:	46c0      	nop			; (mov r8, r8)
 800878c:	20000300 	.word	0x20000300

08008790 <_close_r>:
 8008790:	2300      	movs	r3, #0
 8008792:	b570      	push	{r4, r5, r6, lr}
 8008794:	4d06      	ldr	r5, [pc, #24]	; (80087b0 <_close_r+0x20>)
 8008796:	0004      	movs	r4, r0
 8008798:	0008      	movs	r0, r1
 800879a:	602b      	str	r3, [r5, #0]
 800879c:	f7fa fac1 	bl	8002d22 <_close>
 80087a0:	1c43      	adds	r3, r0, #1
 80087a2:	d103      	bne.n	80087ac <_close_r+0x1c>
 80087a4:	682b      	ldr	r3, [r5, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d000      	beq.n	80087ac <_close_r+0x1c>
 80087aa:	6023      	str	r3, [r4, #0]
 80087ac:	bd70      	pop	{r4, r5, r6, pc}
 80087ae:	46c0      	nop			; (mov r8, r8)
 80087b0:	20000300 	.word	0x20000300

080087b4 <_fstat_r>:
 80087b4:	2300      	movs	r3, #0
 80087b6:	b570      	push	{r4, r5, r6, lr}
 80087b8:	4d06      	ldr	r5, [pc, #24]	; (80087d4 <_fstat_r+0x20>)
 80087ba:	0004      	movs	r4, r0
 80087bc:	0008      	movs	r0, r1
 80087be:	0011      	movs	r1, r2
 80087c0:	602b      	str	r3, [r5, #0]
 80087c2:	f7fa fab8 	bl	8002d36 <_fstat>
 80087c6:	1c43      	adds	r3, r0, #1
 80087c8:	d103      	bne.n	80087d2 <_fstat_r+0x1e>
 80087ca:	682b      	ldr	r3, [r5, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d000      	beq.n	80087d2 <_fstat_r+0x1e>
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	bd70      	pop	{r4, r5, r6, pc}
 80087d4:	20000300 	.word	0x20000300

080087d8 <_isatty_r>:
 80087d8:	2300      	movs	r3, #0
 80087da:	b570      	push	{r4, r5, r6, lr}
 80087dc:	4d06      	ldr	r5, [pc, #24]	; (80087f8 <_isatty_r+0x20>)
 80087de:	0004      	movs	r4, r0
 80087e0:	0008      	movs	r0, r1
 80087e2:	602b      	str	r3, [r5, #0]
 80087e4:	f7fa fab5 	bl	8002d52 <_isatty>
 80087e8:	1c43      	adds	r3, r0, #1
 80087ea:	d103      	bne.n	80087f4 <_isatty_r+0x1c>
 80087ec:	682b      	ldr	r3, [r5, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d000      	beq.n	80087f4 <_isatty_r+0x1c>
 80087f2:	6023      	str	r3, [r4, #0]
 80087f4:	bd70      	pop	{r4, r5, r6, pc}
 80087f6:	46c0      	nop			; (mov r8, r8)
 80087f8:	20000300 	.word	0x20000300

080087fc <_lseek_r>:
 80087fc:	b570      	push	{r4, r5, r6, lr}
 80087fe:	0004      	movs	r4, r0
 8008800:	0008      	movs	r0, r1
 8008802:	0011      	movs	r1, r2
 8008804:	001a      	movs	r2, r3
 8008806:	2300      	movs	r3, #0
 8008808:	4d05      	ldr	r5, [pc, #20]	; (8008820 <_lseek_r+0x24>)
 800880a:	602b      	str	r3, [r5, #0]
 800880c:	f7fa faaa 	bl	8002d64 <_lseek>
 8008810:	1c43      	adds	r3, r0, #1
 8008812:	d103      	bne.n	800881c <_lseek_r+0x20>
 8008814:	682b      	ldr	r3, [r5, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d000      	beq.n	800881c <_lseek_r+0x20>
 800881a:	6023      	str	r3, [r4, #0]
 800881c:	bd70      	pop	{r4, r5, r6, pc}
 800881e:	46c0      	nop			; (mov r8, r8)
 8008820:	20000300 	.word	0x20000300

08008824 <_read_r>:
 8008824:	b570      	push	{r4, r5, r6, lr}
 8008826:	0004      	movs	r4, r0
 8008828:	0008      	movs	r0, r1
 800882a:	0011      	movs	r1, r2
 800882c:	001a      	movs	r2, r3
 800882e:	2300      	movs	r3, #0
 8008830:	4d05      	ldr	r5, [pc, #20]	; (8008848 <_read_r+0x24>)
 8008832:	602b      	str	r3, [r5, #0]
 8008834:	f7fa fa3c 	bl	8002cb0 <_read>
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	d103      	bne.n	8008844 <_read_r+0x20>
 800883c:	682b      	ldr	r3, [r5, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d000      	beq.n	8008844 <_read_r+0x20>
 8008842:	6023      	str	r3, [r4, #0]
 8008844:	bd70      	pop	{r4, r5, r6, pc}
 8008846:	46c0      	nop			; (mov r8, r8)
 8008848:	20000300 	.word	0x20000300

0800884c <_init>:
 800884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884e:	46c0      	nop			; (mov r8, r8)
 8008850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008852:	bc08      	pop	{r3}
 8008854:	469e      	mov	lr, r3
 8008856:	4770      	bx	lr

08008858 <_fini>:
 8008858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885a:	46c0      	nop			; (mov r8, r8)
 800885c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800885e:	bc08      	pop	{r3}
 8008860:	469e      	mov	lr, r3
 8008862:	4770      	bx	lr
